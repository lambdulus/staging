{"version":3,"sources":["Types.ts","untyped-lambda-integration/Types.ts","untyped-lambda-integration/TreeComparator.ts","misc/index.ts","untyped-lambda-integration/AppTypes.ts","Constants.ts","components/TopBar.tsx","components/MenuBar.tsx","markdown-integration/AppTypes.ts","components/PickBoxTypeModal.tsx","components/CreateBox.tsx","untyped-lambda-integration/ReactPrinter.tsx","untyped-lambda-integration/ReductionMessage.tsx","untyped-lambda-integration/Step.tsx","untyped-lambda-integration/InactiveExpression.tsx","components/Editor.tsx","components/DebugControls.tsx","untyped-lambda-integration/Expression.tsx","untyped-lambda-integration/ExpressionBox.tsx","untyped-lambda-integration/MacroList.tsx","untyped-lambda-integration/ExerciseBox.tsx","untyped-lambda-integration/Settings.tsx","untyped-lambda-integration/EmptyExpression.tsx","untyped-lambda-integration/UntypedLambdaBox.tsx","markdown-integration/Note.tsx","empty-integration/index.tsx","components/Box.tsx","untyped-lambda-integration/BoxTopBar.tsx","markdown-integration/BoxTopBar.tsx","empty-integration/BoxTopBar.tsx","components/BoxTitleBar.tsx","components/BoxContainer.tsx","screens/Notebook.tsx","misc/UserGuide.ts","screens/Help.tsx","screens/Settings.tsx","screens/NotebookList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BoxType","Screen","PromptPlaceholder","UntypedLambdaType","StepValidity","EvaluationStrategy","TreeComparator","roots","macrotables","translator","Map","equals","context","this","compare","left","right","Lambda","backup","entries","set","argument","name","Application","Macro","ChurchNumeral","Variable","has","get","console","log","toString","type","mapLeftFromTo","from","to","sequence","fn","result","Array","e","i","reportEvent","category","action","label","window","ga","getAll","send","exception","UNTYPED_LAMBDA_INTEGRATION_STATE","macrotable","CODE_NAME","defaultSettings","UNTYPED_LAMBDA","SLI","expandStandalones","strategy","NORMAL","SDE","toMacroMap","definitions","mNames","reduce","acc","def","split","body","trim","length","Error","tokens","tokenize","lambdaLetters","singleLetterVars","macromap","ast","parse","createNewUntypedLambdaBoxFromSource","source","subtype","EMPTY","__key","Date","now","title","minimized","settingsOpen","expression","history","isRunning","breakpoints","timeoutID","undefined","timeout","macrolistOpen","editor","placeholder","content","syntaxError","Object","map","join","message","validity","CORRECT","userInput","isNormal","astCopy","clone","findSimplifiedReduction","strategyToEvaluator","nextReduction","None","lastReduction","step","isNormalForm","exerciseStep","EXERCISE","EVAL_MODE","createNewUntypedLambdaBoxFromSource2","decodeUntypedLambdaState","box","untypedLambdaBox","decodedFirst","decodeUntypedLambdaFast","index","decodedNth","reduction","decodeUntypedLambdaExpression","GLOBAL_SETTINGS_ENABLER","evaluator","Expansion","target","newAst","perform","newreduction","parent","treeSide","M","expanded","newperformevaluation","Alpha","findRedexIn","_","beta","redex","identifier","ASTReductionType","BETA","arity","getFnArgNames","arit","macroname","includes","getArityOfKnownMacro","macroAppRedex","basepoint","tree","extender","NormalMacroRedexExtender","MacroBeta","applications","parents","extendMacroAppRedex","APPLICATIVE","app","argreduction","argperformevaluation","lastapp","lastparent","appParent","shift","Child","Left","Right","reducer","reduced","macro","macroIsSingleStep","evaluateReduction","tryMacroContraction","resAST","isPeanoNumber","isChurchNumeral","n","s","z","peanoToNumber","churchNumeralToNumber","churchArgNames","builtinMacros","definition","macroast","ALPHA","alpha","conversions","some","lambda","ETA","eta","EXPANSION","expansion","GAMA","macrobeta","found","visit","application","push","variable","ASTVisitor","NormalEvaluator","ApplicativeEvaluator","OPTIMISATION","OptimizeEvaluator","ABSTRACTION","NormalAbstractionEvaluator","ALL_BOX_TYPES","LISP","MARKDOWN","DEFAULT_WHITELIST","InitNotebookState","boxList","activeBoxIndex","NaN","focusedBoxIndex","allowedBoxes","settings","whitelist","UNTYPED_CODE_NAME","UntypedLambdaDefaultSettings","getDefaultSettings","integrationStates","locked","menuOpen","editingName","persistent","EmptyAppState","notebookList","currentNotebook","currentScreen","MAIN","loadSettingsFromStorage","serialized","localStorage","getItem","deserialized","JSON","key","value","error","loadAppStateFromStorage","maybeState","setItem","stringify","state","decodeNotebook","decode","updateAppStateToStorage","updateNotebookStateToStorage","notebook","arr","TopBar","props","onImport","onClearWorkspace","onScreenChange","ntbk","link","data","Blob","URL","createObjectURL","createURL","className","onClick","SETTINGS","href","download","setTimeout","id","accept","onChange","event","files","file","reader","FileReader","onload","readAsText","onFiles","htmlFor","MenuBar","rel","HELP","onMarkDownBlur","isEditing","isAllowed","anyBoxAllowed","PickBoxTypeModal","allowed","addNew","whiteList","untLSettings","stopPropagation","addLispBoxIfAllowed","note","caretPosition","addMDBoxIfAllowed","CreateBox","modalOpen","setState","Component","ReactPrinter","rendered","redexesFound","accumulator","isBreakpoint","conversion","args","Symbol","broken","Set","printMultiLambda","node","leftClassName","rightClassName","Beta","Gama","churchNumber","redexClass","redexes","ReductionMessage","StepMemo","memo","Step","lastStep","StepWrapper","stepRecord","addBreakpoint","children","newast","printer","print","INCORRECT","substr","InactiveExpression","ActionType","Editor","submitOnEnter","shouldReplaceLambda","onContent","onEnter","onShiftEnter","onCtrlEnter","replace","InputField","onKeyDown","shiftKey","ctrlKey","preventDefault","lines","onKeyDownCapture","height","Math","max","min","language","theme","options","formatOnPaste","minimap","enabled","renderLineHighlight","scrollBeyondLastLine","overviewRulerBorder","scrollbar","editorDidMount","monaco","focus","DebugControls","document","onkeydown","altKey","metaKey","onStep","onRun","runMessage","disabled","PureComponent","Expression","bind","shouldShowDebugControls","isExercise","array","Uint32Array","crypto","getRandomValues","addBox","createBoxFrom","onExecute","style","breakpoint","setBoxState","brkpts","filter","brk","ExpressionBox","onSimplifiedStep","onStop","shouldBreak","onSimplifiedRun","isActive","isNowNormalForm","etaEvaluator","msg","pop","arityBreakpoint","find","clearTimeout","add","normal","MacroList","macroTable","macroName","macroExpression","ExerciseBox","onSubmitExpression","parseExpression","onExerciseStep","onSimplifiedExerciseStep","errorMessage","match","newMacrotable","userAst","VALIDATE_MODE","Settings","change","settingsEnabled","SLI_E","strat_E","uniq","random","checked","EmptyExpression","isMinimized","onDebug","onExercise","UntypedLambdaBox","isFocused","ref","elem","boundingRect","getBoundingClientRect","viewportHeight","innerHeight","bottom","scrollIntoView","ORDINARY","macroContext","renderBoxContent","Note","Empty","Box","updateBoxState","addBoxAfter","BoxTopBar","EmptyTopBar","BoxTitleBar","where","shareLinkOpen","removeBox","contentEditable","suppressContentEditableWarning","onBlur","textContent","searchParams","location","macros","encodeURI","url","host","navigator","clipboard","writeText","onMouseDownCapture","resetState","resetUntypedLambdaBox","BoxContainer","isActiveBox","isFocusedBox","makeActive","addBoxBefore","boxTypeClassName","mapBoxTypeToStr","onMouseDown","Notebook","insertBefore","insertAfter","createBoxFromURL","updateURL","boxState","boxListCopy","splice","updateNotebook","newIndex","patch","Help","guide","process","SettingsScreen","updateSettings","untypedSettings","UNTYPED_GLOBAL_SETTINGS_ENABLER","unTypLSet","NotebookList","onSelectNotebook","onRemoveNotebook","onUpdateNotebook","onAddNotebook","prompt","App","appState","boxType","initIntegrationStates","setScreen","changeNotebook","addNotebook","removeNotebook","editNotebookName","changeNotebookName","stopEditingNotebook","importNotebook","clearWorkspace","selectNotebook","updateNthNotebook","createNotebookFromURL","urlSearchParams","strat","sli","sub","decodeURI","createNewNotebookWithBox","pushState","ex","replaceState","NOTEBOOKS","screen","createNewNotebook","Number","isNaN","newSettings","confirm","Boolean","hostname","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d88a09e3.chunk.js","sourcesContent":["import { UntypedLambdaState, UntypedLambdaSettings, UntypedLambdaIntegrationState } from \"./untyped-lambda-integration/Types\"\nimport { NoteState } from \"./markdown-integration/AppTypes\"\n\nexport enum BoxType {\n  UNTYPED_LAMBDA = 'UNTYPED_LAMBDA',\n  LISP = 'LISP',\n  MARKDOWN = 'MARKDOWN',\n}\n\nexport enum Screen {\n  MAIN,\n  HELP,\n  // MACROLIST,\n  SETTINGS,\n  NOTEBOOKS, // TODO: this will be the final solution to the `Multiple Notebooks` problem\n}\n\nexport type AnyBox = -1\n\nexport type NoBox = -2\n\n// TODO: when building `Exam Mode`  allow only Array<BoxType> or NoBox\nexport type BoxesWhitelist = Array<BoxType> | AnyBox | NoBox\n\nexport interface AbstractIntegrationState {}\n\nexport interface AbstractBoxState {\n  type : BoxType,\n  __key : string, \n  title : String,\n  minimized : boolean,\n  settingsOpen : boolean,\n}\n\nexport interface AbstractSettings {\n  type : BoxType,\n}\n\nexport interface LispBox extends AbstractBoxState {\n  // TODO: delete this placeholder and implement it\n}\n\nexport interface LispSettings extends AbstractSettings {\n  // TODO: delete this placeholder and implement it\n}\n\nexport type BoxState = UntypedLambdaState | LispBox | NoteState // or other things in the future\n\nexport type Settings = UntypedLambdaSettings | LispSettings // or other things in the future\n\nexport type IntegrationState = UntypedLambdaIntegrationState // | Others\n\nexport interface IntegrationStates {\n  [key : string] : IntegrationState  // TODO: FIX THIS!!!\n}\n\n// TODO: this needs to be reconsidered\nexport interface GlobalSettings {\n  // [UNTYPED_CODE_NAME] : UntypedLambdaSettings\n  [key : string] : Settings\n}\n\nexport interface NotebookState {\n  boxList : Array<BoxState>\n  activeBoxIndex : number\n  focusedBoxIndex : number | undefined\n  allowedBoxes : BoxesWhitelist\n\n  locked : boolean\n  menuOpen : boolean\n\n  settings : GlobalSettings // TODO: refactor to use the Dictionary\n  integrationStates : IntegrationStates\n\n  __key : string\n  name : string\n  editingName : boolean\n  persistent : boolean\n}\n\nexport interface AppState {\n  notebookList : Array<NotebookState>,\n  currentNotebook : number,\n  currentScreen : Screen,\n}\n\n\n// // TODO: move to specific integration\n// export interface MacroDefinitionState {\n//   __key : string\n//   type : BoxType\n//   macroName : string\n//   macroExpression : string\n//   singleLetterNames : boolean\n//   editor : {\n//     placeholder : string\n//     content : string\n//     caretPosition : number\n//     syntaxError : Error | null\n//   }\n// }\n\n\n\n","import { AbstractSettings, BoxType, AbstractBoxState, AbstractIntegrationState } from \"../Types\"\nimport { AST, ASTReduction, ASTReductionType, NormalEvaluator, ApplicativeEvaluator, OptimizeEvaluator, MacroMap } from \"@lambdulus/core\"\n\n\nexport interface UntypedLambdaIntegrationState extends AbstractIntegrationState {\n  macrotable : MacroMap\n}\n\nexport enum PromptPlaceholder {\n  INIT = 'Type λ (as \\\\) expression and hit enter',\n  EVAL_MODE = 'Hit enter for next step',\n  VALIDATE_MODE = 'Write next step and hit enter for validation',\n  MACRO = 'Define Macro like: `NAME := [λ expression]` and hit enter',\n  NOTE = 'Type note and hit shift enter'\n}\n\nexport enum UntypedLambdaType {\n  EMPTY = 'EMPTY',\n  ORDINARY = 'ORDINARY',\n  EXERCISE = 'EXERCISE',\n  // MACRO,\n}\n\nexport type Breakpoint = {\n  type : ASTReductionType,\n  context : AST,\n  broken : Set<AST>,\n}\n\nexport interface StepRecord {\n  ast : AST\n  lastReduction : ASTReduction | null\n  step : number\n  message : StepMessage\n  isNormalForm : boolean\n  exerciseStep : boolean\n}\n\nexport interface StepMessage {\n  message : String\n  validity : StepValidity\n  userInput : String\n}\n\nexport enum StepValidity {\n  CORRECT,\n  INCORRECT\n}\n\n\nexport enum EvaluationStrategy {\n  NORMAL = 'Normal Evaluation',\n  APPLICATIVE = 'Applicative Evaluation',\n  OPTIMISATION = 'Optimisation - η Conversion',\n  ABSTRACTION = 'Abstraction / Simplified Evaluation'\n}\n\nexport type UntypedLambdaState = UntypedLambdaExpressionState // | UntypedLambdaMacroState\n\n// TODO: consider abstract Untype Lambda State which will hold all common members\n\nexport interface UntypedLambdaExpressionState extends AbstractBoxState {\n  __key : string\n  type : BoxType\n\n  subtype : UntypedLambdaType\n  expression : string\n  ast : AST | null\n  history : Array<StepRecord>\n  isRunning : boolean\n  breakpoints : Array<Breakpoint>\n  timeoutID : number | undefined\n  timeout : number\n  // isExercise : boolean\n  \n  strategy : EvaluationStrategy\n  SDE : boolean // Semantics Drive Evaluation (Strategy) -- formerly called Simplified Strategy\n  SLI : boolean\n  expandStandalones : boolean\n\n  macrolistOpen : boolean // this is gonna go out\n  macrotable : MacroMap // this is gonna go out - WHY? I don't think so - it's gonna stay\n  \n  editor : {\n    placeholder : string\n    content : string\n    syntaxError : Error | null\n  }\n}\n\n// export interface UntypedLambdaMacroState extends AbstractBoxState {\n//   __key : string\n//   type : BoxType\n\n//   subtype : UntypedLambdaType\n//   expression : string\n//   ast : AST | null\n//   macroName : string\n//   macroExpression : string\n  \n//   SLI : boolean\n//   expandStandalones : boolean\n//   strategy : EvaluationStrategy\n\n//   macrolistOpen : boolean\n//   macrotable : MacroMap\n\n//   editor : {\n//     placeholder : string\n//     content : string\n//     caretPosition : number\n//     syntaxError : Error | null\n//   }\n// }\n\nexport interface UntypedLambdaSettings extends AbstractSettings {\n  SLI : boolean\n  expandStandalones : boolean\n  strategy : EvaluationStrategy\n  SDE : boolean\n}\n\nexport type SettingsEnabled = {\n  SLI : boolean\n  expandStandalones : boolean\n  strategy : boolean\n}\n\nexport type Evaluator = NormalEvaluator | ApplicativeEvaluator | OptimizeEvaluator\n","import { AST, Lambda, Application, Macro, ChurchNumeral, Variable, MacroMap } from \"@lambdulus/core\"\n\n///////////////////////////////////////////////////////////////////////////////////////\n\ntype Pair<T> = [T, T]\n// type Triple<T> = [T, T, T]\n\n\n// TODO: fix the public equals interface, maybe public get and private set?\n// maybe implement public get method and bool itself leave private?\n//\n// first I need more trees, I need the previous AST\nexport class TreeComparator {\n  private translator : Map<string, string> = new Map()\n  public equals : boolean = true\n  private context : Pair<AST>\n\n  constructor (readonly roots : Pair<AST>, readonly macrotables : Pair<MacroMap>) {\n    [ ...this.context ] = roots\n    // TODO: I need to compare roots first\n    this.compare()\n  }\n\n  compare () : void {\n    /**\n    TODO: compare need to compare both children if got\n    if one of them is incorrect\n    then solve that problem\n    if both of them is incorrect\n    then solve both problems and then decide how both come together\n\n    then I have an instance of knowledge system\n    I can fire up that system in this context (this node with invalid children)\n    system will need to get instance of something to call methods on\n    because system needs to ask questions - like, is this possible,\n    is this error applicable?\n    so instead of human, code will look up the AST and answer the questions\n    so it will be some kind of class which is able to observe all 3 ASTs at the same time\n    it will also have implemented query methods,\n    probably wont be many of them, just few\n    **/\n    \n    const [ left, right ] : Pair<AST> = this.context\n\n    if (left instanceof Lambda && right instanceof Lambda) {\n      const backup : Map<string, string> = new Map(this.translator.entries())\n\n      this.translator.set(left.argument.name(), right.argument.name())\n      this.context = [ left.right, right.right ]\n      this.compare()\n\n      this.translator = backup\n    }\n    else if (left instanceof Application && right instanceof Application) {\n      this.context = [ left.left, right.left ]\n      this.compare()\n\n      if ( ! this.equals) {\n        return\n      }\n\n      this.context = [ left.right, right.right ]\n      this.compare()\n    }\n    else if (left instanceof Macro && right instanceof Macro) {\n      if (this.macrotables[0][left.name()] === this.macrotables[1][right.name()]) {\n        // this means that both macros are defined identicaly\n        // their names migh differ, but they are letter by letter defined as the same thing\n        this.equals = true\n        return\n      }\n      this.equals = left.name() === right.name()\n    }\n    else if (left instanceof ChurchNumeral && right instanceof ChurchNumeral) {\n      this.equals = left.name() === right.name()\n    }\n    else if (left instanceof Variable && right instanceof Variable) {\n      if (this.translator.has(left.name())) {\n        this.equals = this.translator.get(left.name()) === right.name()\n      }\n      else {\n        this.equals = left.name() === right.name()\n      }\n    }\n    else {\n      this.equals = false\n      console.log('something is not equal')\n      console.log(left.toString(), left.type)\n      console.log(right.toString(), right.type)\n    }\n  }\n}","export function debounce (fn : Function, treshold : number)\n : [ (...args : Array<any>) => void, () => void ] {\n  let timer : number\n  \n  return [\n    function debounced (...args : Array<any>) : void {\n      window.clearTimeout(timer)\n\n      timer = window.setTimeout(() => {\n        fn(...args)\n      }, treshold)\n    },\n    function cancel () : void {\n      window.clearTimeout(timer)\n    }\n  ]\n}\n\n// TODO: remove?\n// export function getSavedMacros () : MacroMap {\n//   return JSON.parse(window.localStorage.getItem('macrotable') || '{}')\n// }\n\nexport function trimStr (str : string) : string {\n  return str.trim()\n}\n\nexport function mapLeftFromTo(\n  from : number,\n  to : number,\n  sequence : Array<any>,\n  fn : (...args : Array<any>) => any) {\n    const result : Array<any> = new Array(to - from + 1)\n\n    for (let e = 0, i = from; i <= to; ++i) {\n      result[e++] = fn(sequence[i], i)\n    }\n\n    return result\n  }\n\n// TODO: remove?\n// export const HANDY_MACROS : MacroMap = {\n//   // 'Y' : '(λ f . (λ x . f (x x)) (λ x . f (x x)))',\n//   // 'Z' : '(λ f . (λ y . f (λ z . y y z)) (λ y . f (λ z . y y z)))',\n//   // FACT : '(Y (λ f n . (<= n 1) 1 (* n (f (- n 1)))))',\n//   // FACCT : '(λ n . (Y (λ f n a . IF (= n 1) a (f (- n 1) (* n a)))) (- n 1) (n))',\n//   // FIB : '(Y (λ f n . (= n 0) 0 ((= n 1) 1 ( + (f (- n 1)) (f (- n 2))))))',\n//   // // SHORTLIST : 'CON 3 (CONS 5 (CONS 1 NIL))',\n//   // // LONGLIST :  '(CONS 3 (CONS 5 (CONS 1 (CONS 10 (CONS 7 (CONS 2 (CONS 4 (CONS 9 (CONS 4 (CONS 6 (CONS 8 NIL)))))))))))',\n//   // APPEND : 'Y (λ fn listA listB . IF (NULL listA) (listB) (CONS (FIRST listA) (fn (SECOND listA) listB)))',\n//   // LISTGREQ : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (>= (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n//   // LISTLESS : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (< (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n//   // LISTGR : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (> (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n//   // LISTEQ : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (= (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n//   // QUICKSORT : 'Y (λ fn list . IF (NULL list) (NIL) ( IF (NULL (SECOND list)) (list) ( APPEND (fn (LISTLESS (FIRST list) list)) ( APPEND (LISTEQ (FIRST list) list) (fn (LISTGR (FIRST list) list)) ) ) ) )',\n//   // INFLIST : '(λ n . (Y (λ x . (λ f s g . g f s) n x)))',\n//   // REMOVENTH : 'Y (λ fn list n . IF (= n 0) (SECOND list) (IF (NULL list) NIL (CONS (FIRST list) (fn (SECOND list) (- n 1) ) ) ) )',\n//   // NTH : 'Y (λ fn list n . IF (= n 0) (FIRST list) (IF (NULL (list)) NIL (fn (SECOND list) (- n 1)) ) )',\n//   // LEN : 'Y (λ fn list . IF (NULL list) (0) (+ 1 (fn (SECOND list) )) )',\n//   // GETNTH : '(λ end . (Y (λ f n i . (end i) (i) ( (= n 0) (Y (λ f a . (end a) (i) (f) ) ) (f (- n 1)) ) )) )',\n//   // MAP : '(λ fn l . (Y (λ f it . IF (NULL it) (NIL) (CONS (fn (FIRST it)) (f (SECOND it))) )) l )',\n//   // REDUCE : '(λ fn l init . Y (λ f it acc . IF (NULL it) (acc) (f (SECOND it) (fn (FIRST it) acc)) ) l init )',\n//   // APPLY : '(λ f args . Y (λ ff f l . (NULL l) (f) (ff (f (FIRST l)) (SECOND l)) ) f args )',\n//   // RANGE : '(λ m n . Y (λ f e . (= e n) (CONS e NIL) (CONS e (f (+ e 1))) ) m )',\n//   // LISTCOMPR : '(λ args . APPLY (λ op in rng cond . Y (λ f l . (NULL l) (NIL) ( (cond (FIRST l)) (CONS (op (FIRST l)) (f (SECOND l))) (CONS (FIRST l) (f (SECOND l))) ) ) rng ) args )',\n//   // MOD : '(λ n m . (n (λ n . (= n (- m 1)) (0) (+ n 1)) (0)) )',\n//   // INFIX : 'APPLY (λ l op r . op l r)',\n// }\n\n// TODO: remove?\n// export function updateMacros (macroTable : MacroMap) : void {\n//   window.localStorage.setItem('macrotable', JSON.stringify(macroTable))\n// }\n\nexport function reportEvent (category : string, action : string, label : string) : void {\n  try {\n    const tracker = (window as any).ga.getAll()[0]\n    \n    tracker.send('event', category, action, label )\n  }\n  catch (exception) {\n    // TODO: fix?\n    // instead of printing to the console - show notification on the web\n    // console.log(\"\")\n    // console.log('PLEASE DISABLE YOUR ADBLOCKER OR ALLOW GOOGLE ANALYTICS FOR THIS SITE')\n    // console.log(\"\")\n    // console.error(exception)\n  }\n}","import { BoxType } from '../Types'\nimport { EvaluationStrategy, UntypedLambdaState, UntypedLambdaSettings, UntypedLambdaType, StepRecord, UntypedLambdaExpressionState, UntypedLambdaIntegrationState, SettingsEnabled, PromptPlaceholder, StepMessage, StepValidity } from \"./Types\"\nimport { ASTReduction, AST, decodeFast as decodeUntypedLambdaFast, Evaluator, NormalEvaluator, None, Expansion, Macro, ASTReductionType, Alpha, Lambda, Beta, Eta, Application, ASTVisitor, Variable, ChurchNumeral, builtinMacros, MacroTable, Token, tokenize, parse, ApplicativeEvaluator, OptimizeEvaluator, NormalAbstractionEvaluator, MacroMap } from '@lambdulus/core'\nimport { Child, Binary } from '@lambdulus/core/dist/ast'\nimport { TreeComparator } from './TreeComparator'\nimport { reportEvent } from '../misc'\n\n// import macroctx from './MacroContext'\n\n// NOTE: let instead of const just for now\nexport let UNTYPED_LAMBDA_INTEGRATION_STATE : UntypedLambdaIntegrationState = {\n  macrotable : {}\n}\n\nexport const ADD_BOX_LABEL = '+ Untyped λ Expression'\n\nexport const CODE_NAME = 'UNTYPED_LAMBDA_CALCULUS'\n\nexport const defaultSettings : UntypedLambdaSettings = {\n  type : BoxType.UNTYPED_LAMBDA,\n  SLI : true,\n  expandStandalones : false,\n  strategy : EvaluationStrategy.NORMAL,\n  SDE : true,\n}\n\nexport function createNewUntypedLambdaExpression (defaultSettings : UntypedLambdaSettings) : UntypedLambdaExpressionState {\n  return {\n    ...defaultSettings,\n    __key : Date.now().toString(),\n    type : BoxType.UNTYPED_LAMBDA,\n    subtype : UntypedLambdaType.EMPTY,\n    title : \"Untyped λ Expression\",\n    minimized : false,\n    settingsOpen : true,\n    expression : \"\",\n    ast : null,\n    history : [],\n    isRunning : false,\n    breakpoints : [],\n    timeoutID : undefined,\n    timeout : 5,\n    \n    // strategy : EvaluationStrategy.NORMAL,\n    // singleLetterNames : false,\n    // standalones : false,\n\n    macrolistOpen : false,\n    macrotable : { ...UNTYPED_LAMBDA_INTEGRATION_STATE.macrotable },\n\n    \n    editor : {\n      placeholder : \"placeholder\",\n      content : \"\",\n      syntaxError : null,\n    }\n  }\n}\n\n// NOTE: Original definition\n// export function toMacroMap (definitions : Array<string>) : MacroMap {\n//   return definitions.reduce((acc : MacroMap, def) => {\n//     const [name, body] = def.split(':=')\n//     return { ...acc, [name.trim()] : body.trim() }\n//   }, {})\n// }\n\nexport function toMacroMap (definitions : Array<string>, SLI : boolean) : MacroMap {\n  /**\n   * This might seem like something really wrong\n   * but hear me out!\n   * if you have SLI enabled and define your macros with SLI in mind - bodies of the macros\n   * contain some SLI syntax -> when expanded in the core - it is parsed with SLI disabled\n   * this might be considered bug of the core\n   * BUT!!! CORE has no way to get the information as of now\n   * I might consider adding another argument to the evaluators - being this specific setting\n   * until then - it's probably realatively safe to first:\n   */\n\n  // get MacroMap with only names - empty definitions\n  const mNames : MacroMap = definitions.reduce((acc : MacroMap, def) => {\n    const [name, body] = def.split(':=')\n\n    if (name.trim().length === 0 || body.trim().length === 0) {\n      throw Error(\"Invalid Macro definition. Possibly empty Macro definition?\")\n    }\n\n    return { ...acc, [name] : '' }\n  }, {})\n  \n  return definitions.reduce((acc : MacroMap, def) => {\n    const [name, body] = def.split(':=')\n\n    // tokenize each body\n    // lexer is given this incomplete macromap with just names\n    // lexer does not need the definitions, it would function well even if it was just an array of the macro names\n    // then parse the body of the macro\n    // once again --> right now - actual macro definitions are not needed because I won't do ANY expansion\n    // not even any real reduction\n    // I just need it to parse and then serialize the body of the macro\n    // that's it!\n    const tokens : Array<Token> = tokenize(body.trim(), { lambdaLetters : ['λ'], singleLetterVars : SLI, macromap : mNames })\n    const ast : AST = parse(tokens, mNames) // macroTable\n\n    return { ...acc, [name.trim()] : ast.toString() }\n  }, {})\n\n  // TODO: please fix it\n  // tokenize shoudl accept Array<MacroName>\n  // each eveluator needs to accept the SLI and possibly other configs? so the CORE\n  // can be absolutely unopionanted about the expansions and stuff\n}\n\nexport function createNewUntypedLambdaBoxFromSource (source : string, defaultSettings : UntypedLambdaSettings, subtype : UntypedLambdaType, macrotable : MacroTable) : UntypedLambdaExpressionState {\n  if (subtype === UntypedLambdaType.EMPTY) {\n    return {\n      ...defaultSettings,\n      __key : Date.now().toString(),\n      type : BoxType.UNTYPED_LAMBDA,\n      subtype,\n      title : \"Untyped λ Expression\",\n      minimized : false,\n      settingsOpen : false,\n      expression : \"\",\n      ast : null,\n      history : [],\n      isRunning : false,\n      breakpoints : [],\n      timeoutID : undefined,\n      timeout : 5,\n      \n      // strategy : EvaluationStrategy.NORMAL,\n      // singleLetterNames : false,\n      // standalones : false,\n  \n      macrolistOpen : false,\n      macrotable, // ...UNTYPED_LAMBDA_INTEGRATION_STATE.macrotable\n  \n      \n      editor : {\n        placeholder : \"placeholder\",\n        content : source,\n        syntaxError : null,\n      }\n    }\n  }\n  else {\n    return createNewUntypedLambdaBoxFromSource2(source, defaultSettings, subtype, macrotable)\n  }\n}\n\nfunction createNewUntypedLambdaBoxFromSource2 (source : string, defaultSettings : UntypedLambdaSettings, subtype : UntypedLambdaType, macrotable : MacroTable) : UntypedLambdaExpressionState {\n  const { SDE, SLI, strategy } = defaultSettings\n\n  const expression = [Object.entries(macrotable).map(([name, def]) => `${name} := ${def}`).join(';\\n') , source].join(';\\n')\n\n  const macromap : MacroMap = macrotable // toMacroMap(definitions, SLI)\n  \n  try {\n    const tokens : Array<Token> = tokenize(source, { lambdaLetters : ['λ'], singleLetterVars : SLI, macromap })\n    const ast : AST = parse(tokens, macromap) // macroTable\n    \n    \n    let message : StepMessage = { validity : StepValidity.CORRECT, userInput : expression, message : '' }\n    let isNormal = false\n\n    const astCopy : AST = ast.clone()\n\n    const nextReduction = (() => {\n      if (SDE) {\n        return findSimplifiedReduction(astCopy, strategy, macromap)[0]\n      }\n      else {\n        const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n        return evaluator.nextReduction\n      }\n    })()\n\n    \n    if (nextReduction instanceof None) {\n      isNormal = true\n      message.message = 'Expression is in normal form.'\n      \n      reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())  \n    }\n\n    reportEvent('Submit Expression from Link', 'submit valid', source)\n\n\n    return {\n      ...defaultSettings,\n      __key : Date.now().toString(),\n      type : BoxType.UNTYPED_LAMBDA,\n      subtype,\n      title : \"Untyped λ Expression\",\n      minimized : false,\n      settingsOpen : false,\n      isRunning : false,\n      breakpoints : [],\n      timeoutID : undefined,\n      timeout : 5,\n      ast,\n      expression,\n      history : [ {\n        ast : ast.clone(),\n        lastReduction : new None(),\n        step : 0,\n        message,\n        isNormalForm : isNormal,\n        exerciseStep : subtype === UntypedLambdaType.EXERCISE,\n      } ],\n\n      macrolistOpen : false,\n      macrotable : macromap,\n      // macrotable : { ...UNTYPED_LAMBDA_INTEGRATION_STATE.macrotable },\n\n      editor : {\n        content : source,\n        placeholder : PromptPlaceholder.EVAL_MODE,\n        syntaxError : null,\n      }\n    }\n\n  } catch (exception) {\n    reportEvent('Submit Expression from Link', 'submit invalid', source)\n    throw exception\n  }\n}\n\nexport function resetUntypedLambdaBox (state : UntypedLambdaState) : UntypedLambdaState {\n  return {\n    ...state,\n    subtype : UntypedLambdaType.EMPTY,\n    title : \"Untyped λ Expression\",\n    minimized : false,\n    expression : \"\",\n    ast : null,\n    history : [],\n    isRunning : false,\n    breakpoints : [],\n    timeoutID : undefined,\n    timeout : 5,\n    \n    macrolistOpen : false,\n    macrotable : { ...UNTYPED_LAMBDA_INTEGRATION_STATE.macrotable },\n\n    \n    editor : {\n      placeholder : \"placeholder\",\n      content : \"\",\n      syntaxError : null,\n    }\n  }\n}\n\n// export function createNewUntypedLambdaExercise (defaultSettings : UntypedLambdaSettings) : UntypedLambdaState {\n//   return {\n//     ...defaultSettings,\n//     __key : Date.now().toString(),\n//     type : BoxType.UNTYPED_LAMBDA,\n//     subtype : UntypedLambdaType.EXERCISE,\n//     title : \"Untyped λ Exercise\",\n//     minimized : false,\n//     menuOpen : false,\n//     settingsOpen : false,\n//     expression : \"\",\n//     ast : null,\n//     history : [],\n//     isRunning : false,\n//     breakpoints : [],\n//     timeoutID : undefined,\n//     timeout : 5,\n    \n//     // strategy : EvaluationStrategy.NORMAL,\n//     // singleLetterNames : false,\n//     // standalones : false,\n\n//     macrolistOpen : false,\n//     macrotable : { ...UNTYPED_LAMBDA_INTEGRATION_STATE.macrotable },\n\n    \n//     editor : {\n//       placeholder : \"placeholder\",\n//       content : \"\",\n//       caretPosition : 0,\n//       syntaxError : null,\n//     }\n//   }\n// }\n\n// export function createNewUntypedLambdaMacro (defaultSettings : UntypedLambdaSettings) : UntypedLambdaMacroState {\n//   return (\n//     {\n//       ...defaultSettings,\n//       __key : Date.now().toString(),\n//       type : BoxType.UNTYPED_LAMBDA,\n//       title : \"Untyped λ Macro Expression\",\n//       minimized : false,\n//       menuOpen : false,\n//       settingsOpen : false,\n    \n//       subtype : UntypedLambdaType.MACRO,\n//       expression : '',\n//       ast : null,\n//       macroName : '',\n//       macroExpression : '',\n\n//       macrolistOpen : false,\n//       macrotable : { ...UNTYPED_LAMBDA_INTEGRATION_STATE.macrotable },\n\n      \n//       editor : {\n//         placeholder : PromptPlaceholder.MACRO,\n//         content : '',\n//         caretPosition : 0,\n//         syntaxError : null\n//       }\n//     }\n//   )\n// }\n\n\nexport function decodeUntypedLambdaState (box : UntypedLambdaState) : UntypedLambdaState {\n  return decodeUntypedLambdaExpression(box as UntypedLambdaExpressionState)\n\n  // switch (box.subtype) {\n  //   case UntypedLambdaType.ORDINARY:\n  //     return decodeUntypedLambdaExpression(box as UntypedLambdaExpressionState)\n      \n    // case UntypedLambdaType.MACRO:\n    //   return box //TODO: implement -- it's not really needed\n\n    // case UntypedLambdaType.EXERCISE:\n    //   return decodeUntypedLambdaExpression(box as UntypedLambdaExpressionState)\n  // }\n}\n\nfunction decodeUntypedLambdaExpression (box : UntypedLambdaExpressionState) : UntypedLambdaExpressionState {\n  const untypedLambdaBox : UntypedLambdaExpressionState = box as UntypedLambdaExpressionState\n\n  if (untypedLambdaBox.expression === '') {\n    return untypedLambdaBox\n  }\n  \n  const decodedFirst : AST | null = decodeUntypedLambdaFast(untypedLambdaBox.ast)\n\n  if (decodedFirst === null) {\n    // TODO: repair:\n    // parse expression\n    // replace untypedLambdaBox.ast with parsed AST\n    // for now - throw error\n    throw Error(\"ROOT AST IS NOT DECODABLE\")\n  }\n\n  untypedLambdaBox.ast = decodedFirst\n  untypedLambdaBox.history = untypedLambdaBox.history.map((step : StepRecord, index : number) => {\n    let decodedNth : AST | null = decodeUntypedLambdaFast(step.ast) as AST\n\n    if (decodedNth === null) {\n      // TODO: repair:\n      // try to take previous Step.ast and do the evaluation\n      // though - remember this Step.step (number) may not be + 1 of the previous one\n      // you will need to do the steps as long as need to be\n      // replace decodedNth with parsed AST\n      // for throw\n      throw Error(\"CURRENT STEP IS NOT DECODABLE \" + index)\n    }\n\n    // TODO: maybe instead of this theatre just use the Core . Evalautor\n    // and get real instance of ASTReduction\n    let reduction : ASTReduction | undefined | null = step.lastReduction\n\n    if (step.lastReduction === undefined) {\n      reduction = null\n    }\n\n    return {\n      ...step,\n      lastReduction : reduction,\n      ast : decodedNth, // TODO: as AST this is unsafe\n    }\n  })\n\n  return untypedLambdaBox\n}\n\nexport const GLOBAL_SETTINGS_ENABLER : SettingsEnabled = {\n  SLI : true,\n  expandStandalones : true,\n  strategy : true,\n}\n\n// export const MACRO_SETTINGS_ENABLER : SettingsEnabled = {\n//   SLI : true,\n//   expandStandalones : false,\n//   strategy : false,\n// }\n\ntype PerformEvaluation = (ast : AST) => AST\n\n\nexport function findSimplifiedReduction (ast : AST, strategy : EvaluationStrategy, macrotable : MacroTable) : [ASTReduction, PerformEvaluation] {\n  const evaluator : Evaluator =  new (strategyToEvaluator(strategy) as any)(ast) // new NormalEvaluator(ast) // TODO: get evaluator dipending on the strategy in the future\n  const nextReduction = evaluator.nextReduction\n\n  // nothing to do\n  // TODO: try to contract this whole expression if it's actually known Macro\n  if (evaluator.nextReduction instanceof None) {\n    return [nextReduction, (ast) => ast]\n  }\n\n  if (nextReduction instanceof Expansion && nextReduction.target instanceof ChurchNumeral) {\n    // console.log(\"_________________________________ CHURCH NUMERAL EXPANSION\")\n\n    const newAst = evaluator.perform() // expand Number\n\n    //\n    // ast je cely vyraz - po performu uz modifikovany\n    // newAst je ted to same jako ast\n    // uvnitr celeho stromu hledam dalsi REDEX\n    //\n    const [newreduction] = findSimplifiedReduction(newAst, strategy, macrotable)\n\n    // return [nextReduction, (ast) => newAst]\n\n    if (newreduction instanceof None) {\n      //\n      // newAst nema zadny REDEX\n      // reknu ze se ma provest expanze Churche + vratim funkci, ktera jenom vrati AST ktery je ji poslany\n      // takhle to funguje proto - ze nemuzu naklonovat ast kdyz se findSimplifiedReduction zavola\n      // protoze by pak nesouhlasili identifikatory a podobne --> to vede na to, ze to co mi do findSimplifiedReduction\n      // je poslano - to zmodifikuju a pak proste jenom predpokladam, ze to nikomu nevadi\n      // ukazka naprosto spatnyho designu provadeni redukci a faktu ze AST melo byt immutable\n      //\n\n      // console.log(\"_________________________________ rule I. INSIDE EXPANSION\")\n      return [newreduction, (ast) => ast]\n      // NO REDEX FOUND --> normal form, not expanding Church Numeral\n      // means - I should signal normal form -- perhaps there is a problem\n      // --> previous step should already be normal form\n      // but this way user finds out this is terminal state only after hitting - next step manually -- possible fix?\n    }\n    else {\n      // there's REDEX --> I know for a fact that it's not rule III. (inside the expanded expression)\n      // now - because Church Numerals DON'T have arity - they are supposed to be numbers and not Macros\n      // I can just forgot all the complex ruling and do the sensible thing --> perform \n\n      // console.log(\"_________________________________ CHURCH EXPAND -- INSIDE EXPANSION\")\n      return [nextReduction, (ast) => newAst]\n    }\n  }\n\n  if (nextReduction instanceof Expansion && nextReduction.target instanceof Macro) {\n    // console.log(\"_________________________________ MACRO EXPANSION   \", nextReduction.target.toString())\n    // debugger\n    \n    const { parent, treeSide, target } : Expansion = nextReduction\n    \n    const M : Macro = target.clone()\n\n    {\n      // anchor #1\n      const clone = ast.clone()\n      let newAst = null\n\n      {\n        const evaluator : Evaluator =\n          new (strategyToEvaluator(strategy) as any)(clone) // new NormalEvaluator(ast) // TODO: get evaluator dipending on the strategy in the future\n        newAst = evaluator.perform()\n      }\n\n      const _evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(newAst) // new NormalEvaluator(ast) // TODO: get evaluator dipending on the strategy in the future\n      const nextReduction = _evaluator.nextReduction\n\n      if (nextReduction instanceof Expansion) {\n        return [nextReduction, () => evaluator.perform()]\n      }\n    }\n\n    let newAst = evaluator.perform()\n    // NOTE: if the newreduction is alpha I would like to mutate this variable\n    const expanded = parent !== null && treeSide !== null ? parent[treeSide].clone() : newAst.clone()\n    // const expanded = parent !== null && treeSide !== null ? parent[treeSide] : newAst\n\n    //\n    // newAst je cely vyraz po expanzi soucasneho makra\n    // v nem vyhledam dalsi REDEX\n    //\n    let [newreduction, newperformevaluation] = findSimplifiedReduction(newAst, strategy, macrotable)\n    // NOTE: if the newreduction is alpha I would like to mutate these variables\n    // const newevaluator = new NormalEvaluator(newAst)\n    // const newreduction = newevaluator.nextReduction\n\n    if (newreduction instanceof None) {\n      // console.log(\"_________________________________ rule I. INSIDE EXPANSION\")\n      return [newreduction, (ast) => ast] // (ast) => ast\n      // NO REDEX FOUND --> normal form, not expanding M\n      // means - I should signal normal form -- perhaps there is a problem\n      // --> previous step should already be normal form\n      // but this way user finds out this is terminal state only after hitting - next step manually -- possible fix?\n    }\n\n    if (newreduction instanceof Alpha) {\n      // after the expansion -> next thing is Alpha, that needs to be covered\n      // we can do the alpha and then call findSimplifiedReduction again on that\n      newAst = newperformevaluation(newAst);\n      ([newreduction, newperformevaluation] = findSimplifiedReduction(newAst, strategy, macrotable))\n    }\n\n    // debugger\n    // node : AST = parent === null ? newAst\n    //                                                     (to co jsme expandovali)\n    if (parent !== null && treeSide !== null && findRedexIn(expanded, newreduction)) {\n      // REDEX is completely bounded by expanded M Macro expression\n      // console.log(\"_________________________________ rule III. INSIDE EXPANSION\")\n      return [nextReduction, (_) => evaluator.perform()]\n\n      // REDEX belongs to expanded M\n      // --> expand the macro -- so perform the previous macro expansion\n    }\n\n    const beta : Beta = newreduction as Beta\n    if (parent !== null && treeSide !== null // parent and treeSide won't be null --> parent is either APP or Lambda --> they need to parent the macro which was expanded am I right?\n        && parent instanceof Application\n        && parent[treeSide] instanceof Lambda && beta.redex?.left.identifier === parent[treeSide].identifier\n        && newreduction.type === ASTReductionType.BETA\n        && parent.identifier === beta.redex.identifier) {\n      // console.log(\"_________________________________ rule IV. INSIDE\")\n      // rule IV.\n\n      // if ( ! macroIsSingleStep(M)) {\n      //   return [newreduction, newperformevaluation]\n      // }\n\n\n      const expanded : Lambda = parent[treeSide] as Lambda\n      // const [fnArgNames, fnBody] = splitLambdaFn(expanded)\n      // const fnBody : AST = getFnBody(expanded)\n      const fnArgNames : Array<string> = getFnArgNames(expanded)\n      let arity : number = fnArgNames.length\n      const arit : number | null = getArityOfKnownMacro(M.name())\n      if (arit !== null && arit <= arity) {\n        arity = arit\n      }\n      // const arity : number = getArity(expanded)\n      // console.log(\"arity of the macro is: \", arity)\n      // --> get arity of expression X which was expanded from macro M\n      // it should be simple -- just go to the right for the lambda and as long as it's right side is also lambda count +1\n\n\n      const macroAppRedex : MacroBeta =  extendMacroAppRedex(arity, parent, ast)\n      if (strategy === EvaluationStrategy.APPLICATIVE || hasApplicativeOverride(M)) {\n        // console.log(\"............................. MACRO \" + M.name() + \"   has APPLICATIVE OVERRIDE\")\n\n        for (const app of macroAppRedex.applications) {\n          const [argreduction, argperformevaluation] = findSimplifiedReduction(app.right, strategy, macrotable)\n\n          if (argreduction instanceof None) {\n            continue\n          }\n          else {\n            // debugger\n            // we previously expanded our M in the ast\n            // recursive findSimplifiedReduction then works with that\n            // so current app containes M as expanded Expression\n            // we need to take that back\n            \n            return [argreduction, (ast : AST) => {\n              // const newast : AST = argperformevaluation(ast) // original line\n              app.right = argperformevaluation(app.right)\n\n              parent[treeSide] = M\n              // if (newast.identifier !== app.identifier) {\n              //   app.right = newast\n              //   // this is ugly hack but just checking if it works -- it doesn't\n              // }\n              return ast\n            }]\n          }\n        }\n      }\n\n      // kdyz tohle mam hotove OK\n      // musim se podle strategie rozhodnout co budu delat s tim polem applikaci OK\n      // pokud jsem applicative strategy --> musim jit od zacatku pole applikaci OK\n      // a kontrolovat ze app.right je v normalnim tvaru OK\n      // pokud nektery z nich neni - tak jednoduse vezmu ten right -> reknu najdi mi redex a to je to co odsud vratim OK\n      // stejne tak, pokud ma macro applicative override a nektery argument by nebyl normalni tvar OK\n      // jinak pokracuju dal OK\n\n      // return macrobeta reduction as a reduction OK\n      // which is essentially just array of applications OK\n      // also the TOP context needs to check the arity - not just me OK\n      // the performer is just some foreach on the array of betas OK\n\n      \n      // let fnBody : AST = expanded.right\n      // let fn : AST = expanded\n      // const getFnBody = () => (fn as Lambda).right\n      // const setFn = (tree : AST) => fn = tree\n      return [macroAppRedex, (ast) => {\n        // debugger\n        // about SINGLE-STEP:\n        // this function needs to perform all the normalisation if single-step is True\n        // for that reason - I need to remember the last parent of the Extended-REDEX\n        // if that last parent is null --> then it's actually the whole ast\n        // THEN --> after the for loop I need to run another for loop which runs until the last parent is reduced to the normal form\n        // it it's the whole tree/ast --> then it's easier\n        // if it's some sub-tree than it's either APP or ABS\n        // if it's Lambda -> kinda easy --> I can pick this Lambda and normalize it's right side -> then set the result to the original Lambda\n        // it it's APP -> probably same - just need to decide/remember the treeside\n        // for that reason - it would be best to remember also the last app\n        // let's do this now\n        let lastapp : AST | null = null\n        let lastparent : Binary | null = null\n\n        // debugger\n        \n        // budu muset projit kazdou aplikaci v poli\n        // vytvorit pro ni beta redukci pro vyraz ktery vznikl v predchozi iteraci - proto nejde udelat pole beta redukci dopredu\n        // a provest je - na konci vratim vysledny AST\n        for (const app of macroAppRedex.applications) {\n          let appParent : Binary | undefined | null = macroAppRedex.parents.shift() as Binary\n          let treeSide : Child | null = appParent === undefined ? null : appParent.left.identifier === app.identifier ? Child.Left : Child.Right\n          \n          \n\n          \n\n          const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(app) // new NormalEvaluator(app)\n          evaluator.reducer.perform()\n          const reduced : AST = evaluator.reducer.tree\n\n          if (appParent === undefined || treeSide === null) {\n            appParent = null\n            treeSide = null\n            ast = reduced\n            lastapp = ast\n          }\n          else {\n            appParent[treeSide] = reduced\n            lastapp = appParent[treeSide] // what about if the last parent is null?\n            // that means lastapp is going to be something old and wrong right?\n            // maybe it should be ast/reduced\n\n          }\n\n          lastparent = appParent // because I am lazy and don't want to use ifs before the for loop\n\n\n          // let appParent : Binary | undefined | null = macroAppRedex.parents.shift() as Binary\n          // let treeSide : Child | null = appParent === undefined ? null : appParent.left.identifier === app.identifier ? Child.Left : Child.Right\n          \n          // if (appParent === undefined) {\n          //   appParent = null\n          //   treeSide = null\n          // }\n\n          // lastparent = appParent // because I am lazy and don't want to use ifs before the for loop\n          \n          // const argName : string = fnArgNames.shift() as string\n\n          // // if ((app.left as Binary).right === undefined) {\n          // //   debugger\n          // // }\n\n          // const beta : Beta = new Beta(app, appParent as Binary, treeSide, (app.left as Lambda).body , argName, app.right) // getFnBody()\n\n          // // fnBody = (fnBody as Application).right\n          // // setFn(getFnBody())\n\n          // const reducer : BetaReducer = new BetaReducer(beta, ast)\n          // reducer.perform()\n          // ast = reducer.tree\n        }\n\n        if (macroIsSingleStep(M)) {\n          if (lastapp === null) {\n            throw Error(\"This is bad, real bad.\")\n            // NOTE LATER: not sure what does that mean?\n          }\n  \n          if (lastparent === null) {\n            // normalize the whole tree\n            // top-most APP or ABS a result of the Macro-Beta\n  \n            while (true) {\n              const [nextReduction, evaluateReduction] : [ASTReduction, any] =\n                findSimplifiedReduction(ast, strategy, macrotable)\n              \n              if (nextReduction instanceof None) {\n                return tryMacroContraction(ast, macrotable)\n              }\n              else {\n                ast = evaluateReduction(ast)\n              }\n            }\n          }\n          else {\n            const treeSide : Child = lastparent.left.identifier === lastapp.identifier ? Child.Left : Child.Right\n  \n            // debugger\n            while (true) {\n              const [nextReduction, evaluateReduction] : [ASTReduction, any] =\n                findSimplifiedReduction(lastapp as AST, strategy, macrotable)\n  \n              if (nextReduction instanceof None) {\n                lastparent[treeSide] = tryMacroContraction(lastapp as AST, macrotable)\n                return ast\n              }\n              else {\n                lastapp = evaluateReduction(lastapp)\n              }\n            }\n          }\n        }\n        \n        return ast // it it's not single-step Macro --> then no contraction I guess\n      }]\n    }\n\n    // THIS IS WRONG --> IT'S NOT NEEDED -- INSTEAD I FIXED RULE III AND IT SHOULD BE ENOUGH\n    // if (newreduction instanceof Expansion) {\n    //   console.log(\"_________________________________ rule V. INSIDE EXPANSION\")\n    //   // Expansion inside Expansion\n    //   // this is for cases --> when one macro needs to expanded because what it expands to is expression ->\n    //   // which leads to another expansion --> because there is some Macro M2 which contains redex for example\n    //   // which means - I need to actually expand \n    //   return [nextReduction, (_) => newAst]\n    // }\n\n    // if (parent !== null && treeSide !== null && ( ! findRedexIn(parent[treeSide], newreduction)))\n    // this is fallbacking action\n    // redex was found - but does not concern previously expanded macro - so the expansions is unnecessary\n    // eslint-disable-next-line\n    {\n      // console.log(\"_________________________________ rule II. INSIDE THIS IS FALLBACK\")\n      // console.log(newreduction.type)\n\n      // REDEX is NOT inside expanded M -- NOT rule III.\n      // expanded Macro is also not part of the REDEX -- NOT rule IV\n      // --> not expanding M just perform the second reduction but on original tree\n      return [newreduction, (ast) => {\n        const resAST = newperformevaluation(newAst)\n        const p = parent as AST\n        const ts = treeSide as String\n\n        // if (p === null || ts === null) {\n        //   console.log(nextReduction)\n        //   console.log(newreduction)\n        //   console.log()\n        //   debugger\n        // }\n\n        if (p !== null && ts !== null) {\n          (p as any)[ts as any] = M\n        }\n\n        // // parent should be not-null\n        // // because if there was a Macro which we were able to Expand\n        // // and then there has been found Redex which is not part of the newly expanded sub-tree\n        // // the new Redex simply has to be in different part of the tree --> which means - M (original Macro) is not the root\n        // //\n        // // this is aparenlty not true\n        // // A := + 1 2; B := A; B\n        // // probably because there are two levels of macro expansion and this leads to parent possibly being null\n        // // after the last change -- anchor #1\n        // // this should once again be true - but just to be sure - I will leave it inside the if\n\n        return resAST\n      }]\n    }\n  }\n  else {\n    // console.log(\"_________________________________ just normal stuff\")\n    return [nextReduction, (ast) => evaluator.perform()]\n\n  // {\n  //   const astCopy : AST = ast.clone()\n  //   const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n    \n  //   if (evaluator.nextReduction instanceof None) {\n  //     isNormal = true\n  //     message = 'Expression is in normal form.'\n      \n  //     reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())  \n  //   }\n\n  //   setBoxState({\n  //     ...state,\n  //     history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : isNormal } ],\n\n  //   })\n  // }\n  }\n}\n\nexport function tryMacroContraction (ast : AST, macrotable : MacroTable) : AST {\n  // compare the ast with all the bulti-in macros\n  // compare the ast with all the user-defined macros\n\n  if (isChurchNumeral(ast)) {\n    const n : number = churchNumeralToNumber(ast as Lambda)\n    const [s, z] : [string, string] = churchArgNames(ast)\n\n    if (n === 0 && s === 's' && z === 'z') {\n      return parse(tokenize(`0`, { lambdaLetters : ['λ'], singleLetterVars : false, macromap : macrotable }), macrotable)\n    }\n    else if (n === 0 && s === 't' && z === 'f') {\n      return parse(tokenize(`F`, { lambdaLetters : ['λ'], singleLetterVars : false, macromap : macrotable }), macrotable)\n    }\n\n    return parse(tokenize(`${n}`, { lambdaLetters : ['λ'], singleLetterVars : false, macromap : macrotable }), macrotable)\n  }\n  \n  for (const [name, definition] of [ ...Object.entries(builtinMacros), ...Object.entries(macrotable) ]) {\n    // parse the definition\n    const tokens : Array<Token> = tokenize(definition, { lambdaLetters : ['λ'], singleLetterVars : false, macromap : macrotable })\n    const macroast : AST = parse(tokens, macrotable)\n\n    const comparator : TreeComparator = new TreeComparator([ast, macroast], [macrotable, macrotable])\n\n    if (comparator.equals) {\n      const macroNameAst : AST = parse(tokenize(name, { lambdaLetters : ['λ'], singleLetterVars : false, macromap : macrotable }), macrotable)\n\n\n      // const virtualToken : Token = new Token((macroNameAst as Macro).token.type, name, BLANK_POSITION)\n      return macroNameAst // this is dirty-fix -- because the following line somehow produces macro which\n      // expand incorrectly to `undefined` value\n      // return new Macro(virtualToken, macrotable)\n    }\n  }\n\n  return ast\n\n  // for (const macro : )\n}\n\nfunction isChurchNumeral (ast : AST) : boolean {\n  if ( ! (ast instanceof Lambda)) {\n    return false\n  }\n\n  if ( ! (ast.body instanceof Lambda)) {\n    return false\n  }\n\n  return isPeanoNumber(ast.argument.name(), ast.body.argument.name(), ast.body.body)\n}\n\nfunction churchArgNames (ast : AST) : [string, string] {\n  return [(ast as Lambda).argument.name(), ((ast as Lambda).body as Lambda).argument.name()]\n}\n\nfunction isPeanoNumber (s : string, z : string, ast : AST) : boolean {\n  if (ast instanceof Variable && ast.name() === z) {\n    return true\n  }\n\n  if (ast instanceof Application && ast.left.toString() === s) {\n    return isPeanoNumber(s, z, ast.right)\n  }\n\n  return false\n}\n\nfunction churchNumeralToNumber (ast : Lambda) : number {\n  const s : string = ast.argument.name()\n  const z : string = (ast.body as Lambda).argument.name()\n\n  return peanoToNumber((ast.body as Lambda).body, s, z)\n}\n\nfunction peanoToNumber (ast : AST, s : string, z : string) : number {\n  if (ast instanceof Variable && ast.name() === z) {\n    return 0\n  }\n  else {\n    return 1 + peanoToNumber((ast as Application).right, s, z)\n  }\n}\n\n\nfunction getArityOfKnownMacro (macroname : string) : number | null {\n  if ([ \"*\", \"+\", \"/\", \"-\", \"^\", \"DELTA\", \"=\", \">\", \"<\", \">=\", \"<=\", \"AND\", \"OR\" ].includes(macroname)) {\n    return 2\n  }\n\n  if ([ \"ZERO\", \"NOT\", \"SUC\", \"PRED\" ].includes(macroname)) {\n    return 1\n  }\n\n  return null\n}\n\n/**\n * Decides if the result of the application of the macro M to its arguments should evaluate to the normal form\n */\nfunction macroIsSingleStep (macro : Macro) : boolean {\n  if ([ \"*\", \"+\", \"/\", \"-\", \"^\", \"DELTA\", \"=\", \">\", \"<\", \">=\", \"<=\", \"ZERO\", \"NOT\", \"AND\", \"OR\", \"PRED\", \"SUC\" ].includes(macro.name())) {\n    return true\n  }\n\n  // \"T\", \"F\" -- functioning as `if then else` --> therefore can not be Single-Step\n\n  return false\n}\n\n\n// this is basic implementation\n// perhaps Visitor pattern would be better\nfunction findRedexIn (tree : AST, reduction : ASTReduction) : boolean {\n  if (reduction.type === ASTReductionType.ALPHA) {\n    // somehow solve this mess\n    const alpha : Alpha = reduction as Alpha\n\n    if (Array.from(alpha.conversions).some((lambda : Lambda) => tree.identifier === lambda.identifier)) {\n      return true\n    }\n  }\n  else if (reduction.type === ASTReductionType.BETA) {\n    const beta : Beta = reduction as Beta\n    if (beta.treeSide !== null && beta.parent !== null && tree.identifier === beta.parent[beta.treeSide].identifier) {\n      return true\n    }\n  }\n  else if (reduction.type === ASTReductionType.ETA) {\n    const eta : Eta = reduction as Eta\n    if (tree.identifier === eta.parent?.identifier) {\n      return true\n    }\n  }\n  else if (reduction.type === ASTReductionType.EXPANSION) {\n    // debugger\n    const expansion : Expansion = reduction as Expansion\n    if (tree.identifier === expansion.target.identifier) {\n      return true\n    }\n  }\n  else if (reduction.type === ASTReductionType.GAMA) {\n    const macrobeta : MacroBeta = reduction as MacroBeta\n    if (tree.identifier === macrobeta.applications[macrobeta.applications.length - 1].identifier) {\n      return true\n    }\n  }\n\n  if (tree instanceof Application || tree instanceof Lambda) {\n    return findRedexIn(tree.left, reduction) || findRedexIn(tree.right, reduction)\n  }\n  else {\n    return false\n  }\n}\n\n// function getArity (ast : AST) : number { \n//   if (ast instanceof Lambda) {\n//     return 1 + getArity(ast.right)\n//   }\n//   else {\n//     return 0\n//   }\n// }\n\n// function splitLambdaFn (ast : AST) : [Array<string>, AST] {\n//   if (ast instanceof Lambda) {\n//     const [args, body] = splitLambdaFn(ast.right)\n//     return [[ast.left.name(), ...args], body]\n//   }\n//   else {\n//     return [[], ast]\n//   }\n// }\n\nfunction getFnArgNames (ast : AST) : Array<string> {\n  if (ast instanceof Lambda) {\n    return [ast.left.name(), ...getFnArgNames(ast.right)]\n  }\n  else {\n    return []\n  }\n}\n\n\nfunction extendMacroAppRedex (arity : number, basepoint : Application, tree : AST) : MacroBeta {\n  const extender : NormalMacroRedexExtender = new NormalMacroRedexExtender(arity, basepoint, tree)\n\n  return new MacroBeta(extender.applications, extender.parents, arity)\n}\n\nexport class MacroBeta implements ASTReduction {\n  public type : ASTReductionType = ASTReductionType.GAMA\n  constructor (public applications : Array<Application>, public parents : Array<AST>, public arity : number) {}\n}\n\nexport class NormalMacroRedexExtender extends ASTVisitor {\n  public parents : Array<AST> = []  \n  public applications : Array<Application> = []\n\n  private found : boolean = false\n\n  constructor (private arity : number, private basepoint : AST, tree : AST) {\n    super()\n\n    tree.visit(this)\n  }\n\n  onApplication(application : Application): void {\n    if (application.identifier === this.basepoint.identifier) {\n      this.applications.push(application)\n      this.found = true\n      return\n    }\n\n    // go to the left\n    // if found there - I might need to append this application to the list\n    // depending on: is arity bigger than length of list? && is last application in the list the one on the left?\n    // then return\n    application.left.visit(this)\n    if (this.found &&\n      application.left.identifier === this.applications[this.applications.length - 1].identifier) {\n        if (this.arity > this.applications.length) {\n          this.applications.push(application)\n        }\n\n        this.parents.push(application) // pushing this APP as a parent of the previously last one in the list\n        return\n    }\n\n    if (this.found) {\n      return\n    }\n\n    // go to the right\n    // cause it's on the right -> it means this application is definitely not going to the list\n    // so just try to find it there and return\n    application.right.visit(this)\n    if (this.found &&\n      application.right.identifier === this.applications[this.applications.length - 1].identifier) {\n        this.parents.push(application)\n      }\n    return\n  }\n\n  onLambda(lambda : Lambda): void {\n    // lambda definitely interrupts the sequence of APPs\n    // so go find the stuff in the right\n    // but that's all you can do\n    lambda.right.visit(this)\n    if (this.found &&\n      lambda.right.identifier === this.applications[this.applications.length - 1].identifier) {\n        this.parents.push(lambda)\n      }\n    return\n  }\n\n  onChurchNumeral(ChurchNumeral : ChurchNumeral): void {\n    return\n  }\n\n  onMacro(macro : Macro): void {\n    return\n  }\n\n  onVariable(variable : Variable): void {\n    return\n  }\n}\n\nfunction hasApplicativeOverride (macro : Macro) : boolean {\n  // TODO: implement later\n  return [\"*\", \"+\", \"/\", \"-\", \"^\", \"DELTA\", \"=\", \">\", \"<\", \">=\", \"<=\", \"ZERO\", \"NOT\", \"PRED\", \"SUC\"].includes(macro.name())\n  \n  //  \"T\", \"F\"\n  // \"AND\", \"OR\"\n  // return false\n}\n\nexport function strategyToEvaluator (strategy : EvaluationStrategy) : Evaluator {\n  switch (strategy) {\n    case EvaluationStrategy.NORMAL:\n      return NormalEvaluator as any\n \n    case EvaluationStrategy.APPLICATIVE:\n      return ApplicativeEvaluator as any\n\n    case EvaluationStrategy.OPTIMISATION:\n      return OptimizeEvaluator as any\n\n    case EvaluationStrategy.ABSTRACTION: // this will be removed\n      return NormalAbstractionEvaluator as any // this will be removed\n  }\n}","import {  CODE_NAME as UNTYPED_CODE_NAME, decodeUntypedLambdaState, UNTYPED_LAMBDA_INTEGRATION_STATE } from './untyped-lambda-integration/AppTypes'\nimport { defaultSettings as UntypedLambdaDefaultSettings } from './untyped-lambda-integration/AppTypes'\n\nimport { BoxType, Screen, BoxesWhitelist, AppState, GlobalSettings, NotebookState, BoxState } from \"./Types\"\nimport { UntypedLambdaState } from './untyped-lambda-integration/Types'\n\n\nexport const CLEAR_WORKSPACE_CONFIRMATION : string =\n`This will delete this whole Notebook from your browser's memory.\n\n                                          Are you sure?`\n\n// TODO: when building `Exam Mode` simply leave only non-evaluative BoxTypes\nexport const ALL_BOX_TYPES : Array<BoxType> = [ BoxType.UNTYPED_LAMBDA, BoxType.LISP, BoxType.MARKDOWN ]\n\nexport const ANY_BOX = -1\n\nexport const NO_BOX = -2\n\nexport const DEFAULT_WHITELIST : BoxesWhitelist = [ BoxType.UNTYPED_LAMBDA, BoxType.MARKDOWN ]\n\n\nexport function mapBoxTypeToStr (type : BoxType) : string {\n  switch (type) {\n    case BoxType.UNTYPED_LAMBDA:\n      return 'untypedLambdaBox'\n\n    case BoxType.MARKDOWN:\n      return 'markDownBox'\n    default:\n      return ''\n  }\n}\n\nexport const InitNotebookState : NotebookState = {\n  boxList : [],\n  activeBoxIndex : NaN,\n  focusedBoxIndex : undefined,\n  allowedBoxes : DEFAULT_WHITELIST,\n  settings : getDefaultSettings(DEFAULT_WHITELIST),\n  integrationStates : {\n    'UNTYPED_LAMBDA' : UNTYPED_LAMBDA_INTEGRATION_STATE, // TODO: FIX THIS!!!\n  },\n\n  locked : false,\n  menuOpen : false,\n\n  __key : Date.now().toString(),\n  name : \"Default Ntbk\",\n  editingName : false,\n  persistent : true,\n}\n\nexport const EmptyAppState : AppState = {\n  notebookList : [ InitNotebookState ],\n  currentNotebook : 0,\n  currentScreen : Screen.MAIN,\n}\n\n\nexport function updateSettingsInStorage (settings : GlobalSettings) : void {\n  window.localStorage.setItem('global-settings', JSON.stringify(settings))\n}\n\nexport function getDefaultSettings (whitelist : BoxesWhitelist) : GlobalSettings {\n  let defaultSettings = {}\n\n  if (whitelist === NO_BOX) {\n    whitelist = []\n  }\n  else if (whitelist === ANY_BOX) {\n    whitelist = ALL_BOX_TYPES\n  }\n\n  for (const type of whitelist) {\n    switch (type) {\n      case BoxType.UNTYPED_LAMBDA:\n        defaultSettings = {\n          ...defaultSettings,\n          [UNTYPED_CODE_NAME] : UntypedLambdaDefaultSettings,\n        }\n        break;\n    \n      default:\n        break;\n    }\n  }\n\n  return defaultSettings\n}\n\nexport function loadSettingsFromStorage () : GlobalSettings {\n  const defaultSettings = {\n    [UNTYPED_CODE_NAME] : {}\n  }\n\n  const serialized : string | null = window.localStorage.getItem('global-settings')\n  const deserialized : GlobalSettings =  serialized === null ? defaultSettings : JSON.parse(serialized)\n\n  \n  for (const [key, value] of Object.entries(deserialized)) {\n    switch (key) {\n      case UNTYPED_CODE_NAME:\n        deserialized[key] = { ...UntypedLambdaDefaultSettings, ...value }\n        break;\n    \n      default:\n        console.error(\"Settings CODE NAME is not one of known Code Names.\")\n        break;\n    }\n  }\n\n  return deserialized\n}\n\n\nexport function loadAppStateFromStorage () : AppState {\n  const maybeState : string | null = localStorage.getItem('AppState')\n\n  if (maybeState === null) {\n    localStorage.setItem('AppState', JSON.stringify(EmptyAppState))\n    return EmptyAppState\n  }\n  else {\n    try {\n      return decode(JSON.parse(maybeState))\n    }\n    catch (e) {\n      console.error(`Error while loading app state from the storage.\\n\\n${e}`)\n\n      return EmptyAppState\n    }\n  }\n}\n\nexport function updateAppStateToStorage (state : AppState) : void {\n  localStorage.setItem('AppState', JSON.stringify(state))\n}\n\nexport function updateNotebookStateToStorage (notebook : NotebookState, index : number) {\n  if ( ! notebook.persistent) {\n    return\n  }\n\n  const state : AppState = loadAppStateFromStorage()\n\n  state.notebookList[index] = notebook\n\n  updateAppStateToStorage(state)\n}\n\n// TODO: This function is going to be replaced with correct implementation of decoding\n// this slowly becomes better and better base for the final implementation\n/**\n * This function THROWS Error in case of invalid argument\n * @param state : Deserialized form of AppState\n */\nexport function decode (state : AppState) : AppState | never {\n  const notebookList : Array<NotebookState> = state.notebookList.map(decodeNotebook)\n  \n  return {\n    ...state,\n    notebookList,\n  }\n}\n\nexport function decodeNotebook (notebook : NotebookState) : NotebookState | never {\n  const boxList : Array<BoxState> = notebook.boxList.map((box : BoxState, index : number, arr : Array<BoxState>) => {\n    switch (box.type) {\n      case BoxType.UNTYPED_LAMBDA: {\n        return decodeUntypedLambdaState(box as UntypedLambdaState)\n      }\n\n      //TODO: implement for other Box Types\n    \n      default:\n        return box\n    }\n  })\n\n  return {\n    ...notebook,\n    boxList,\n  }\n}\n\n// TODO: this should be refactored\nexport function initIntegrationStates (appState : AppState) {\n  const { currentNotebook, notebookList } : AppState = appState\n  const notebook = notebookList[currentNotebook]\n\n  for (const [boxType, value] of Object.entries(notebook.integrationStates)) {\n    switch (boxType) {\n      case BoxType.UNTYPED_LAMBDA: {\n        value.macrotable = UNTYPED_LAMBDA_INTEGRATION_STATE.macrotable  // TODO: this is very informed - should be done by specific integration - leaving just for now\n        return\n      }\n    \n      default:\n        break;\n    }\n  }\n}","import React, { ChangeEvent } from 'react'\n\nimport { AppState, Screen, NotebookState } from '../Types'\n\nimport '../styles/TopBar.css'\nimport { decodeNotebook } from '../Constants'\n\n\ninterface Props {\n  state : AppState\n  onImport (notebook : NotebookState) : void\n  onClearWorkspace () : void\n  onScreenChange (screen : Screen) : void\n}\n\nexport default function TopBar (props : Props) : JSX.Element {\n  const { state, onImport, onClearWorkspace, onScreenChange } : Props = props\n  const { currentNotebook, notebookList, currentScreen } : AppState = state\n  const ntbk : NotebookState = notebookList[currentNotebook]\n\n  const { name } : NotebookState = ntbk\n\n  // const dehydrated : object = dehydrate(state)\n\n  const serialized : string = JSON.stringify(ntbk)\n  const link : string = createURL(serialized)\n\n  return (\n    <div className='top-bar'>\n      <div className='cursor-pointer top-bar--notebook-name-container' onClick={ () => onScreenChange(Screen.MAIN) } >\n        <span className='top-bar--notebook-name'>\n          { name }\n        </span>\n      </div>\n\n      <span className='top-bar--item-container'>\n         {/* SETTINGS */}\n         <span\n           className={ currentScreen === Screen.SETTINGS ? 'top-bar--item top-bar--item-hoverable top-bar--item-hoverable--active' : 'top-bar--item top-bar--item-hoverable' }\n           title='Go to the Settings'\n           onClick={ () => {\n             if (currentScreen === Screen.SETTINGS) {\n               onScreenChange(Screen.MAIN)\n             }\n             else {\n               onScreenChange(Screen.SETTINGS)\n             }\n           } }\n         >\n           <i\n             className=\"top-icon fas fa-cogs\"\n           />\n           <p className='top-bar--icon-label'>Settings</p>\n         </span>\n \n         {/* Clear the Whole Workspace */}\n         <span\n           className='top-bar--item top-bar--item-hoverable'\n           title='Clear the Whole Workspace'\n           onClick={ onClearWorkspace }\n         >\n           <i\n             className=\"top-icon fas fa-eraser\"\n           />\n           <p className='top-bar--icon-label'>Clear All</p>\n         </span>\n \n         {/* Export Notebook */}\n         \n         <a\n           className='export'\n           href={ link }\n           download=\"notebook_lambdulus.lus\" // TODO: change the name according to the notebook name\n           onClick={ () => setTimeout(() => {\n             // window.URL.revokeObjectURL(link)\n             // TODO: I shouldn't NOT do this - but if I revoke I can't click it again without re-render\n \n             // reportEvent('Export notebook', `Notebook: ${serialized}`, '') // TODO: report event\n           }, 10) }\n         >\n           <span\n             className='top-bar--item top-bar--item-hoverable'\n             title='Download this Notebook'\n           >\n             <i id='download' className=\"top-icon fas fa-cloud-download-alt\" />\n           \n           <p className='top-bar--icon-label'>Export</p>\n           </span>\n         </a>\n \n         {/* Import Notebook */}\n         <input type=\"file\" accept=\".lus\" id=\"input\"\n           onChange={ (e) => onFiles(e, onImport) }\n         />\n           <label htmlFor=\"input\">\n             <span\n               className='top-bar--item top-bar--item-hoverable'\n               title='Import a Notebook from Computer'\n             >\n               <i className=\"top-icon fas fa-cloud-upload-alt\" />\n               <p className='top-bar--icon-label'>Import</p>\n             </span>\n           </label>\n       </span>\n    </div>\n  )\n}\n\nfunction onFiles (event : ChangeEvent<HTMLInputElement>, onImport : (notebook : NotebookState) => void) : void {\n  const { target : { files } } = event\n  if (files === null) {\n    return\n  }\n\n  const file : File = files[0]\n  const reader : FileReader = new FileReader()\n  reader.onload = (event : Event) => {\n    const notebook : NotebookState = JSON.parse(reader.result as string)\n\n    onImport(decodeNotebook(notebook))\n\n    // onImport(hydrate(state))\n    // reportEvent('Import notebook', `Notebook named ${ file.name }`, '')\n  }\n\n  reader.readAsText(file) \n}\n\nfunction createURL (content : string) : string {\n  const data = new Blob([ content ], {\n    type: 'application/json'\n  })\n\n  return window.URL.createObjectURL(data);\n}","import React from 'react'\n\nimport { Screen, AppState } from '../Types'\n\n\nimport '../styles/MenuBar.css'\n// import { reportEvent } from '../misc'; // later\n\ninterface MenuBarProperties {\n  state : AppState\n  // onImport (state : AppState) : void\n  // onClearWorkspace () : void\n  onScreenChange (screen : Screen) : void\n}\n\nexport default function MenuBar (props : MenuBarProperties) : JSX.Element {\n  const { state, onScreenChange } : MenuBarProperties = props\n\n  const { currentScreen } = state\n\n  return (\n    <div id=\"menu-bar\">\n      <div\n        className='tab'\n        title='Get Info about this Tool'\n        onClick={ () => onScreenChange(Screen.MAIN) }\n      >\n        <span className='lambdulusIcon'>λ</span>\n        <p className='iconLabel'>Lambdulus</p>\n      </div>\n\n      {/* <div className='separator' /> */}\n\n      {/* NOTEBOOK */}\n      {/* <div\n        className={ currentScreen === Screen.NOTEBOOKS ? 'currentTab tab tab-hoverable' : 'tab tab-hoverable' }\n        title='Show All Notebooks'\n        onClick={ () => onScreenChange(Screen.NOTEBOOKS) }\n      >\n        <i\n          // className=\"icon far fa-file-alt\"\n          className=\"icon far fa-copy\"\n        />\n        <p className='iconLabel'>Notebooks</p>\n      </div> */}\n\n      <div className='menu-bar--bottom-part'>\n        {/* Issues */}\n        <div\n          className='tab tab-hoverable'\n          title='Submit a Bug or a Feature Request'\n        >\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href='https://github.com/lambdulus/frontend/issues'\n          >\n            <i className=\"icon fas fa-bug\" />\n          </a>\n          <p className='iconLabel'>GH Issues</p>\n        </div>\n\n        {/* MANUAL/HELP */}\n        <div\n          className={ currentScreen === Screen.HELP ? 'currentTab tab tab-hoverable' : 'tab tab-hoverable' }\n          title={ currentScreen === Screen.MAIN ? 'Show the Manual' : 'Go back' }\n          onClick={ () => {\n            if (currentScreen === Screen.HELP) {\n              onScreenChange(Screen.MAIN)\n            }\n            else {\n              onScreenChange(Screen.HELP)\n            }\n          }}\n        >\n          <i\n            className=\"icon far fa-question-circle\"\n          />\n          <p className='iconLabel'>Manual</p>\n        </div>\n      </div>\n\n\n    </div>\n  )\n}\n\n// function dehydrateBox (box : BoxState) : BoxState {\n//   const { type } : BoxState = box\n\n//   if (type === BoxType.EXPRESSION) {\n\n//     return {\n//       ...box,\n//       ast : null as any, // TODO: don't\n//       history : [], // TODO: don't\n//       isRunning : false,\n//       breakpoints : [], // TODO: solve how to don't\n//       timeoutID : undefined,\n//     }\n//   }\n\n//   return box\n// }\n\n// function dehydrate (state : AppState) : AppState {\n//   return {\n//     ...state,\n//     submittedBoxes : state.submittedBoxes.map(dehydrateBox)\n//   }\n// }\n\n// function hydrateBox (box : BoxState, macroTable : MacroMap) : BoxState {\n//   const { type } : BoxState = box\n  \n//   if (type === BoxType.EXPRESSION) {\n//     const { singleLetterNames } = box as UntypedLambdaState\n//     const ast : AST = parseExpression((box as UntypedLambdaState).expression, { macroTable, singleLetterNames })\n\n//     return {\n//       ...box,\n//       ast,\n//       history : [ { ast, lastReduction : None, step : 0, message : '', isNormalForm : false } ],\n//     }\n//   }\n\n//   return box\n// }\n\n// function hydrate (dehydrated : AppState) : AppState {\n//   const { macroTable } = dehydrated\n//   const config = { macroTable }\n\n//   return {\n//     ...dehydrated,\n//     submittedBoxes : dehydrated.submittedBoxes.map((box) => hydrateBox(box, macroTable))\n//   }\n// }\n\n// interface Config {\n//   singleLetterNames : boolean\n//   macroTable : MacroMap\n// }\n\n// function parseExpression (expression : string, config : Config) : AST {\n//   const { singleLetterNames : singleLetterVars, macroTable } : Config = config\n  \n//   const tokens : Array<Token> = tokenize(expression, { lambdaLetters : ['λ'], singleLetterVars })\n//   const ast : AST = parse(tokens, macroTable)\n\n//   return ast\n// }\n\n\n// function onFiles (event : ChangeEvent<HTMLInputElement>, onImport : (notebook : NotebookState) => void) : void {\n//   const { target : { files } } = event\n//   if (files === null) {\n//     return\n//   }\n\n//   const file : File = files[0]\n//   const reader : FileReader = new FileReader\n//   reader.onload = (event : Event) => {\n//     const notebook : NotebookState = JSON.parse(reader.result as string)\n\n//     onImport(decodeNotebook(notebook))\n\n//     // onImport(hydrate(state))\n//     // reportEvent('Import notebook', `Notebook named ${ file.name }`, '')\n//   }\n\n//   reader.readAsText(file) \n// }\n\n// function createURL (content : string) : string {\n//   const data = new Blob([ content ], {\n//     type: 'application/json'\n//   })\n\n//   return window.URL.createObjectURL(data);\n// }","import { BoxType, AbstractBoxState } from \"../Types\"\n\n\nexport interface NoteState extends AbstractBoxState {\n  __key : string\n  type : BoxType\n  note : string\n  isEditing : boolean\n  editor : {\n    placeholder : string\n    content : string\n    caretPosition : number\n    syntaxError : Error | null\n  }\n}\n\nexport function createNewMarkdown () : NoteState {\n  return {\n    __key : Date.now().toString(),\n    type : BoxType.MARKDOWN,\n    title : 'Markdown Box',\n    minimized : false,\n    settingsOpen : false,\n    note : '',\n    isEditing : true,\n    editor : {\n      placeholder : PromptPlaceholder,\n      content : '',\n      caretPosition : 0,\n      syntaxError : null\n    }\n  }\n}\n\nexport function resetMarkdownBox (state : NoteState) : NoteState {\n  return {\n    ...state,\n    minimized : false,\n    note : '',\n    isEditing : true,\n    editor : {\n      placeholder : PromptPlaceholder,\n      content : '',\n      caretPosition : 0,\n      syntaxError : null\n    }\n  }\n}\n\nexport const PromptPlaceholder : string = 'Note in MarkDown'\n\nexport function onMarkDownBlur (state : NoteState) : NoteState {\n  return {\n    ...state,\n    isEditing: false,\n  }\n}\n\nexport function onMarkDownActive (state : NoteState) : NoteState {\n  return {\n    ...state,\n    isEditing : true,\n  }\n}","import React from 'react'\nimport { GlobalSettings, BoxesWhitelist, BoxState, BoxType } from '../Types'\nimport { createNewMarkdown } from '../markdown-integration/AppTypes'\nimport { UntypedLambdaSettings, UntypedLambdaState } from '../untyped-lambda-integration/Types'\nimport { createNewUntypedLambdaExpression, ADD_BOX_LABEL, CODE_NAME as UNTYPED_CODE_NAME } from '../untyped-lambda-integration/AppTypes'\nimport { ANY_BOX, NO_BOX } from '../Constants'\n\n\nimport '../styles/PickBoxTypeModal.css'\n\n\nfunction anyBoxAllowed (whitelist : BoxesWhitelist) : boolean {\n  return whitelist === ANY_BOX\n}\n\nfunction noBoxAllowed (whitelist : BoxesWhitelist) : boolean {\n  return whitelist === NO_BOX\n}\n\nfunction isAllowed (type : BoxType, whitelist : BoxesWhitelist) : boolean {\n  return anyBoxAllowed(whitelist) || (whitelist as Array<BoxType>).includes(type)\n}\n\ninterface Props {\n  addNew (box : BoxState) : void\n  whiteList : BoxesWhitelist\n  settings : GlobalSettings\n}\n\n\nexport default function PickBoxTypeModal (props : Props) : JSX.Element {\n  const { addNew, whiteList, settings } : Props = props\n\n  const untLSettings : UntypedLambdaSettings = settings[UNTYPED_CODE_NAME] as UntypedLambdaState\n\n  const addLambdaBoxIfAllowed = (allowed : boolean) => (\n    allowed ?\n      <div className='add-box--group'\n        onClick={ (e) => {\n          e.stopPropagation()\n          // this.setState({ opened : false })\n          addNew(createNewUntypedLambdaExpression(untLSettings)) }\n        }\n      >\n        <div\n          className='plusBtn'\n          title='Create new λ box'\n        >\n          <p className='create-box--big'>λ</p>\n          <p className='creat-box--label'>{ ADD_BOX_LABEL }</p>\n        </div>\n      </div>\n      :\n      null\n  )\n\n  const addLispBoxIfAllowed = (allowed : boolean) => (\n    allowed ?\n      <div className='add-box--group'\n        onClick={ (e) => {\n          e.stopPropagation()\n          // this.setState({ opened : false })\n          addNew({__key : Date.now().toString()} as BoxState) } // NOTE: just for now\n        }\n      >\n        <div\n          className='plusBtn'\n          title='Create new Lisp box'\n        >\n          <p className='create-box--big'>()</p>\n          <p className='creat-box--label'>+ Lisp</p>\n        </div>\n      </div>\n      :\n      null\n  )\n\n  const addMDBoxIfAllowed = (allowed : boolean) => (\n    allowed ?\n    <div className='add-box--group'\n      onClick={ (e) => {\n        e.stopPropagation()\n        // this.setState({ opened : false })\n        addNew(createNewMarkdown()) }\n      }\n    >\n      <div\n        className='plusBtn'\n        title='Create new MarkDown box'\n      >\n        <p className='create-box--big'>M&darr;</p>\n        <p className='creat-box--label'>+ Markdown</p>\n      </div>\n    </div>\n    :\n    null\n  )\n\n  return (\n    <div className='box-top-bar--modal--pick-box-type'>\n      {\n        noBoxAllowed(whiteList) ?\n          <h4>No Boxes Allowed</h4>\n          :\n          <div\n            className='modal--create-box'\n          >\n            <div className='modal--create-box--container'>\n              { addLambdaBoxIfAllowed(isAllowed (BoxType.UNTYPED_LAMBDA, whiteList)) }\n              { addLispBoxIfAllowed(isAllowed(BoxType.LISP, whiteList)) }\n              { addMDBoxIfAllowed(isAllowed(BoxType.MARKDOWN, whiteList)) }\n            </div>\n          </div>\n      }\n    </div>\n  )\n}","import React, { Component } from 'react'\n\nimport { BoxesWhitelist, BoxState, GlobalSettings } from '../Types'\n\nimport \"../styles/CreateBox.css\"\nimport PickBoxTypeModal from './PickBoxTypeModal'\n\ninterface Props {\n  addNew : (box : BoxState) => void\n  whiteList : BoxesWhitelist\n  settings : GlobalSettings\n}\n\ninterface State {\n  modalOpen : boolean\n}\n\n// TODO: this needs to change\n// somehow I need to be able to delegate choosing the specific subtype of the Box\nexport default class CreateBox extends Component <Props, State> {\n  constructor (props : Props) {\n    super(props)\n\n    this.state = {\n      modalOpen : false\n    }\n  }\n\n  render () : JSX.Element {\n    const { addNew } : Props = this.props\n    const { modalOpen } = this.state\n   \n    if (this.state.modalOpen === false) {\n      return (\n        <div className='create-box-plus' onClick={ () => this.setState({ modalOpen : ! modalOpen }) } >\n          <div className='create-box-plus--button'>\n            <i className=\"fas fa-plus\" />\n          </div>\n        </div>\n      )\n    }\n    else {\n      return (\n        <PickBoxTypeModal\n          addNew={ (box : BoxState) => {\n            addNew(box)\n            this.setState({ modalOpen : false })\n          } }\n          whiteList={ this.props.whiteList }\n          settings={ this.props.settings }\n        />\n      )\n    }\n  }\n}\n  \n","import React from 'react'\n\nimport { ASTVisitor, Lambda, Variable, Beta, AST, Application, ChurchNumeral, Expansion, Macro, ASTReduction, Alpha, Gama, ASTReductionType } from \"@lambdulus/core\"\nimport { Breakpoint } from './Types'\nimport { reportEvent } from '../misc';\nimport { MacroBeta } from './AppTypes';\n\n\nexport default class ReactPrinter extends ASTVisitor {\n  private rendered : JSX.Element | null = null\n  private argument : Variable | null = null\n\n  // TODO: this is just temporary and very dirty hot fix\n  // because findSimplifiedReduction needs to get clonned tree\n  // because it modifies that tree even thought it probably shoudl not\n  // actual tree being printed is not the same\n  // this then leads to some problem when expression is being copied (argument used mutliple times inside lambda)\n  // and one of them is then identified as a REDEX\n  // because all of them share same Identifier --> all of them are identified as a redex\n  // private foundRedexes : Array<symbol> = []\n  // on the other hand -- this is not so dirty right?\n  private redexesFound : number = 0 // 0 is empty ; 1 is found ; -1 is blocked and can't be set to 1 again\n  // NOW: be very careful\n  // this solution unfortunately combines both of the original solutions and this means it probably takes\n  // the worst of both of them\n  // what it means is this:\n  // it relies on correct logic that sets reduction.topLevelParent\n  // there could very well be bug and it could work badly\n  // also it relies on order\n  // once the redexFound was set to 1 it will be set to -1 and then it cannot be set again\n  // this means - I efectively say - only first occurence of the expression can be the REDEX\n  // be very aware that this might be very ill and really buggy\n  //\n  //\n  // final decision is to dith all of the above\n  // and just go with counting --> logic seems sound --> if I arrive somewhere first when printing\n  // in the same order I look for the redexes (in normal order at least I hope) --> it should be redex\n  // rest is fake\n\n  private printMultiLambda (lambda : Lambda, accumulator : JSX.Element) : void {\n    if (lambda.body instanceof Lambda) {\n      const context : Variable = lambda.body.argument\n      let className : string = 'argument'\n      let title : string = ''\n\n      if (this.isBreakpoint(lambda.body.argument)) {\n        className += ' breakpoint'\n        title = 'Will break on substitution'\n      }\n\n      // bug@highlight-alpha\n      let set = false\n      if (this.reduction instanceof Alpha\n            &&\n          Array.from(this.reduction.conversions).some((conversion : Lambda) => {\n            return conversion.identifier === lambda.body.identifier\n          })\n          ) {\n              this.argument = context\n              set = true\n              className += ' alpha'\n      }\n\n      // TO JE KVULI FIXU MULTILAMBDA FACCT 3 beta redukce nad shadowingem\n      let argument : Variable | null = this.argument\n      if (this.argument !== lambda.body.argument\n          &&\n          this.argument !== null\n          &&\n          this.argument.name() === lambda.body.argument.name()) {\n        this.argument = null\n      } // TO JE KVULI FIXU MULTILAMBDA FACCT 3 beta redukce nad shadowingem\n\n      // TODO: same here\n      if (this.argument\n          &&\n          this.argument.name() === context.name()) {\n            className += ' substitutedArg'\n        }\n\n      const args : JSX.Element = (\n        <span className='arguments'>\n          { accumulator } {' '}\n          <span\n            className={ className }\n            title={ title }\n            onClick={ () => {\n              (context as any).identifier = Symbol()\n              this.onClick({ type : ASTReductionType.BETA, context, broken : new Set() })\n              reportEvent('Breakpoint added to argument', 'Breakpoint was added', '')\n            }\n            }\n          >\n            { context.name() }\n          </span>\n        </span>\n      )\n      \n      this.printMultiLambda(lambda.body, args)\n      if (set === true) {\n        this.argument = null\n      }\n      this.argument = argument // TO JE KVULI FIXU MULTILAMBDA FACCT 3 beta redukce nad shadowingem\n    }\n    else {\n      lambda.body.visit(this)\n      const body : JSX.Element | null = this.rendered\n      this.rendered = accumulator\n\n      this.rendered = (\n        <span className='function'>\n          (\n          <span\n            className='lambda'\n            >\n              λ { ' ' }\n          </span>\n          { accumulator } . { body }\n          )\n        </span>\n      )\n    }\n  }\n\n  isBreakpoint (node : AST) : boolean {\n    for (const breakpoint of this.breakpoints) {\n      if (breakpoint.context.identifier === node.identifier) {\n        return true\n      }\n    }\n    return false\n  }\n\n  constructor (\n    public readonly tree : AST,\n    private readonly onClick : (breakpoint : Breakpoint) => void,\n    private readonly reduction : ASTReduction,\n    private readonly breakpoints : Array<Breakpoint>,\n    private readonly SDE : boolean,\n  ) {\n    super()\n    this.tree.visit(this)\n  }\n\n  print () : JSX.Element | null {\n    return this.rendered\n  }\n\n  // TODO: little bit refactored, maybe keep going\n  onApplication (application: Application) : void {\n    let className : string = 'application'\n    let leftClassName : string = 'left'\n    let rightClassName : string = 'right'\n    let set : boolean = false\n    let redex : AST | null = null\n\n    if (this.reduction instanceof Beta) {\n      redex = this.reduction.redex\n    }\n\n    if (this.reduction instanceof MacroBeta) {\n      // if (this.redexFound === 0 && application.identifier === this.reduction.topLevelParent.identifier) {\n      //   this.redexFound = 1\n      //   redexFoundFlag = true\n      //   debugger\n      // }\n      \n      //  === 1 && \n      if (this.redexesFound < this.reduction.arity && this.reduction.applications.some((app : Application) => app.identifier === application.identifier)) {\n        if (application.left instanceof Macro) {\n          leftClassName += ' extended-redex'\n        }\n\n        this.redexesFound++\n        \n        rightClassName += ' extended-redex'\n        // console.log('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')\n      }\n    }\n\n    if (this.reduction instanceof Gama && this.reduction.args.includes(application)) {\n      className += ' redex abstraction argument'\n    }\n\n    // else if (this.reduction instanceof Expansion) {\n    //   redex = this.reduction.target\n    // } // to asi neni uplne potreba tady\n\n    if (redex !== null\n          &&\n        redex.identifier === application.identifier // tohle je asi trosku useles\n          &&\n        redex === application\n      ) {\n        leftClassName += ' redex'\n        rightClassName += ' redex'\n\n        // TODO: this is probably not good and should be done other way\n\n        if (application.left instanceof Lambda) {\n          this.argument = application.left.argument\n          set = true\n        }\n    }\n\n    if (application.right instanceof Application) {\n      application.left.visit(this)\n      const left : JSX.Element | null = <span className={ leftClassName }>{this.rendered}</span>\n\n      // tohle delam proto, ze se nesmi vypnout this.argument u libovolne aplikace, jenom u te ktera ho setnula\n      // priklad + 2 3 a krokuj - zakomentuj a krokuj znovu Y se bude chovat spatne hned v prvnich krocich\n      if (set) {\n        this.argument = null\n      }\n\n      application.right.visit(this)\n      const right : JSX.Element | null = <span className={ rightClassName }>( { this.rendered } )</span>\n\n      this.rendered =\n      <span className={ className }>\n        { left } { right }\n      </span>\n    }\n    else {\n      application.left.visit(this)\n      const left : JSX.Element | null = <span className={ leftClassName }>{this.rendered}</span>\n\n      // tohle delam proto, ze se nesmi vypnout this.argument u libovolne aplikace, jenom u te ktera ho setnula\n      // priklad + 2 3a krokuj - zakomentuj a krokuj znovu Y se bude chovat spatne hned v prvnich krocich\n      if (set) {\n        this.argument = null\n      }\n\n      application.right.visit(this)\n      const right : JSX.Element | null = <span className={ rightClassName }>{ this.rendered }</span>\n\n      this.rendered =\n      <span className={ className }>\n        { left } { right }\n      </span>\n    }\n  }\n  \n  // TODO: little bit refactored, maybe keep going\n  onLambda (lambda: Lambda) : void {\n    // TODO: this also seems not so elegant and clean\n\n    let title : string = ''\n\n    let argument : Variable | null = this.argument\n    if (this.argument !== lambda.argument\n        &&\n        this.argument !== null\n        &&\n        this.argument.name() === lambda.argument.name()) {\n      this.argument = null\n    }\n\n\n    // multilambda\n    if (lambda.body instanceof Lambda) {\n      const context : Variable = lambda.argument\n      let className : string = 'argument'\n\n      if (this.isBreakpoint(lambda.argument)) {\n        className += ' breakpoint'\n        title = 'Will break on substitution'\n      }\n\n      // TODO: same here\n      if (this.argument\n        &&\n        this.argument.name() === context.name()) {\n          className += ' substitutedArg'\n      }\n\n      // if (this.reduction instanceof Alpha) {\n      //   className += ' alpha'\n      // }\n\n      const acc : JSX.Element = (\n        <span\n          className={ className }\n          title={ title }\n          onClick={ () => {\n            (context as any).identifier = Symbol()\n            this.onClick({ type : ASTReductionType.BETA, context, broken : new Set() })\n            reportEvent('Breakpoint added to argument', 'Breakpoint was added', '')\n          }\n          }\n        >{ lambda.argument.name() }\n        </span>\n      )\n\n      this.printMultiLambda(lambda, acc)\n    }\n    else {\n      const context : Variable = lambda.argument\n\n      // lambda.argument.visit(this)\n      \n      // const args : JSX.Element | null = this.rendered\n\n      lambda.body.visit(this)\n      const body : JSX.Element | null = this.rendered\n\n      let className : string = 'argument'\n      let title : string = ''\n\n      if (this.isBreakpoint(lambda.argument)) {\n        className += ' breakpoint'\n        title = 'Will break on substitution'\n      }\n\n      // TODO: same here\n      if (this.argument\n        &&\n        this.argument.name() === context.name()) {\n          className += ' substitutedArg'\n      }\n\n      this.rendered = (\n        <span className='function' >\n          (\n          <span\n            className='lambda'\n            >\n              λ { ' ' }\n          </span>\n          <span\n            className='arguments'\n            onClick={ () => {\n              (context as any).identifier = Symbol()\n              // TODO: for now it does nothing - maybe delete in the future            \n              // this.onClick({ type : Beta, context, broken : new Set })\n              // reportEvent('Breakpoint added to argument', 'Breakpoint was added', '')\n            }\n            }\n          >\n            <span\n                className={ className }\n                title={ title }\n                onClick={ () => {\n                  (context as any).identifier = Symbol()\n                  this.onClick({ type : ASTReductionType.BETA, context, broken : new Set() })\n                  reportEvent('Breakpoint added', 'Breakpoint was added', '')\n                }\n                }\n            >\n              { lambda.argument.name() }\n            </span>\n            { ' ' }\n          </span>\n          . { body } \n          )\n        </span>\n      )\n    }\n\n    this.argument = argument\n    if (argument !== null) {\n      this.argument = argument\n    }\n  }\n  \n  // TODO: little bit refactored, maybe keep going\n  onChurchNumeral (churchNumber: ChurchNumeral) : void {\n    let className : string = 'churchnumeral'\n    let redex : AST | null = null\n    let redexClass : string = ' redex'\n    let title : string = ''\n\n    if (this.reduction instanceof Expansion) {\n      redex = this.reduction.target\n    }\n\n    if (this.reduction instanceof Gama && this.reduction.args.includes(churchNumber)) {\n      className += ' redex abstraction argument'\n    }\n\n    if (redex !== null\n          &&\n        redex.identifier === churchNumber.identifier\n          &&\n        redex === churchNumber\n      ) {\n        className += redexClass\n    }\n\n    if (this.isBreakpoint(churchNumber)) {\n      className += ' breakpoint'\n      title = 'Will break on Expansion'\n    }\n\n    this.rendered = (\n      <span\n        className={ className }\n        title={ title }\n        onClick={ () => {\n          (churchNumber as any).identifier = Symbol()\n          this.onClick({ type: ASTReductionType.EXPANSION, context : churchNumber, broken : new Set() })\n          reportEvent('Breakpoint added to ChurchNumeral', 'Breakpoint was added', '')\n        }\n        }\n      >\n        { churchNumber.name() }\n      </span>\n    )\n  }\n\n  // TODO: little bit refactored, maybe keep going  \n  onMacro (macro: Macro) : void {\n    // console.log(this.reduction)\n    let className = 'macro'\n    let redex : AST | null = null\n    let redexClass : string = ' redex'\n    let title : string = ''\n\n    if (this.reduction instanceof Expansion) {\n      redex = this.reduction.target\n    }\n\n    if (this.reduction instanceof Gama) {\n      if (this.reduction.redexes.includes(macro)) {\n        [ redex ] = this.reduction.redexes\n        className += redexClass + ' abstraction'\n      }\n\n\n      if (this.reduction.args.includes(macro)) {\n        className += redexClass + ' abstraction argument'\n      }\n    }\n\n    if (this.reduction instanceof MacroBeta) {\n      \n      if (macro.identifier === this.reduction.applications[0].left.identifier) {\n        className += ' abstraction'\n        // console.log('............................................------------------.................................')\n      }\n      // console.log(\"MMMMMMMMMMMMMMMMACROBEEEEEEEEEEEEEEEEEEEEEETAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\")\n\n    }\n\n\n    if (redex !== null\n          &&\n        redex.identifier === macro.identifier\n          &&\n        redex === macro\n        ) {\n      className += redexClass\n    }\n\n    if (this.isBreakpoint(macro)) {\n      className += ' breakpoint'\n      title = 'Will break on Expansion'\n    }\n\n    this.rendered = (\n      <span\n        className={ className }\n        title={ title }\n        onClick={ () => {\n          (macro as any).identifier = Symbol()\n          this.onClick({ type: ASTReductionType.EXPANSION, context : macro, broken : new Set() })\n          reportEvent('Breakpoint added to Macro', 'Breakpoint was added', '')\n        }\n        }\n      >\n        { macro.name() }\n      </span>\n    )\n  }\n  \n  onVariable (variable: Variable): void {\n    // TODO: same here - not so clean\n    let className : string = 'variable'\n\n    if (this.argument\n        &&\n        this.argument.name() === variable.name()) {\n          className += ' substitutedArg'\n          if (this.reduction instanceof Alpha) {\n            className += ' alpha'\n          }\n      }\n\n    this.rendered = <span className={ className } >{ variable.name() }</span>\n  }\n}","import React from 'react'\nimport { ASTReduction, ASTReductionType } from '@lambdulus/core' // , Eta\n\n\ninterface ReductionMessageProperties {\n  lastReduction : ASTReduction | null\n}\n\nexport default function ReductionMessage (props : ReductionMessageProperties) : JSX.Element {\n  const { lastReduction } = props\n\n  if (lastReduction === null) {\n    return null as any\n  }\n\n  if (lastReduction.type === ASTReductionType.BETA) {\n    return (\n      <p className='lastReduction'>\n        β reduction\n      </p>\n    )\n  }\n\n  if (lastReduction.type === ASTReductionType.ALPHA) {\n    return (\n      <p className='lastReduction'>\n        α conversion\n      </p>\n    )\n  }\n\n  if (lastReduction.type === ASTReductionType.EXPANSION) {\n    return (\n      <p className='lastReduction'>\n        Macro expansion\n      </p>\n    )\n  }\n\n  if (lastReduction.type === ASTReductionType.ETA) {\n    return (\n      <p className='lastReduction'>\n        η conversion\n      </p>\n    )\n  }\n\n  if (lastReduction.type === ASTReductionType.GAMA) {\n    return (\n      <p className='lastReduction'>\n        Simplified Beta Reduction\n      </p>\n    )\n  }\n\n  else {\n    return null as any\n  }\n  \n}","import React, { memo } from 'react'\nimport { ASTReduction, AST, MacroMap, None } from '@lambdulus/core'\n\nimport './styles/Step.css'\n\nimport ReactPrinter from './ReactPrinter'\nimport { EvaluationStrategy, StepRecord, Breakpoint, Evaluator, StepValidity } from './Types'\nimport ReductionMessage from './ReductionMessage'\nimport { strategyToEvaluator, findSimplifiedReduction, MacroBeta } from './AppTypes'\n\n\ninterface StepWrapperProperties {\n  stepRecord : StepRecord\n  breakpoints : Array<Breakpoint>\n  strategy : EvaluationStrategy\n  addBreakpoint (breakpoint : Breakpoint) : void\n  children : JSX.Element\n  lastStep : boolean\n  SDE : boolean\n  macrotable : MacroMap\n}\n\ninterface StepProperties {\n  stepRecord : StepRecord\n  breakpoints : Array<Breakpoint>\n  addBreakpoint (breakpoint : Breakpoint) : void\n  children : JSX.Element\n  strategy : EvaluationStrategy\n  lastStep : boolean\n  SDE : boolean\n  macrotable : MacroMap\n}\n\n// This is done because of highlighting - if Strategy is changed ->\n// old steps should not be re-highlighted with changed Strategy - but stay same\nconst StepMemo = memo(Step, (props : StepProperties) => !props.lastStep)\n\nexport default function StepWrapper (props : StepWrapperProperties) : JSX.Element {\n  // return(\n  //   <StrategyContext.Consumer>\n  //     { \n  //       (strategy : EvaluationStrategy) => <StepMemo { ...props } strategy={ strategy } />\n  //     }\n  //   </StrategyContext.Consumer>\n  // )\n  return(\n    <StepMemo { ...props } />\n  )\n}\n\nfunction Step (props : StepProperties) : JSX.Element | null {\n  const { stepRecord, addBreakpoint, breakpoints, children, strategy, SDE, macrotable } = props\n  const { ast : tree, lastReduction, step, message, exerciseStep } = stepRecord\n  const { validity } = message\n\n  if (tree === null) {\n    return null\n  }\n\n  // const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(tree)\n  const newast : AST = tree.clone()\n  let nextReduction = (() => {\n    if (SDE) {\n      return findSimplifiedReduction(newast, strategy, macrotable)[0]\n    }\n    else {\n      const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(tree)\n      return evaluator.nextReduction\n    }\n  })()\n\n  if ( ! (nextReduction instanceof MacroBeta) && !(nextReduction instanceof None)) {\n    // TODO: read carefully\n    // this means -- next reduction is gonna be normal stuff (Beta, Alpha, Expansion)\n    // because of some decision to structure the findSimplifiedReduction the way it works\n    // mainly := first clone the tree and then mutate it with each recursive call\n    // if it's the normal stuff --> then the tree I used to identify the redex is not the same tree as I am giving to the ReactPrinter\n    // for this reason I have to use redex finder which does not mutate the tree under my hands at least until I rewrite\n    // the findSimplifiedReduction\n    const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(tree)\n    nextReduction = evaluator.nextReduction\n    // TODO: read carefully\n    // this definitely needs to be fixed\n    // I will most certainly need to do some dirty magic in ReactPrinter - because this design also makes it impossible\n    // to decide what is current redex in expressions like:\n    // (λ x . + x x) ( + 1 2 )\n    // + [( + 1 2 )] [( + 1 2 )]\n    // both [( + 1 2 )] are highlighted\n    // but maybe its not related to this\n  }\n  const reduction : ASTReduction = nextReduction\n  const printer : ReactPrinter = new ReactPrinter(tree, addBreakpoint, reduction, breakpoints, SDE)\n\n  // const incorrectStep : boolean = stepRecord.message.indexOf('Incorrect step.') === 0\n  // const correctStep : boolean = stepRecord.message.indexOf('Correct.') === 0\n  // const exerciseStep : boolean = incorrectStep || correctStep\n\n  return (\n    <span className='step'>\n      <ReductionMessage lastReduction={ lastReduction } />\n      <div className='inlineblock' >\n        <p className='stepNumber' >\n          { step } :\n        </p>\n        { printer.print() }\n        { children }\n        {\n          stepRecord.message.message === '' ?\n            null\n            :\n            exerciseStep === false ?\n            <p className='stepMessage' >\n              { stepRecord.message.message }\n            </p>\n            :\n            validity === StepValidity.INCORRECT ?\n              <span>\n                <p className='stepMessage incorrect' >\n                  Your input is incorrect!\n                  <br /> It was: \n                    <i className='userInput'>`{ stepRecord.message.message.substr(15) }`</i>\n                  <br />\n                </p>\n                <p className='stepMessage'>Continue from the next step please.</p>\n              </span>\n            :\n              <p className='stepMessage correct' >\n                { stepRecord.message.message }\n              </p>\n        }\n      </div>\n    </span>\n  )\n}","import React from 'react'\n\nimport Step from './Step'\n// import { AddBoxContext } from './MethodInjector'\nimport { Breakpoint, StepRecord, UntypedLambdaState, EvaluationStrategy } from './Types'\nimport { MacroMap } from '@lambdulus/core'\n// import { DeleteBox, MakeActiveContext } from './BoxSpace'\n\ninterface InactiveExpressionProps {\n  className : string\n  breakpoints : Array<Breakpoint>\n  history : Array<StepRecord>\n  strategy : EvaluationStrategy\n  SDE : boolean\n  macrotable : MacroMap\n\n  createBoxFrom (stepRecord : StepRecord, macrotable : MacroMap) : UntypedLambdaState\n}\n\n\nexport default function InactiveExpression (props : InactiveExpressionProps) : JSX.Element {\n  const { className, SDE, macrotable } = props\n  // const deleteBox = useContext(DeleteBox)\n  // const makeActive = useContext(MakeActiveContext)\n\n  return (\n    <div\n      className={ className + ' inactiveBox' }\n    >\n      <ul className='UL'>\n        <li key={ 0 } className='activeStep LI'>\n          <Step\n            breakpoints={ props.breakpoints }\n            strategy={ props.strategy }\n            addBreakpoint={ () => {} } // blank function - NOOP\n            stepRecord={ props.history[0] }\n            lastStep={ false }\n            SDE={ SDE }\n            macrotable={ macrotable }\n          >\n            <p></p>\n          </Step>\n        </li>\n      </ul>\n      <p className='inactiveMessage'>\n        Collapsing { props.history.length - 1 } { props.history.length === 2 ? 'step' : 'steps' }. Click to activate this box.\n      </p>\n    </div>\n  )\n}\n\n// This was inside the <Step> </Step>\n/* <AddBoxContext.Consumer>\n              {\n                (addBox : (boxState : BoxState) => void) => <i\n                  className=\"hiddenIcon far fa-clone\"\n                  onClick={ () => addBox(props.createBoxFrom(props.history[0])) }\n                />\n              }\n            </AddBoxContext.Consumer> */","import React, { KeyboardEvent } from 'react'\nimport MonacoEditor from 'react-monaco-editor'\n\nimport '../styles/Editor.css'\n\n// import { EvaluationStrategy } from '../App'\n\n\nexport enum ActionType {\n  ENTER_EXPRESSION = 'Enter Expression',\n  ENTER_EXERCISE = 'Enter Exercise',\n  NEXT_STEP = 'Next Step',\n  RUN = 'Run',\n  ENTER_MD = 'Enter MarkDown',\n}\n\ninterface EditorProperties {\n  placeholder: string\n  content : string\n  syntaxError : Error | null\n  submitOnEnter : boolean\n  shouldReplaceLambda : boolean\n  \n  onContent (content : string) : void\n  onShiftEnter () : void\n  onCtrlEnter () : void\n  onEnter () : void\n  onExecute () : void // TODO:delete\n  // onReset () : void\n}\n\nexport default function Editor (props : EditorProperties) : JSX.Element {\n  const {\n    placeholder,\n    content,\n    syntaxError,\n    submitOnEnter,\n    shouldReplaceLambda,\n\n    onContent,\n    onEnter,\n    onShiftEnter,\n    onCtrlEnter,\n    // onExecute,\n  } : EditorProperties = props\n\n  const onChange = (content : string) => {\n    // let { target : { value : content } } : { target : { value : string } } = event\n    // const caretPosition : number = event.target.selectionEnd\n\n    if (shouldReplaceLambda) {\n      content = content.replace(/\\\\/g, 'λ')\n    }\n    \n    onContent(content)\n  }\n\n  // TODO: Editor should not decide that - it should only implement onEnter onShiftEnter onCtrlEnter\n  const onKeyDown = (event : KeyboardEvent<HTMLDivElement>) => {\n    if ( ! event.shiftKey && ! event.ctrlKey && event.key === 'Enter') {\n      \n      if (submitOnEnter) {\n        event.stopPropagation()\n        event.preventDefault()\n        onEnter()\n      }\n\n      return\n    }\n\n    if (event.shiftKey && event.key === 'Enter') {\n      event.preventDefault()\n      onShiftEnter()\n    }\n    if (event.ctrlKey && event.key === 'Enter') {\n      event.preventDefault()\n      onCtrlEnter()\n    }\n\n    // TODO: not yet\n    // if (event.ctrlKey && event.key === 'r') {\n    //   event.preventDefault()\n    //   onReset()\n    // }\n  }\n\n  return (\n    <div className='editorContainer'>\n      {\n        syntaxError ?\n        <p className='editorError'>\n          { `${syntaxError}` }\n        </p>\n        :\n        null\n      }\n\n      <div className=\"editor\">\n        <InputField\n          placeholder={ placeholder }\n          content={ content }\n          onContent={ (content : string) => onChange(content) }\n          onKeyDown={ onKeyDown }\n        />\n      </div>\n    </div>\n  )\n}\n\ninterface InputProps {\n  placeholder : string\n  content : string\n  // onChange (event : ChangeEvent<HTMLTextAreaElement>) : void\n  onContent (content : string) : void\n  onKeyDown (event : KeyboardEvent<HTMLDivElement>) : void\n}\n\nfunction InputField (props : InputProps) : JSX.Element {\n  const { content, onKeyDown, onContent } : InputProps = props\n  const lines : number = content.split('\\n').length\n\n\n  return (\n    <div\n      onKeyDownCapture={ onKeyDown }\n    >\n      <MonacoEditor\n        // width=\"800\"\n        height={ Math.max(5 * 19 ,Math.min(40 * 19, (lines + 1) * 19)) } // 10 lines by default\n        language=\"markdown\"\n        theme=\"vs-light\"\n        value={ content }\n        options={ {\n          formatOnPaste : true,\n          minimap : { enabled : false },\n          renderLineHighlight : \"none\",\n          scrollBeyondLastLine : false,\n          overviewRulerBorder : false,\n          scrollbar : {\n            // handleMouseWheel : false,\n          } } }\n        onChange={ (content : string) => onContent(content) }\n        // editorDidMount={ ::this.editorDidMount }\n        editorDidMount={ (editor, monaco) => editor.focus() }\n      />\n    </div>\n  )\n}","import React, { PureComponent } from 'react'\n\nimport '../styles/DebugControls.css'\n\n\ninterface Props {\n  isRunning : boolean\n  // disableRun : boolean /* TODO: this is just for now -- because I am not sure students will know how to exercise with simplified */\n\n  onStep : () => void\n  onRun : () => void\n}\n\n// TODO: Consider separating the `keydown` event handler into different file\n// it would be singleton module, which would make sure ONLY ONE `DebugControls` component\n// is subscribed to the `keydown` event\nexport default class DebugControls extends PureComponent<Props> {\n  componentDidMount () : void {\n    document.onkeydown = (event) => {\n      console.log('KEYDOWN', event.key)\n      if ( ( ! event.shiftKey)\n        && ( ! event.ctrlKey)\n        && ( ! event.altKey)\n        && ( ! event.metaKey)\n        && (event.key === 'F8' || event.key === 'F9')) {\n          if (event.key === 'F8') {\n            event.preventDefault()\n            this.props.onStep()\n          }\n          if (event.key === 'F9') { /* TODO: this is just for now -- because I am not sure students will know how to exercise with simplified */\n            event.preventDefault()\n            this.props.onRun()\n          }\n        }\n    }\n  }\n\n  componentWillUnmount () : void {\n    document.onkeydown = () => void 0\n  }\n\n  render () {\n    const { isRunning, onStep, onRun } : Props = this.props\n  \n    const runMessage : string =\n      isRunning ? 'Stop the Evaluation (Press F9)' :  'Evaluate the Expression (Press F9)'\n\n    return (\n      <div className='debug-controls'>\n        {\n          /* TODO: this is just for now -- because I am not sure students will know how to exercise with simplified */\n          // this.props.disableRun ?\n            // null\n          // :\n          <button\n            title={ runMessage }\n            type=\"button\"\n            className='btn debug-controls--run'\n            onClick={ onRun }\n          >\n            <span className='debug-controls--btn-label'>{ isRunning ? 'Stop' : 'Run' }</span>\n            <i className=\"mini-icon fas fa-play\"></i>\n          </button>\n        }\n        \n        \n        <button\n          title='Evaluate Next Step (Press F8)'\n          type=\"button\"\n          className='btn debug-controls--step'\n          onClick={ onStep }\n          disabled={ isRunning }\n        >\n          <span className='debug-controls--btn-label'>Step</span>\n          <i className=\"mini-icon fas fa-step-forward\"></i>\n        </button>\n      </div>\n    )\n  }\n\n}"," import React, { PureComponent } from 'react'\n\nimport Step from './Step'\nimport { UntypedLambdaState, Breakpoint, StepRecord, UntypedLambdaExpressionState } from './Types'\nimport Editor from '../components/Editor'\nimport { mapLeftFromTo } from '../misc'\nimport DebugControls from '../components/DebugControls'\n\nimport './styles/Expression.css'\n\ninterface EvaluatorProps {\n  className : string\n  state : UntypedLambdaExpressionState\n  breakpoints : Array<Breakpoint>\n  history : Array<StepRecord>\n  editor : {\n    placeholder : string\n    content : string\n    syntaxError : Error | null\n  }\n  isNormalForm : boolean\n  isExercise : boolean\n\n  createBoxFrom (stepRecord : StepRecord) : UntypedLambdaState\n  setBoxState (state : UntypedLambdaExpressionState) : void\n  onContent (content : string) : void\n  onEnter () : void\n  onExecute () : void\n  addBox (box : UntypedLambdaState) : void\n  shouldShowDebugControls : boolean\n}\n\nexport default class Expression extends PureComponent<EvaluatorProps> {\n  constructor (props : EvaluatorProps) {\n    super(props)\n\n    this.addBreakpoint = this.addBreakpoint.bind(this)\n  }\n\n  render () : JSX.Element {\n    const { className, state, editor, shouldShowDebugControls, isExercise } = this.props\n\n    const { isRunning, SDE, macrotable } : UntypedLambdaExpressionState = state\n\n    const {\n      placeholder,\n      content,\n      syntaxError,\n    } = editor\n\n    // this is just a dirty-quick implementation to get an unique identifier\n    const array = new Uint32Array(2)\n    window.crypto.getRandomValues(array)\n    // const uniq : string = `${Date.now()}-${Math.random()}-${array[0]}-${array[1]}`\n\n\n\n    return (\n      <div className={ className }>\n        <ul className='UL'>\n          {\n            mapLeftFromTo(0, this.props.history.length - 2, this.props.history, (stepRecord : StepRecord, i : Number) =>\n              <li key={ i.toString() } className='inactiveStep LI' >\n                <Step\n                  breakpoints={ this.props.breakpoints }\n                  strategy={ this.props.state.strategy }\n                  addBreakpoint={ () => {} }\n                  stepRecord={ stepRecord }\n                  lastStep={ false }\n                  SDE={ SDE }\n                  macrotable={ macrotable }\n                >\n                  <i\n                    className=\"hiddenIcon far fa-clone\"\n                    title='Clone this expression to the new box'\n                    onClick={ (e : any) => {\n                      e.stopPropagation()\n                      this.props.addBox(this.props.createBoxFrom(stepRecord))\n                    } }\n                  />\n                </Step>\n              </li>)\n          }\n          <li key={this.props.history.length - 1} className='activeStep LI'>\n            <Step\n              breakpoints={ this.props.breakpoints }\n              strategy={ this.props.state.strategy }\n              addBreakpoint={ this.addBreakpoint }\n              stepRecord={ this.props.history[this.props.history.length - 1] }\n              lastStep={ true }\n              SDE={ SDE }\n              macrotable={ macrotable }\n            >\n                <i\n                  className=\"hiddenIcon far fa-clone\"\n                  title='Clone this expression to the new box'\n                  onClick={ (e : any) => {\n                    e.stopPropagation() // TODO: maybe I shouldn't do this\n                    // maybe instead I should drop the `focusedBoxIndex` and stop caring if Box has been clicked\n                    // instead I could always render whole and complete Box if user does not collapsed it\n                    // I need to think this through\n                    this.props.addBox(this.props.createBoxFrom(this.props.history[this.props.history.length - 1]))\n                   } }\n                />\n            </Step>\n          </li>\n        </ul>\n        {\n          (isExercise && ! this.props.isNormalForm) ?\n            <div>\n\n              <Editor\n                placeholder={ placeholder } // data\n                content={ content } // data\n                syntaxError={ syntaxError } // data\n                submitOnEnter={ true } // data\n\n                onContent={ this.props.onContent } // fn\n                onEnter={ this.props.onEnter } // fn // tohle asi bude potreba\n                onShiftEnter={ () => void 0 }\n                onCtrlEnter={ () => void 0 }\n                onExecute={ this.props.onExecute } // fn // tohle asi bude potreba\n                shouldReplaceLambda={ true }\n              />\n\n\n              {/* <div className='untyped-lambda--pick-strategy untyped-lambda-settings-strategies inlineblock'>\n                <p className='stratsLabel inlineblock'>Strategy:</p>\n\n                <span className='untyped-lambda-settings--strategy-radio-wrapper'>\n                  <input\n                    id={ `untyped-lambda-settings--normal-strategy-${uniq}` }\n                    type='radio'\n                    name={ `untyped-lambda-settings--strategy-${uniq}` }\n                    // style=\"fill\"\n                    checked={\n                      strategy === EvaluationStrategy.NORMAL\n                    }\n\n                    onChange={\n                      () => setBoxState({ ...state, strategy : EvaluationStrategy.NORMAL })\n                    }\n                  />\n                  <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--normal-strategy-${uniq}` }>\n                    Normal\n                  </label>\n                </span>\n\n                <span className='untyped-lambda-settings--strategy-radio-wrapper'>\n                  <input\n                    id={ `untyped-lambda-settings--applicative-strategy-${uniq}` }\n                    type='radio'\n                    name={ `untyped-lambda-settings--strategy-${uniq}` }\n                    // style=\"fill\"\n                    checked={\n                      strategy === EvaluationStrategy.APPLICATIVE\n                    }\n                    \n                    onChange={\n                      () => setBoxState({ ...state, strategy : EvaluationStrategy.APPLICATIVE })\n                    }\n                  />\n                  <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--applicative-strategy-${uniq}` }>\n                    Applicative\n                  </label>\n                </span>\n              </div> */}\n\n              {/* Here add SDE switch/checkbox */}\n              {/* {\n                  <span\n                    className='untyped-lambda-settings-SDE-'\n                    title='Simplified Evaluation'>\n                    <input\n                      id={ `untyped-lambda-settings--SDE-${uniq}` }\n                      type='checkbox'\n                      checked={ SDE }\n                      disabled={ false }\n                      // shape=\"fill\"\n                      \n                      onChange={\n                        (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n                          setBoxState({ ...state, SDE : e.target.checked })\n                      }\n                    />\n                    <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--SDE-${uniq}` }>\n                      Simplified Evaluation\n                    </label>\n                  </span>\n                } */}\n\n                {\n                  // <span\n                  //   className='untyped-lambda-settings-SLI-'\n                  //   title='Single Letters as Names without Spaces'>\n                  //   <input\n                  //     id={ `untyped-lambda-settings--SLI-${uniq}` }\n                  //     type='checkbox'\n                  //     checked={ SLI }\n                  //     disabled={ false } // TODO: tohle bude rozhodne chtit prepsat\n                  //     // shape=\"fill\"\n                      \n                  //     onChange={\n                  //       (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n                  //         setBoxState({ ...state, SLI : e.target.checked })\n                  //     }\n                  //   />\n                  //   <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--SLI-${uniq}` }>\n                  //     Single Letter Names\n                  //   </label>\n                  // </span>\n                }\n\n            </div>\n          :\n            ( ! this.props.isNormalForm && shouldShowDebugControls) ?\n              <div style={ { height: '2.5em' } }>\n                <span className='untyped-lambda--debug-ctrl'>\n                  <DebugControls\n                    isRunning={ isRunning }\n                    onStep={ this.props.onEnter }\n                    onRun={ this.props.onExecute }\n                    // disableRun={ SDE }\n                  />\n                </span>\n                \n                {/* <div className='untyped-lambda--pick-strategy untyped-lambda-settings-strategies inlineblock'>\n                  <p className='stratsLabel inlineblock'>Strategy:</p>\n\n                  <span className='untyped-lambda-settings--strategy-radio-wrapper'>\n                    <input\n                      id={ `untyped-lambda-settings--normal-strategy-${uniq}` }\n                      type='radio'\n                      name={ `untyped-lambda-settings--strategy-${uniq}` }\n                      // style=\"fill\"\n                      checked={\n                        strategy === EvaluationStrategy.NORMAL\n                      }\n\n                      onChange={\n                        () => setBoxState({ ...state, strategy : EvaluationStrategy.NORMAL })\n                      }\n                    />\n                    <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--normal-strategy-${uniq}` }>\n                      Normal\n                    </label>\n                  </span>\n\n                  <span className='untyped-lambda-settings--strategy-radio-wrapper'>\n                    <input\n                      id={ `untyped-lambda-settings--applicative-strategy-${uniq}` }\n                      type='radio'\n                      name={ `untyped-lambda-settings--strategy-${uniq}` }\n                      // style=\"fill\"\n                      checked={\n                        strategy === EvaluationStrategy.APPLICATIVE\n                      }\n                      \n                      onChange={\n                        () => setBoxState({ ...state, strategy : EvaluationStrategy.APPLICATIVE })\n                      }\n                    />\n                    <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--applicative-strategy-${uniq}` }>\n                      Applicative\n                    </label>\n                  </span>\n                </div> */}\n\n                {/* Here add SDE switch/checkbox */}\n                {/* {\n                  <span\n                    className='untyped-lambda-settings-SDE-'\n                    title='Simplified Evaluation'>\n                    <input\n                      id={ `untyped-lambda-settings--SDE-${uniq}` }\n                      type='checkbox'\n                      checked={ SDE }\n                      disabled={ false }\n                      // shape=\"fill\"\n                      \n                      onChange={\n                        (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n                          setBoxState({ ...state, SDE : e.target.checked })\n                      }\n                    />\n                    <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--SDE-${uniq}` }>\n                      Simplified Evaluation\n                    </label>\n                  </span>\n                } */}\n\n                {/* <span\n                  className='untyped-lambda-settings-SLI-'\n                  title='Single Letters as Names without Spaces'>\n                  <input\n                    id={ `untyped-lambda-settings--SLI-${uniq}` }\n                    type='checkbox'\n                    checked={ SLI }\n                    disabled={ false } // TODO: tohle bude rozhodne chtit prepsat\n                    // shape=\"fill\"\n                    \n                    onChange={\n                      (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n                        setBoxState({ ...state, SLI : e.target.checked })\n                    }\n                  />\n                  <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--SLI-${uniq}` }>\n                    Single Letter Names\n                  </label>\n                </span> */}\n\n              </div>\n            :\n              null\n        }\n      </div>\n    )\n  }\n\n  addBreakpoint (breakpoint : Breakpoint) : void {\n    let { state, setBoxState, breakpoints } = this.props\n  \n    // const index : number = breakpoints.findIndex((brk : Breakpoint) => {\n    //   return brk.type === breakpoint.type && brk.context.identifier === breakpoint.context.identifier\n    // })\n    // \n    // if (index >= 0) {\n    //   breakpoints.splice(index, 1)\n    // }\n    // else {\n    //   breakpoints.push(breakpoint)\n    // }\n    // \n    // setBoxState({\n    //   ...state,\n    //   breakpoints,\n    // })\n\n    const brkpts : Array<Breakpoint> = breakpoints.filter((brk : Breakpoint) => {\n      return brk.type !== breakpoint.type || brk.context.identifier !== breakpoint.context.identifier\n    })\n\n    if (brkpts.length !== breakpoints.length) {\n      setBoxState({\n        ...state,\n        breakpoints : brkpts,\n      })\n    }\n    else {\n      setBoxState({\n        ...state,\n        breakpoints : [ ...breakpoints, breakpoint ]\n      })\n    }    \n  }\n}","import React, { PureComponent } from 'react'\n\nimport {\n  AST,\n  ASTReduction,\n  None,\n  Beta,\n  Lambda,\n  Variable,\n  Expansion,\n  ChurchNumeral,\n  Macro,\n  OptimizeEvaluator,\n  MacroMap,\n  ASTReductionType,\n} from \"@lambdulus/core\"\n\nimport './styles/EvaluatorBox.css'\n\nimport { BoxType } from '../Types'\n\nimport InactiveEvaluator from './InactiveExpression'\nimport Expression from './Expression'\nimport { PromptPlaceholder, UntypedLambdaState, Evaluator, StepRecord, Breakpoint, UntypedLambdaType, UntypedLambdaExpressionState, StepMessage, StepValidity } from './Types'\nimport { reportEvent } from '../misc'\nimport { findSimplifiedReduction, MacroBeta, tryMacroContraction, strategyToEvaluator } from './AppTypes'\n// import { MContext } from './MacroContext'\n\n\nexport interface EvaluationProperties {\n  state : UntypedLambdaExpressionState\n  isActive : boolean\n  isFocused : boolean\n  macroContext : { macrotable : MacroMap }\n\n  setBoxState (state : UntypedLambdaExpressionState) : void\n  addBox (box : UntypedLambdaState) : void\n}\n\nexport default class ExpressionBox extends PureComponent<EvaluationProperties> {\n  constructor (props : EvaluationProperties) {\n    super(props)\n\n    this.onContent = this.onContent.bind(this)\n    this.onSimplifiedStep = this.onSimplifiedStep.bind(this)\n    this.onStep = this.onStep.bind(this)\n    this.onExecute = this.onExecute.bind(this)\n    this.onRun = this.onRun.bind(this)\n    this.onStop = this.onStop.bind(this)\n    this.shouldBreak = this.shouldBreak.bind(this)\n    this.createBoxFrom = this.createBoxFrom.bind(this)\n    this.onSimplifiedRun = this.onSimplifiedRun.bind(this)\n  }\n\n  render () : JSX.Element {\n    const { state, isActive, addBox } : EvaluationProperties = this.props\n    const {\n      minimized,\n      history,\n      breakpoints,\n      editor,\n      SDE,\n      macrotable,\n    } : UntypedLambdaExpressionState = state\n\n    let className : string = 'box boxEval'\n    const { isNormalForm } = history.length ? history[history.length - 1] : { isNormalForm : false }\n\n    // TODO: Maybe I will take this out\n    // Frontend may take care of that\n    if (minimized) {\n      return (\n        <InactiveEvaluator\n          className={ className }\n          breakpoints={ breakpoints }\n          history={ history }\n          strategy={ this.props.state.strategy }\n          SDE={ SDE }\n          macrotable={ macrotable }\n          \n          createBoxFrom={ this.createBoxFrom }\n        />\n      )\n    }\n\n    return (\n      <Expression\n        className={ className }\n        isExercise={ false }\n        state={ state }\n        breakpoints={ breakpoints }\n        history={ history }\n        editor={ editor }\n        isNormalForm={ isNormalForm }\n        shouldShowDebugControls={ isActive }\n\n        createBoxFrom={ this.createBoxFrom }\n        setBoxState={ this.props.setBoxState }\n        onContent={ this.onContent }\n        onEnter={ this.onStep }\n        onExecute={ this.onExecute }\n        addBox={ addBox }\n      />\n    )\n  }\n\n  createBoxFrom (stepRecord : StepRecord) : UntypedLambdaState {\n    const { state } : EvaluationProperties = this.props\n    const {\n      strategy,\n      SLI,\n      SDE,\n      expandStandalones,\n      macrotable,\n    } : UntypedLambdaExpressionState = state\n    const { ast } = stepRecord\n    const content = ast.toString()\n\n    return {\n      __key : Date.now().toString(),\n      type : BoxType.UNTYPED_LAMBDA,\n      subtype : UntypedLambdaType.EMPTY,\n      title : `Copy of ${state.title}`,\n      minimized : false,\n      settingsOpen : true,\n      expression : \"\",\n      ast : null,\n      history : [],\n      isRunning : false,\n      breakpoints : [],\n      timeoutID : undefined,\n      timeout : 10,\n      strategy,\n      SDE,\n      SLI,\n      expandStandalones,\n      macrolistOpen : false,\n      macrotable : { }, // ...macrotable, ...this.props.macroContext.macrotable\n      editor : {\n        placeholder : PromptPlaceholder.EVAL_MODE,\n        content : Object.entries(macrotable).map(([name, definition] : [string, string]) => name + ' := ' + definition + ' ;\\n' ).join('') + content,\n        syntaxError : null,\n      }\n    }\n  }\n\n  onContent (content : string) : void {\n    const { state, setBoxState } = this.props\n\n    setBoxState({\n      ...state,\n      editor : {\n        ...state.editor,\n        content,\n        syntaxError : null,\n      }\n    })\n  }\n\n  onSimplifiedStep () : void {\n    // console.log(\"DOIN ONE STEP       _______     SIMPLIFIED\")\n\n    const { state, setBoxState } = this.props\n    const { strategy, history, macrotable } = state\n    const stepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    const ast = stepRecord.ast.clone()\n    let newast = ast\n\n    if (isNormalForm) {\n      return\n    }\n\n    // console.log('looooooooooooooooooooooooooooking')\n\n    //                                                    fix this part please\n    let [nextReduction, evaluateReduction] : [ASTReduction, (ast : AST) => AST] = findSimplifiedReduction(ast, strategy, macrotable)\n    // console.log('BACK TO THE WORLD HERE')\n    \n    let message : StepMessage = { validity : StepValidity.CORRECT, userInput : '', message : '' }\n    let isNowNormalForm = false\n\n    // console.log(nextReduction)\n\n    if (nextReduction instanceof MacroBeta) {\n      // console.log(\"YES MACRO BETA HERE\")\n      // z macrobeta si vytahnu aritu makra\n      const arity : number = nextReduction.arity\n\n      // a zkontroluju jestli velikost pole odpovida arite\n      if (nextReduction.applications.length !== arity) {\n        // pokud arita nesedi - je vetsi nez delka pole aplikaci -->\n        // --> musim vyhlasit warning a rict, ze tenhle krok neni uplne gooda\n        // console.log(\"ARITY IS WRONG - probably too few arguments\")\n        stepRecord.message.message = `Macro ${tryMacroContraction(nextReduction.applications[0].left, macrotable)} is given too few arguments.`\n\n        newast = evaluateReduction(newast)\n\n        // this.setState({\n        //   ...state,\n        // })\n        // return\n      }\n      else {\n        // this is what happens when ::single-step\n        //\n        newast = evaluateReduction(newast)\n        // debugger\n\n        // if we are not ::single-step --> findSimplifiedReduction won't return MacroBeta -- instead\n        // it will return the first redex --> first beta reduction in the list and then it's not macro reduction problem anymore\n        // so next consecutive redex search will just find pretty normal situation as it probably should\n      }\n    }\n    else if (nextReduction instanceof None) {\n      console.log('first is NONE')\n      const etaEvaluator : Evaluator = new OptimizeEvaluator(ast)\n\n      if (etaEvaluator.nextReduction instanceof None) {\n        console.log('second is NONE')\n\n        stepRecord.isNormalForm = true\n        stepRecord.message.message = 'Expression is in normal form.'\n        setBoxState({\n          ...state,\n        })\n        return\n      }\n\n      console.log('second is ',etaEvaluator.nextReduction)\n\n      newast = etaEvaluator.perform()\n      nextReduction = etaEvaluator.nextReduction\n    }\n    else {\n      newast = evaluateReduction(newast)\n    }\n\n\n    {\n      // console.log('copak se tohle vubec neprovadi????????????????')\n      const astCopy : AST = newast.clone()\n      const [nextReduction] : [ASTReduction, (ast : AST) => AST] = findSimplifiedReduction(astCopy, strategy, macrotable)\n      // const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n      \n      if (nextReduction instanceof None) {\n        const etaEvaluator : Evaluator = new OptimizeEvaluator(astCopy)\n        if (etaEvaluator.nextReduction instanceof None) {\n          isNowNormalForm = true\n          message.message = 'Expression is in normal form.'\n          \n          reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n        }\n      }\n    }\n\n    setBoxState({\n      ...state,\n      history : [ ...history, { ast : newast, lastReduction : nextReduction, step : step + 1, message, isNormalForm : isNowNormalForm, exerciseStep : false } ],\n    })\n\n    reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n    return\n    \n    // {\n    //   // None\n    //   // console.log(\"_________________________________ NONE\")\n    //   // stepRecord.isNormalForm = true\n    //   // stepRecord.message = 'Expression is in normal form.'\n      \n    //   // setBoxState({\n    //   //   ...state,\n    //   // })\n      \n    //   // reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n\n    //   // return\n    // }\n    // {\n    //   // Expansion -> then None\n    //   // stepRecord.lastReduction = newreduction\n    //   // stepRecord.isNormalForm = true\n    //   // stepRecord.message = 'Expression is in normal form.'\n      \n    //   // setBoxState({\n    //   //   ...state,\n    //   // })\n      \n    //   // reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n\n    //   // return\n    // }\n    // {\n    //   // Expandion -> then Any ASTReduction inside the expanded Macro --> need to Expand first\n    //   // ast = newAst\n\n    //   // let message = ''\n    //   // let isNormal = false\n\n    //   // setBoxState({\n    //   //   ...state,\n    //   //   history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : isNormal } ]\n    //   // })\n    //   // return\n    // }\n    // {\n    //   // Expansion -> then Any ASTReduction completely outside of Macro --> skip the Expansion and do the next thing instead\n    //   // ast = newevaluator.perform()\n    //   // const p = parent as AST\n    //   // const ts = treeSide as String\n    //   // (p as any)[ts as any] = M\n    //   // // parent should be not-null\n    //   // // because if there was a Macro which we were able to Expand\n    //   // // and then there has been found Redex which is not part of the newly expanded sub-tree\n    //   // // the new Redex simply has to be in different part of the tree --> which means - M (original Macro) is not the root\n\n    //   // let message = ''\n    //   // let isNormal = false\n\n    //   // setBoxState({\n    //   //   ...state,\n    //   //   history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : isNormal } ]\n    //   // })\n    //   // return\n    // }\n  }\n\n  onStep () : void {\n    // console.log('DOIN ONE STEP')\n    const { state, setBoxState } = this.props\n    const { strategy, SDE, history } = state\n\n    // this is gonna change - Simplified Evaluation won't be strategy - but Strategy Modifier\n    if (SDE) {\n      this.onSimplifiedStep()\n      return\n    }\n\n    const stepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    let { ast, lastReduction } = stepRecord\n    ast = ast.clone()\n\n  \n    if (isNormalForm) {\n      return\n    }\n\n    let evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n    lastReduction = evaluator.nextReduction\n  \n    if (evaluator.nextReduction instanceof None) {\n      const etaEvaluator : Evaluator = new OptimizeEvaluator(ast)\n\n      if (etaEvaluator.nextReduction instanceof None) {\n        stepRecord.isNormalForm = true\n        stepRecord.message.message = 'Expression is in normal form.'\n        \n        setBoxState({\n          ...state,\n        })\n        \n        reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n  \n        return\n      }\n\n      evaluator = etaEvaluator\n      lastReduction = etaEvaluator.nextReduction\n    }\n  \n    ast = evaluator.perform()\n\n    let message : StepMessage = { validity : StepValidity.CORRECT, userInput : '', message : '' }\n    let isNormal = false\n\n    {\n      const astCopy : AST = ast.clone()\n      const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n      \n      if (evaluator.nextReduction instanceof None) {\n        const etaEvaluator : Evaluator = new OptimizeEvaluator(astCopy)\n\n        if (etaEvaluator.nextReduction instanceof None) {\n          isNormal = true\n          message.message = 'Expression is in normal form.'\n          \n          reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())  \n        }\n      }\n    }\n\n    // ANCHOR: #0023\n    // NOTE: This is completely crazy - it doesn't make any sense\n    // TODO: Investigate more - and fix the functionality\n    // it probably should check if the current AST Root is a Macro and next Reduction is Expansion of exactly this AST\n    // then it can say - it is in the Normal Form - if some settings enables it - not by default though\n    //\n    // if (ast instanceof Macro || ast instanceof ChurchNumeral) {\n    //   console.log('CURRENT IS MACRO OR NUMBER')\n\n    //   stepRecord.isNormalForm = true\n    //   stepRecord.message = 'Expression is in normal form.'\n\n    //   reportEvent('Evaluation Step', 'Step Normal Form Reached with Number or Macro', ast.toString())\n    // }\n  \n    setBoxState({\n      ...state,\n      history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : isNormal, exerciseStep : false } ],\n\n    })\n\n    reportEvent('Evaluation Step', 'Step', ast.toString())\n  }\n\n  onExecute () : void {\n    const { state, setBoxState } = this.props\n    const { isRunning, SDE } = state\n\n    if (isRunning) {\n      this.onStop()\n    }\n    else {\n      const { timeout, history } = state\n      const stepRecord = history[history.length - 1]\n  \n      if (stepRecord.isNormalForm) {\n        return\n      }\n      \n      const { ast, step, lastReduction, isNormalForm } = stepRecord\n      let msg : StepMessage = { validity : StepValidity.CORRECT, userInput : '', message : 'Skipping some steps...' }\n      history.push(history[history.length - 1])\n      history[history.length - 2] = { ast : ast.clone(), step, lastReduction, message : msg, isNormalForm, exerciseStep : false }\n\n      if (SDE) {\n        setBoxState({\n          ...state,\n          isRunning : true,\n          timeoutID : window.setTimeout(this.onSimplifiedRun, timeout),\n        })\n      }\n      else {\n        setBoxState({\n          ...state,\n          isRunning : true,\n          timeoutID : window.setTimeout(this.onRun, timeout),\n        })\n      }\n\n      \n\n      reportEvent('Execution', 'Run Evaluation', ast.toString())\n    }\n  }\n\n  onSimplifiedRun () : void {\n    const { state, setBoxState } = this.props\n    const { strategy, macrotable } = state\n    let { history, isRunning, breakpoints, timeoutID, timeout } = state\n    const stepRecord : StepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    let { lastReduction } = stepRecord\n\n    if ( ! isRunning) {\n      return\n    }\n\n    if (isNormalForm) {\n      setBoxState({\n        ...state,\n        isRunning : false,\n        timeoutID : undefined,\n      })\n  \n      return\n    }\n\n    let { ast } = stepRecord\n    const newast : AST = ast.clone()\n    const [nextReduction, evaluateReduction] : [ASTReduction, (ast : AST) => AST] = findSimplifiedReduction(newast, strategy, macrotable)\n\n/////////////////////////////////////////////////////////////////////////////////////////\n    // const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n    lastReduction = nextReduction\n    \n    if (nextReduction instanceof None) {\n      // TODO: consider immutability\n      history.pop()\n      history.push({\n        ast,\n        lastReduction : stepRecord.lastReduction,\n        step,\n        message : { validity : StepValidity.CORRECT, userInput : '', message : 'Expression is in normal form.' },\n        isNormalForm : true,\n        exerciseStep : false,\n      })\n  \n      setBoxState({\n        ...state,\n        isRunning : false,\n        timeoutID : undefined,\n      })\n  \n      return\n    }\n\n    const arityBreakpoint : Breakpoint | undefined = breakpoints.find((brk : Breakpoint) => brk.type === ASTReductionType.GAMA && ! brk.broken.has((nextReduction as MacroBeta).applications[0]))\n    if (nextReduction instanceof MacroBeta && nextReduction.arity !== nextReduction.applications.length && arityBreakpoint === undefined) {\n      stepRecord.message.message = `Macro ${tryMacroContraction(nextReduction.applications[0].left, macrotable)} is given too few arguments.`\n    \n      // completely same code as in breakpoint section -- TODO: refactor and unify pls\n      window.clearTimeout(timeoutID)\n      reportEvent('Evaluation Run Ended', 'Breakpoint was reached', ast.toString())\n\n      breakpoints.push({ type : ASTReductionType.GAMA, context : nextReduction.applications[0], broken : new Set([ nextReduction.applications[0] ]) })\n\n      setBoxState({\n        ...state,\n        breakpoints,\n        isRunning : false,\n        timeoutID,\n      })\n\n      return\n    }\n  \n    // TODO: maybe refactor a little\n    const breakpoint : Breakpoint | undefined = breakpoints.find(\n      (breakpoint : Breakpoint) =>\n        this.shouldBreak(breakpoint, nextReduction)\n    )\n\n    if (breakpoint !== undefined) {\n      // TODO: consider immutability\n      if (nextReduction instanceof Expansion) {\n        breakpoint.broken.add(nextReduction.target)\n      }\n      if (nextReduction instanceof Beta && nextReduction.redex.left instanceof Lambda) {\n        breakpoint.broken.add(nextReduction.redex.left.argument)\n      }\n\n      window.clearTimeout(timeoutID)\n      reportEvent('Evaluation Run Ended', 'Breakpoint was reached', ast.toString())\n\n\n      setBoxState({\n        ...state,\n        isRunning : false,\n        timeoutID,\n      })\n\n      return\n    }\n  \n    ast = evaluateReduction(newast)\n\n    history[history.length - 1] = { ast, lastReduction, step : step + 1, message : { validity : StepValidity.CORRECT, userInput : '', message : '' }, isNormalForm, exerciseStep : false }\n\n    // NOTE: Same thing as #0023\n    // if (ast instanceof Macro || ast instanceof ChurchNumeral) {\n    //   history[history.length - 1] = { ast, lastReduction, step : step + 1, message : 'Expression is in normal form.', isNormalForm : true }\n\n    //   reportEvent('Evaluation Run Ended', 'Step Normal Form Reached with Number or Macro', ast.toString())\n    // }\n    \n    setBoxState({\n      ...state,\n      timeoutID : window.setTimeout(this.onSimplifiedRun, timeout)\n    })\n  }\n\n  onRun () : void {\n    const { state, setBoxState } = this.props\n    const { strategy } = state\n    let { history, isRunning, breakpoints, timeoutID, timeout } = state\n    const stepRecord : StepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    let { lastReduction } = stepRecord\n\n    if ( ! isRunning) {\n      return\n    }\n    \n    if (isNormalForm) {\n      setBoxState({\n        ...state,\n        isRunning : false,\n        timeoutID : undefined,\n      })\n  \n      return\n    }\n  \n    let { ast } = stepRecord\n    const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n    lastReduction = normal.nextReduction\n    \n    if (normal.nextReduction instanceof None) {\n      // TODO: consider immutability\n      history.pop()\n      history.push({\n        ast,\n        lastReduction : stepRecord.lastReduction,\n        step,\n        message : { validity : StepValidity.CORRECT, userInput : '', message : 'Expression is in normal form.' }, \n        isNormalForm : true,\n        exerciseStep : false,\n      })\n  \n      setBoxState({\n        ...state,\n        isRunning : false,\n        timeoutID : undefined,\n      })\n  \n      return\n    }\n  \n    // TODO: maybe refactor a little\n    const breakpoint : Breakpoint | undefined = breakpoints.find(\n      (breakpoint : Breakpoint) =>\n        this.shouldBreak(breakpoint, normal.nextReduction)\n    )\n\n    if (breakpoint !== undefined) {\n      // TODO: consider immutability\n      if (normal.nextReduction instanceof Expansion) {\n        breakpoint.broken.add(normal.nextReduction.target)\n      }\n      if (normal.nextReduction instanceof Beta && normal.nextReduction.redex.left instanceof Lambda) {\n        breakpoint.broken.add(normal.nextReduction.redex.left.argument)\n      }\n\n      window.clearTimeout(timeoutID)\n      reportEvent('Evaluation Run Ended', 'Breakpoint was reached', ast.toString())\n\n\n      setBoxState({\n        ...state,\n        isRunning : false,\n        timeoutID,\n      })\n\n      return\n    }\n  \n    ast = normal.perform()\n\n    history[history.length - 1] = { ast, lastReduction, step : step + 1, message : { validity : StepValidity.CORRECT, userInput : '', message : '' }, isNormalForm, exerciseStep : false }\n\n    // NOTE: Same thing as #0023\n    // if (ast instanceof Macro || ast instanceof ChurchNumeral) {\n    //   history[history.length - 1] = { ast, lastReduction, step : step + 1, message : 'Expression is in normal form.', isNormalForm : true }\n\n    //   reportEvent('Evaluation Run Ended', 'Step Normal Form Reached with Number or Macro', ast.toString())\n    // }\n    \n    setBoxState({\n      ...state,\n      timeoutID : window.setTimeout(this.onRun, timeout)\n    })\n  }\n\n  onStop () : void {\n    const { state, setBoxState } = this.props\n    const { timeoutID } = state\n  \n    window.clearTimeout(timeoutID)\n  \n    setBoxState({\n      ...state,\n      isRunning : false,\n      timeoutID : undefined\n    })\n  }\n\n  // TODO: breakpointy se pak jeste musi predelat\n  // TODO: don't forget on GAMA refactor\n  shouldBreak (breakpoint : Breakpoint, reduction : ASTReduction) : boolean {\n    // if (reduction.type === breakpoint.type\n    //     && reduction instanceof Beta && breakpoint.context instanceof Lambda\n    //     && reduction.target.identifier === breakpoint.context.body.identifier\n    //   ) {\n    //     return true\n    // }\n    if (reduction.type === breakpoint.type\n        && reduction instanceof Beta && breakpoint.context instanceof Variable\n        && reduction.redex.left instanceof Lambda\n        && reduction.redex.left.argument.identifier === breakpoint.context.identifier\n        && ! breakpoint.broken.has(reduction.redex.left.argument)\n    ) {\n      return true\n    }\n\n    if (reduction.type === breakpoint.type\n        && reduction instanceof Expansion && breakpoint.context instanceof ChurchNumeral\n        && reduction.target.identifier === breakpoint.context.identifier\n        && ! breakpoint.broken.has(reduction.target)\n    ) {\n      return true\n    }\n    if (reduction.type === breakpoint.type\n        && reduction instanceof Expansion && breakpoint.context instanceof Macro\n        && reduction.target.identifier === breakpoint.context.identifier\n        && ! breakpoint.broken.has(reduction.target)\n    ) {\n      return true\n    }\n  \n    return false\n  }\n\n}","import React from 'react'\nimport { MacroMap, builtinMacros } from '@lambdulus/core'\n\nimport './styles/MacroList.css'\n\n\nexport interface MacroProperties {\n  macroTable : MacroMap\n}\n\nexport default function MacroList (props : MacroProperties) : JSX.Element {\n  const { macroTable } = props\n\n  return (\n    <div className='macroSpace'>\n      <p>Built-in Macros:</p>\n      <ul className='UL'>\n        { Object.entries(builtinMacros).map(([macroName, macroExpression]) =>\n          <span key={ macroName }>\n            <li className='LI dense-LI'>\n              <span className='macro-definition'>\n                <i className='macro-name'>{ macroName }</i> := { macroExpression }\n              </span>\n            </li>\n          </span>\n        ) }\n      </ul>\n\n      <p>User-defined Macros:</p>\n      <ul className='UL'>\n        { Object.entries(macroTable).map(([macroName, macroExpression]) =>\n          <span key={ macroName }>\n            <li className='LI dense-LI'>\n              <span className='macro-definition'>\n                <i className='macro-name'>{ macroName }</i> := { macroExpression }\n              </span>\n            </li>\n          </span>\n        ) }\n      </ul>\n    </div>\n  )\n}","import React, { PureComponent } from 'react'\n\nimport {\n  AST,\n  ASTReduction,\n  None,\n  Token,\n  tokenize,\n  parse,\n  OptimizeEvaluator,\n  MacroMap,\n} from \"@lambdulus/core\"\n\nimport './styles/EvaluatorBox.css'\n\nimport { BoxType } from '../Types'\n\nimport { TreeComparator } from './TreeComparator'\nimport InactiveEvaluator from './InactiveExpression'\nimport Expression from './Expression'\nimport { PromptPlaceholder, UntypedLambdaState, Evaluator, StepRecord, Breakpoint, UntypedLambdaType, UntypedLambdaExpressionState, StepMessage, StepValidity } from './Types'\nimport { reportEvent } from '../misc'\nimport { strategyToEvaluator, findSimplifiedReduction, MacroBeta, toMacroMap, tryMacroContraction } from './AppTypes'\n// import { MContext } from './MacroContext'\n\n\nexport interface EvaluationProperties {\n  state : UntypedLambdaExpressionState\n  isActive : boolean\n  isFocused : boolean\n  macroContext : { macrotable : MacroMap }\n\n  setBoxState (state : UntypedLambdaExpressionState) : void\n  addBox (box : UntypedLambdaState) : void\n}\n\nexport default class ExerciseBox extends PureComponent<EvaluationProperties> {\n  constructor (props : EvaluationProperties) {\n    super(props)\n\n    this.onContent = this.onContent.bind(this)\n    this.onSubmitExpression = this.onSubmitExpression.bind(this)\n    this.parseExpression = this.parseExpression.bind(this)\n    this.onEnter = this.onEnter.bind(this)\n    this.onExerciseStep = this.onExerciseStep.bind(this)\n    this.onSimplifiedExerciseStep = this.onSimplifiedExerciseStep.bind(this)\n    this.onStep = this.onStep.bind(this)\n    this.onSimplifiedStep = this.onSimplifiedStep.bind(this)\n    this.onExecute = this.onExecute.bind(this)\n    this.onRun = this.onRun.bind(this)\n    this.onStop = this.onStop.bind(this)\n    this.shouldBreak = this.shouldBreak.bind(this)\n    this.createBoxFrom = this.createBoxFrom.bind(this)\n  }\n\n  render () : JSX.Element {\n    const { state, isActive, addBox } : EvaluationProperties = this.props\n    const {\n      minimized,\n      history,\n      breakpoints,\n      editor,\n      SDE,\n      macrotable,\n    } : UntypedLambdaExpressionState = state\n\n    let className : string = 'box boxEval boxExercise'\n    const { isNormalForm } = history.length ? history[history.length - 1] : { isNormalForm : false }\n\n    // TODO: Maybe I will take this out\n    // Frontend may take care of that\n    if (minimized) {\n      return (\n        <InactiveEvaluator\n          className={ className }\n          breakpoints={ breakpoints }\n          history={ history }\n          strategy={ this.props.state.strategy }\n          SDE={ SDE }\n          macrotable={ macrotable }\n          \n          createBoxFrom={ this.createBoxFrom }\n        />\n      )\n    }\n\n    return (\n      <Expression\n        className={ className }\n        isExercise={ true }\n        state={ state }\n        breakpoints={ breakpoints }\n        history={ history }\n        editor={ editor }\n        isNormalForm={ isNormalForm }\n        shouldShowDebugControls={ isActive }\n\n        createBoxFrom={ this.createBoxFrom }\n        setBoxState={ this.props.setBoxState }\n        onContent={ this.onContent }\n        onEnter={ this.onEnter }\n        onExecute={ this.onExecute }\n        addBox={ addBox }\n      />\n    )\n  }\n\n  createBoxFrom (stepRecord : StepRecord) : UntypedLambdaState {\n    const { state } : EvaluationProperties = this.props\n    const {\n      strategy,\n      SLI,\n      SDE,\n      expandStandalones,\n      macrotable,\n    } : UntypedLambdaExpressionState = state\n    const { ast } = stepRecord\n    const content = ast.toString()\n\n    return {\n      __key : Date.now().toString(),\n      type : BoxType.UNTYPED_LAMBDA,\n      subtype : UntypedLambdaType.EMPTY,\n      title : `Copy of ${state.title}`,\n      minimized : false,\n      settingsOpen : false,\n      expression : \"\",\n      ast : null,\n      history : [],\n      isRunning : false,\n      breakpoints : [],\n      timeoutID : undefined,\n      timeout : 10,\n      strategy,\n      SDE,\n      SLI,\n      expandStandalones,\n      macrolistOpen : false,\n      macrotable : { }, // ...macrotable, ...this.props.macroContext.macrotable\n      editor : {\n        placeholder : PromptPlaceholder.EVAL_MODE,\n        content : Object.entries(macrotable).map(([name, definition] : [string, string]) => name + ' := ' + definition + ' ;\\n').join('') + content,\n        syntaxError : null,\n      }\n    }\n  }\n\n  onContent (content : string) : void {\n    const { state, setBoxState } = this.props\n\n    setBoxState({\n      ...state,\n      editor : {\n        ...state.editor,\n        content,\n        syntaxError : null,\n      }\n    })\n  }\n\n  onEnter () : void {\n    const { editor : { content } } = this.props.state\n\n    if (content === '') {\n      this.onStep()\n    }\n\n    this.onExerciseStep()\n  }\n\n  onSubmitExpression () : void {\n    const { state, setBoxState } = this.props\n    const {\n      strategy,\n      editor : { content },\n      macrotable,\n    } = state\n\n    try {\n      // const definitions : Array<string> = content.split(';')\n      // const expression : string = definitions.pop() || \"\"\n      // const macromap : MacroMap = toMacroMap(definitions, SLI)\n      // const newMacrotable : MacroMap = { ...macrotable, ...macromap } // the local macromap has a higher priority\n      \n      const ast : AST = this.parseExpression(content, macrotable)\n\n      let message : StepMessage = { validity : StepValidity.CORRECT, userInput : content, message : '' }\n      let isNormal = false\n\n      const astCopy : AST = ast.clone()\n      const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n      \n      if (evaluator.nextReduction instanceof None) {\n        isNormal = true\n        message.message = 'Expression is in normal form.'\n        \n        reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())  \n      }\n\n      setBoxState({\n        ...state,\n        ast,\n        expression : content,\n        history : [ {\n          ast : ast.clone(),\n          lastReduction : new None(),\n          step : 0,\n          message,\n          isNormalForm : isNormal,\n          exerciseStep : true,\n        } ],\n        editor : {\n          content : '',\n          placeholder : PromptPlaceholder.EVAL_MODE,\n          syntaxError : null,\n        }\n      })\n\n      reportEvent('Submit Expression', 'submit valid', content)\n    } catch (exception) {\n      let errorMessage : string = \"Something is wrong with your expression. Please inspect it closely.\"\n      console.error((exception as Error).toString())\n\n      if (content.match(/:=/g)?.length !== content.match(/;/g)?.length) {\n        errorMessage = \"Did you forget to write a semicolon after the Macro definition?\"\n      }\n      if (content.match(/\\s*;\\s*$/g)) {\n        errorMessage = \"There's a semicolon at the end.\"\n      }\n      \n      setBoxState({\n        ...state,\n        editor : {\n          ...state.editor,\n          syntaxError : Error(errorMessage),\n        }\n      })\n\n      reportEvent('Submit Expression', 'submit invalid', content)\n    }\n  }\n\n  onSimplifiedExerciseStep () {\n    const { state, setBoxState } = this.props\n    const { strategy, history, editor : { content }, macrotable, SLI } = state\n\n    try {\n      const definitions : Array<string> = content.split(';')\n      const expression : string = definitions.pop() || \"\"\n      const macromap : MacroMap = toMacroMap(definitions, SLI)\n      const newMacrotable : MacroMap = { ...macrotable, ...macromap } // the local macromap has a higher priority\n      \n\n      const userAst : AST = this.parseExpression(expression, newMacrotable)\n      const stepRecord : StepRecord = history[history.length - 1]\n      const { isNormalForm, step } = stepRecord\n      let { ast, lastReduction } = stepRecord\n      ast = ast.clone()\n\n      if (isNormalForm) {\n        // TODO: do something about it\n        // say user - there are no more steps and it is in normal form        \n        // TODO: consider immutability\n        stepRecord.message.message = 'No more steps available. Expression is in normal form.'\n\n        setBoxState({\n          ...state,\n        })\n\n        reportEvent('Exercise Step', 'Step Already in normal form', content)\n\n        return\n      }\n    \n      const newast : AST = ast.clone()\n      let [nextReduction, evaluateReduction] : [ASTReduction, (ast : AST) => AST] = findSimplifiedReduction(newast, strategy, macrotable)\n      // const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n      // lastReduction = normal.nextReduction\n    \n      if (nextReduction instanceof None) {\n        const etaEvaluator : Evaluator = new OptimizeEvaluator(newast)\n\n        if (etaEvaluator.nextReduction instanceof None) {\n          // TODO: refactor PLS - update history\n          // TODO: say user it is in normal form and they are mistaken\n          stepRecord.isNormalForm = true\n          stepRecord.message.message = 'Expression is already in normal form.'\n          \n          setBoxState({\n            ...state,\n          })\n  \n          reportEvent('Simplified Exercise Step', 'Step Already in Normal Form', content)\n          \n          return\n        }\n\n        ast = etaEvaluator.perform()\n        // console.log(\"next step ale dala se udelat eta\", ast.toString(), userAst.toString())\n        lastReduction = etaEvaluator.nextReduction\n      }\n      else {\n        ast = evaluateReduction(newast)\n      }\n\n      let isNormal = false\n\n      {\n\n        const astCopy : AST = ast.clone()\n        const [nextReduction] : [ASTReduction, (ast : AST) => AST] = findSimplifiedReduction(astCopy, strategy, macrotable)\n        // const astCopy : AST = ast.clone()\n        // const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n        \n        if (nextReduction instanceof None) {\n          const etaEvaluator : Evaluator = new OptimizeEvaluator(astCopy)\n\n          if (etaEvaluator.nextReduction instanceof None) {\n            isNormal = true\n            reportEvent('Simplified Evaluation Step', 'Step Normal Form Reached', ast.toString())  \n          }\n        }\n      }\n    \n      let message : StepMessage = { validity : StepValidity.CORRECT, userInput : content, message : '' }\n      const comparator : TreeComparator = new TreeComparator([ userAst, ast ], [ newMacrotable, macrotable ])\n\n      if (comparator.equals) {\n        ast = userAst\n        message.message = 'Correct.'\n\n        reportEvent('Exercise Step', 'Valid Step', content)\n      }\n      else {\n        // TODO: say user it was incorrect\n        // TODO: na to se pouzije uvnitr EvaluatorState prop messages nebo tak neco\n        // console.log('Incorrect step')\n        message.message = `Incorrect step. ${content}`\n        message.validity = StepValidity.INCORRECT\n\n        reportEvent('Exercise Step', 'Invalid Step', content)\n      }\n\n      setBoxState({\n        ...state,\n        history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : isNormal, exerciseStep : true } ],\n        editor : {\n          ...state.editor,\n          content : Object.entries(newMacrotable).map(([name, definition] : [string, string]) => name + ' := ' + definition + ' ;\\n').join('') + ast.toString(),\n          placeholder : PromptPlaceholder.VALIDATE_MODE,\n          syntaxError : null,\n        }\n      })\n    } catch (exception) {\n      // TODO: print syntax error\n      // TODO: do it localy - no missuse of onSubmit\n\n      // TODO: print syntax error\n\n      reportEvent('Exercise Step', 'Syntax error in Step', content)\n    }\n\n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n  }\n\n  onExerciseStep () {\n    // console.log('EXERCISE STEP')\n    const { state, setBoxState } = this.props\n    const { strategy, history, editor : { content }, SDE, macrotable, SLI } = state\n    \n    if (SDE === true) {\n      this.onSimplifiedExerciseStep()\n      return\n    }\n\n\n    try {\n      const definitions : Array<string> = content.split(';')\n      const expression : string = definitions.pop() || \"\"\n      const macromap : MacroMap = toMacroMap(definitions, SLI)\n      const newMacrotable : MacroMap = { ...macrotable, ...macromap } // the local macromap has a higher priority\n      \n\n      const userAst : AST = this.parseExpression(expression, newMacrotable)\n      // HERE\n      const stepRecord : StepRecord = history[history.length - 1]\n      const { isNormalForm, step } = stepRecord\n      let { ast, lastReduction } = stepRecord\n      ast = ast.clone()\n\n      if (isNormalForm) {\n        // TODO: do something about it\n        // say user - there are no more steps and it is in normal form        \n        // TODO: consider immutability\n        stepRecord.message.message = 'No more steps available. Expression is in normal form.'\n\n        setBoxState({\n          ...state,\n        })\n\n        reportEvent('Exercise Step', 'Step Already in normal form', content)\n\n        return\n      }\n    \n      let evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n      lastReduction = evaluator.nextReduction\n    \n      if (evaluator.nextReduction instanceof None) {\n        const etaEvaluator : Evaluator = new OptimizeEvaluator(ast)\n\n        if (etaEvaluator.nextReduction instanceof None) {\n          // TODO: refactor PLS - update history\n          // TODO: say user it is in normal form and they are mistaken\n          stepRecord.isNormalForm = true\n          stepRecord.message.message = 'Expression is already in normal form.'\n          \n          setBoxState({\n            ...state,\n          })\n  \n          reportEvent('Exercise Step', 'Step Already in Normal Form', content)\n          \n          return\n        }\n\n        evaluator = etaEvaluator\n        lastReduction = etaEvaluator.nextReduction\n\n      }\n    \n      ast = evaluator.perform()\n\n      let isNormal = false\n\n      {\n        const astCopy : AST = ast.clone()\n        const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n        \n        if (evaluator.nextReduction instanceof None) {\n          const etaEvaluator : Evaluator = new OptimizeEvaluator(astCopy)\n\n          if (etaEvaluator.nextReduction instanceof None) {\n            isNormal = true\n\n            reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())  \n          }\n        }\n      }\n    \n      let message : StepMessage = { validity : StepValidity.CORRECT, userInput : content, message : '' }\n      const comparator : TreeComparator = new TreeComparator([ userAst, ast ], [ newMacrotable, macrotable ])\n\n      if (comparator.equals) {\n        ast = userAst\n        message.message = 'Correct.'\n\n        reportEvent('Exercise Step', 'Valid Step', content)\n      }\n      else {\n        // TODO: say user it was incorrect\n        // TODO: na to se pouzije uvnitr EvaluatorState prop messages nebo tak neco\n        // console.log('Incorrect step')\n        message.message = `Incorrect step. ${content}`\n        message.validity = StepValidity.INCORRECT\n\n        reportEvent('Exercise Step', 'Invalid Step', content)\n      }\n\n      setBoxState({\n        ...state,\n        history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : isNormal, exerciseStep : true } ],\n        editor : {\n          ...state.editor,\n          content : Object.entries(newMacrotable).map(([name, definition] : [string, string]) => name + ' := ' + definition + ' ;\\n').join('') + ast.toString(),\n          placeholder : PromptPlaceholder.VALIDATE_MODE,\n          syntaxError : null,\n        }\n      })\n    } catch (exception) {\n      // TODO: print syntax error\n      // TODO: do it localy - no missuse of onSubmit\n\n      // TODO: print syntax error\n\n      reportEvent('Exercise Step', 'Syntax error in Step', content)\n    }\n  }\n\n  onSimplifiedStep () : void {\n    // console.log(\"DOIN ONE STEP       _______     SIMPLIFIED\")\n    // console.log('simplified step')\n\n\n    const { state, setBoxState } = this.props\n    const { strategy, history, editor : { content }, macrotable } = state\n    const stepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    const ast = stepRecord.ast.clone()\n    let newast = ast\n\n    if (isNormalForm) {\n      return\n    }\n\n    // console.log('looooooooooooooooooooooooooooking')\n\n    //                                                    fix this part please\n    let [nextReduction, evaluateReduction] : [ASTReduction, (ast : AST) => AST] = findSimplifiedReduction(ast, strategy, macrotable)\n    // console.log('BACK TO THE WORLD HERE')\n    \n    let message : StepMessage = { validity : StepValidity.CORRECT, userInput : content, message : '' }\n    let isNowNormalForm = false\n\n    // console.log(nextReduction)\n\n    if (nextReduction instanceof MacroBeta) {\n      // console.log(\"YES MACRO BETA HERE\")\n      // z macrobeta si vytahnu aritu makra\n      const arity : number = nextReduction.arity\n\n      // a zkontroluju jestli velikost pole odpovida arite\n      if (nextReduction.applications.length !== arity) {\n        // pokud arita nesedi - je vetsi nez delka pole aplikaci -->\n        // --> musim vyhlasit warning a rict, ze tenhle krok neni uplne gooda\n        // console.log(\"ARITY IS WRONG - probably too few arguments\")\n        stepRecord.message.message = `Macro ${tryMacroContraction(nextReduction.applications[0].left, macrotable)} is given too few arguments.`\n\n        newast = evaluateReduction(newast)\n\n        // this.setState({\n        //   ...state,\n        // })\n        // return\n      }\n      else {\n        // this is what happens when ::single-step\n        //\n        newast = evaluateReduction(newast)\n        // debugger\n\n        // if we are not ::single-step --> findSimplifiedReduction won't return MacroBeta -- instead\n        // it will return the first redex --> first beta reduction in the list and then it's not macro reduction problem anymore\n        // so next consecutive redex search will just find pretty normal situation as it probably should\n      }\n    }\n    else if (nextReduction instanceof None) {\n      const etaEvaluator : Evaluator = new OptimizeEvaluator(ast)\n\n      if (etaEvaluator.nextReduction instanceof None) {\n        stepRecord.isNormalForm = true\n        stepRecord.message.message = 'Expression is in normal form.'\n        setBoxState({\n          ...state,\n        })\n        return  \n      }\n\n      newast = etaEvaluator.perform()\n      nextReduction = etaEvaluator.nextReduction\n    }\n    else {\n      newast = evaluateReduction(newast)\n    }\n\n\n    {\n      // console.log('copak se tohle vubec neprovadi????????????????')\n      const astCopy : AST = newast.clone()\n      const [nextReduction] : [ASTReduction, (ast : AST) => AST] = findSimplifiedReduction(astCopy, strategy, macrotable)\n      // const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n      \n      if (nextReduction instanceof None) {\n        const etaEvaluator : Evaluator = new OptimizeEvaluator(astCopy)\n\n        if (etaEvaluator.nextReduction instanceof None) {\n          isNowNormalForm = true\n          message.message = 'Expression is in normal form.'\n          \n          reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())  \n        }\n      }\n    }\n\n    setBoxState({\n      ...state,\n      editor : {\n        ...state.editor,\n        content : ast.toString(),\n      },\n      history : [ ...history, { ast : newast, lastReduction : nextReduction, step : step + 1, message, isNormalForm : isNowNormalForm, exerciseStep : true } ],\n    })\n\n    reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n    return\n    \n    // {\n    //   // None\n    //   // console.log(\"_________________________________ NONE\")\n    //   // stepRecord.isNormalForm = true\n    //   // stepRecord.message = 'Expression is in normal form.'\n      \n    //   // setBoxState({\n    //   //   ...state,\n    //   // })\n      \n    //   // reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n\n    //   // return\n    // }\n    // {\n    //   // Expansion -> then None\n    //   // stepRecord.lastReduction = newreduction\n    //   // stepRecord.isNormalForm = true\n    //   // stepRecord.message = 'Expression is in normal form.'\n      \n    //   // setBoxState({\n    //   //   ...state,\n    //   // })\n      \n    //   // reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n\n    //   // return\n    // }\n    // {\n    //   // Expandion -> then Any ASTReduction inside the expanded Macro --> need to Expand first\n    //   // ast = newAst\n\n    //   // let message = ''\n    //   // let isNormal = false\n\n    //   // setBoxState({\n    //   //   ...state,\n    //   //   history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : isNormal } ]\n    //   // })\n    //   // return\n    // }\n    // {\n    //   // Expansion -> then Any ASTReduction completely outside of Macro --> skip the Expansion and do the next thing instead\n    //   // ast = newevaluator.perform()\n    //   // const p = parent as AST\n    //   // const ts = treeSide as String\n    //   // (p as any)[ts as any] = M\n    //   // // parent should be not-null\n    //   // // because if there was a Macro which we were able to Expand\n    //   // // and then there has been found Redex which is not part of the newly expanded sub-tree\n    //   // // the new Redex simply has to be in different part of the tree --> which means - M (original Macro) is not the root\n\n    //   // let message = ''\n    //   // let isNormal = false\n\n    //   // setBoxState({\n    //   //   ...state,\n    //   //   history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : isNormal } ]\n    //   // })\n    //   // return\n    // }\n  }\n\n  onStep () : void {\n    // console.log('DOIN ONE STEP')\n    const { state, setBoxState } = this.props\n    const { strategy, history, SDE } = state\n    const stepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    let { ast, lastReduction } = stepRecord\n    ast = ast.clone()\n  \n    if (isNormalForm) {\n      // console.log('normal form bro')\n      \n      return\n    }\n\n    if (SDE) {\n      this.onSimplifiedStep()\n      return\n    }\n\n    console.log('normal step')\n\n    let evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n    lastReduction = evaluator.nextReduction\n  \n    if (evaluator.nextReduction instanceof None) {\n      const etaEvaluator : Evaluator = new OptimizeEvaluator(ast)\n\n      if (etaEvaluator.nextReduction instanceof None) {\n        // console.log('NEXT IS NONE')\n        stepRecord.isNormalForm = true\n        stepRecord.message.message = 'Expression is in normal form.'\n        \n        setBoxState({\n          ...state,\n        })\n        \n        reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n  \n        return\n      }\n\n      evaluator = etaEvaluator\n      lastReduction = etaEvaluator.nextReduction\n    }\n  \n    ast = evaluator.perform()\n\n    let message : StepMessage = { message : 'Evaluating One Step for You', validity : StepValidity.CORRECT, userInput : '' }\n    let isNormal = false\n\n    {\n      const astCopy : AST = ast.clone()\n      const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n      \n      if (evaluator.nextReduction instanceof None) {\n        const etaEvaluator : Evaluator = new OptimizeEvaluator(ast)\n\n        if (etaEvaluator.nextReduction instanceof None) {\n          isNormal = true\n          message.message = 'Expression is in normal form.'\n          \n          reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())  \n        }\n      }\n    }\n\n    // ANCHOR: #0023\n    // NOTE: This is completely crazy - it doesn't make any sense\n    // TODO: Investigate more - and fix the functionality\n    // it probably should check if the current AST Root is a Macro and next Reduction is Expansion of exactly this AST\n    // then it can say - it is in the Normal Form - if some settings enables it - not by default though\n    //\n    // if (ast instanceof Macro || ast instanceof ChurchNumeral) {\n    //   console.log('CURRENT IS MACRO OR NUMBER')\n\n    //   stepRecord.isNormalForm = true\n    //   stepRecord.message = 'Expression is in normal form.'\n\n    //   reportEvent('Evaluation Step', 'Step Normal Form Reached with Number or Macro', ast.toString())\n    // }\n  \n    setBoxState({\n      ...state,\n      editor : {\n        ...state.editor,\n        content : ast.toString(),\n      },\n      history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : isNormal, exerciseStep : true } ],\n\n    })\n\n    reportEvent('Exercise Empty Evaluation Step', 'Step', ast.toString())\n  }\n\n  onExecute () : void {\n    // const { state, setBoxState } = this.props\n    // const { isRunning } = state\n\n    // // if (isExercise) {\n    // //   // TODO: exercises can not be run - some message to user???\n    // //   return\n    // // }\n\n    // if (isRunning) {\n    //   this.onStop()\n    // }\n    // else {\n    //   const { timeout, history } = state\n    //   const stepRecord = history[history.length - 1]\n  \n    //   if (stepRecord.isNormalForm) {\n    //     return\n    //   }\n      \n    //   const { ast, step, lastReduction, isNormalForm, message } = stepRecord\n    //   history.push(history[history.length - 1])\n    //   history[history.length - 2] = { ast : ast.clone(), step, lastReduction, message : 'Skipping some steps...', isNormalForm }\n\n    //   setBoxState({\n    //     ...state,\n    //     isRunning : true,\n    //     timeoutID : window.setTimeout(this.onRun, timeout),\n    //   })\n\n    //   reportEvent('Execution', 'Run Evaluation', ast.toString())\n    // }\n  }\n\n  onRun () : void {\n    // const { state, setBoxState } = this.props\n    // const { strategy } = state\n    // let { history, isRunning, breakpoints, timeoutID, timeout } = state\n    // const stepRecord : StepRecord = history[history.length - 1]\n    // const { isNormalForm, step } = stepRecord\n    // let { lastReduction } = stepRecord\n\n    // if ( ! isRunning) {\n    //   return\n    // }\n    \n    // if (isNormalForm) {\n    //   setBoxState({\n    //     ...state,\n    //     isRunning : false,\n    //     timeoutID : undefined,\n    //   })\n  \n    //   return\n    // }\n  \n    // let { ast } = stepRecord\n    // const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n    // lastReduction = normal.nextReduction\n    \n    // if (normal.nextReduction instanceof None) {\n    //   // TODO: consider immutability\n    //   history.pop()\n    //   history.push({\n    //     ast,\n    //     lastReduction : stepRecord.lastReduction,\n    //     step,\n    //     message : 'Expression is in normal form.',\n    //     isNormalForm : true\n    //   })\n  \n    //   setBoxState({\n    //     ...state,\n    //     isRunning : false,\n    //     timeoutID : undefined,\n    //   })\n  \n    //   return\n    // }\n  \n    // // TODO: maybe refactor a little\n    // const breakpoint : Breakpoint | undefined = breakpoints.find(\n    //   (breakpoint : Breakpoint) =>\n    //     this.shouldBreak(breakpoint, normal.nextReduction)\n    // )\n\n    // if (breakpoint !== undefined) {\n    //   // TODO: consider immutability\n    //   if (normal.nextReduction instanceof Expansion) {\n    //     breakpoint.broken.add(normal.nextReduction.target)\n    //   }\n    //   if (normal.nextReduction instanceof Beta && normal.nextReduction.redex.left instanceof Lambda) {\n    //     breakpoint.broken.add(normal.nextReduction.redex.left.argument)\n    //   }\n\n    //   window.clearTimeout(timeoutID)\n    //   reportEvent('Evaluation Run Ended', 'Breakpoint was reached', ast.toString())\n\n\n    //   setBoxState({\n    //     ...state,\n    //     isRunning : false,\n    //     timeoutID,\n    //   })\n\n    //   return\n    // }\n  \n    // ast = normal.perform()\n\n    // history[history.length - 1] = { ast, lastReduction, step : step + 1, message : '', isNormalForm }\n\n    // // NOTE: Same thing as #0023\n    // // if (ast instanceof Macro || ast instanceof ChurchNumeral) {\n    // //   history[history.length - 1] = { ast, lastReduction, step : step + 1, message : 'Expression is in normal form.', isNormalForm : true }\n\n    // //   reportEvent('Evaluation Run Ended', 'Step Normal Form Reached with Number or Macro', ast.toString())\n    // // }\n    \n    // setBoxState({\n    //   ...state,\n    //   timeoutID : window.setTimeout(this.onRun, timeout)\n    // })\n  }\n\n  onStop () : void {\n    // const { state, setBoxState } = this.props\n    // const { timeoutID } = state\n  \n    // window.clearTimeout(timeoutID)\n  \n    // setBoxState({\n    //   ...state,\n    //   isRunning : false,\n    //   timeoutID : undefined\n    // })\n  }\n\n  // TODO: breakpointy se pak jeste musi predelat\n  shouldBreak (breakpoint : Breakpoint, reduction : ASTReduction) : boolean {\n    // // if (reduction.type === breakpoint.type\n    // //     && reduction instanceof Beta && breakpoint.context instanceof Lambda\n    // //     && reduction.target.identifier === breakpoint.context.body.identifier\n    // //   ) {\n    // //     return true\n    // // }\n    // if (reduction.type === breakpoint.type\n    //     && reduction instanceof Beta && breakpoint.context instanceof Variable\n    //     && reduction.redex.left instanceof Lambda\n    //     && reduction.redex.left.argument.identifier === breakpoint.context.identifier\n    //     && ! breakpoint.broken.has(reduction.redex.left.argument)\n    // ) {\n    //   return true\n    // }\n\n    // if (reduction.type === breakpoint.type\n    //     && reduction instanceof Expansion && breakpoint.context instanceof ChurchNumeral\n    //     && reduction.target.identifier === breakpoint.context.identifier\n    //     && ! breakpoint.broken.has(reduction.target)\n    // ) {\n    //   return true\n    // }\n    // if (reduction.type === breakpoint.type\n    //     && reduction instanceof Expansion && breakpoint.context instanceof Macro\n    //     && reduction.target.identifier === breakpoint.context.identifier\n    //     && ! breakpoint.broken.has(reduction.target)\n    // ) {\n    //   return true\n    // }\n  \n    return false\n  }\n\n  // THROWS Exceptions\n  parseExpression (expression : string, macrotable : MacroMap) : AST {\n    console.log('parsing expression ', expression)\n    // const { macrotable } = this.props.macroContext\n    console.log('my macrotable ', macrotable)\n\n    const { SLI : singleLetterVars } = this.props.state\n\n    const tokens : Array<Token> = tokenize(expression, { lambdaLetters : ['λ'], singleLetterVars, macromap : macrotable })\n    const ast : AST = parse(tokens, macrotable) // macroTable\n\n    return ast\n  }\n}","import React, { ChangeEvent } from 'react'\nimport { UntypedLambdaSettings, EvaluationStrategy, SettingsEnabled } from './Types'\n\nimport './styles/Settings.css'\n\n// const { Switch, Radio } = require('pretty-checkbox-react')\n\n\ninterface Props {\n  settings : UntypedLambdaSettings\n  settingsEnabled : SettingsEnabled\n\n  change : (settings : UntypedLambdaSettings) => void\n}\n\nexport default function Settings (props : Props) : JSX.Element {\n  const { settings, change, settingsEnabled } : Props = props\n  const { SLI, expandStandalones, strategy, SDE } : UntypedLambdaSettings = settings\n  const { SLI : SLI_E, expandStandalones : expSt_E, strategy : strat_E } : SettingsEnabled = settingsEnabled\n\n\n  // this is just a dirty-quick implementation to get an unique identifier\n  const array = new Uint32Array(2)\n  window.crypto.getRandomValues(array)\n  const uniq : string = `${Date.now()}-${Math.random()}-${array[0]}-${array[1]}`\n\n  return (\n    <div className='untyped-lambda-box--settings'>\n      {/* <h3>Untyped Lambda Calculus</h3> */}\n\n      {\n        SLI_E ?\n          <span\n            className='untyped-lambda-settings-SLI'\n            title='Single Letters as Names without Spaces'>\n            <input\n              id={ `untyped-lambda-settings--SLI-${uniq}` }\n              type='checkbox'\n              checked={ SLI }\n              disabled={ false } // TODO: tohle bude rozhodne chtit prepsat\n              // shape=\"fill\"\n              \n              onChange={\n                (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n                  change({ ...settings, SLI : e.target.checked })\n              }\n            />\n            <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--SLI-${uniq}` }>\n              Single Letter Names\n            </label>\n          </span>\n        :\n          null\n      }\n\n      {\n        <span\n          className='untyped-lambda-settings-SDE'\n          title='Simplified Evaluation'>\n          <input\n            id={ `untyped-lambda-settings--SDE-${uniq}` }\n            type='checkbox'\n            checked={ SDE }\n            disabled={ false }\n            // shape=\"fill\"\n            \n            onChange={\n              (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n                change({ ...settings, SDE : e.target.checked })\n            }\n          />\n          <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--SDE-${uniq}` }>\n            Simplified Evaluation\n          </label>\n        </span>\n      }\n\n      {\n        expSt_E && false ? // hiding this out - I am not sure what this should be in the first place\n          <span\n            className='untyped-lambda-settings-expand'\n            title='Expand Numbers and Macros at the End'>\n            <input\n              id={ `untyped-lambda-settings--expand-${uniq}` }\n              type='checkbox'\n              checked={ expandStandalones }\n              disabled={ false } // TODO: tohle bude rozhodne chtit prepsat\n              // shape=\"fill\"\n              \n              onChange={\n                (e : ChangeEvent<HTMLInputElement>) => {\n                  // tady nejakej destructuring\n                  change({ ...settings, expandStandalones : e.target.checked })\n                }\n              }\n            />\n            <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--expand-${uniq}` }>\n              Expand Macros and Numbers at the End\n            </label>\n          </span>\n        :\n          null\n      }\n\n      {\n        strat_E ?\n          <div className='untyped-lambda-settings-strategies inlineblock'>\n            <p className='stratsLabel inlineblock'>Evaluation Strategies:</p>\n            {/* <span className='untyped-lambda-settings--strategy-radio-wrapper'>\n              <input\n                id={ `untyped-lambda-settings--simplified-strategy-${uniq}` }\n                type='radio'\n                name={ `untyped-lambda-settings--strategy-${uniq}` }\n                // style=\"fill\"\n                checked={\n                  strategy === EvaluationStrategy.ABSTRACTION\n                }\n                \n                onChange={\n                  () => change({ ...settings, strategy : EvaluationStrategy.ABSTRACTION })\n                }\n              />\n              <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--simplified-strategy-${uniq}` }>\n                Simplified\n              </label>\n            </span> */}\n\n            <span className='untyped-lambda-settings--strategy-radio-wrapper'>\n              <input\n                id={ `untyped-lambda-settings--normal-strategy-${uniq}` }\n                type='radio'\n                name={ `untyped-lambda-settings--strategy-${uniq}` }\n                // style=\"fill\"\n                checked={\n                  strategy === EvaluationStrategy.NORMAL\n                }\n\n                onChange={\n                  () => change({ ...settings, strategy : EvaluationStrategy.NORMAL })\n                }\n              />\n              <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--normal-strategy-${uniq}` }>\n                Normal\n              </label>\n            </span>\n\n            <span className='untyped-lambda-settings--strategy-radio-wrapper'>\n              <input\n                id={ `untyped-lambda-settings--applicative-strategy-${uniq}` }\n                type='radio'\n                name={ `untyped-lambda-settings--strategy-${uniq}` }\n                // style=\"fill\"\n                checked={\n                  strategy === EvaluationStrategy.APPLICATIVE\n                }\n                \n                onChange={\n                  () => change({ ...settings, strategy : EvaluationStrategy.APPLICATIVE })\n                }\n              />\n              <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--applicative-strategy-${uniq}` }>\n                Applicative\n              </label>\n            </span>\n          </div>\n        :\n          null\n    }\n    </div>\n  )\n}","import React from 'react'\n\nimport Editor from '../components/Editor'\nimport { UntypedLambdaExpressionState } from './Types'\n\nimport './styles/EmptyExpression.css'\n\ninterface EmptyExpressionProps {\n  className : string\n  isActive : boolean\n  isMinimized : boolean\n  state : UntypedLambdaExpressionState\n  editor : {\n    placeholder : string\n    content : string\n    syntaxError : Error | null\n  }\n\n  onContent (content : string) : void\n  onDebug () : void\n  onExercise () : void\n  setBoxState (box : UntypedLambdaExpressionState) : void\n}\n\n\nexport default function EmptyExpression(props : EmptyExpressionProps) : JSX.Element{\n  const { className, isActive, editor, isMinimized /*, state  */ } = props\n  const {\n    placeholder,\n    content,\n    syntaxError,\n  } = editor\n  // const { SDE, strategy, SLI } = state\n\n  // this is just a dirty-quick implementation to get an unique identifier\n  const array = new Uint32Array(2)\n  window.crypto.getRandomValues(array)\n  // const uniq : string = `${Date.now()}-${Math.random()}-${array[0]}-${array[1]}`\n\n  // const makeActive = useContext(MakeActiveContext)\n  // const deleteBox = useContext(DeleteBox)\n\n  return (\n    <div\n      className={ `${className} ${isActive ? '' : ' inactiveBox'}` }\n    >\n      {\n        ! isMinimized ?\n          (\n            <div>\n              <Editor\n                placeholder={ placeholder } // data\n                content={ content } // data\n                syntaxError={ syntaxError } // data\n                submitOnEnter={ false } // data\n                shouldReplaceLambda={ true }\n\n                onContent={ props.onContent } // fn\n                onEnter={ () => void 0 } // fn\n                onCtrlEnter={ props.onDebug }\n                onShiftEnter={ props.onExercise }\n                onExecute={ () => void 0 } // fn\n              />\n\n              <div className='debug-controls'>\n                <button\n                  title='Debug this Expression in the Evaluator (Ctrl + Enter)'\n                  type=\"button\"\n                  className='open-as-debug btn'\n                  onClick={ props.onDebug }\n                >\n                  <span\n                    className='untyped-lambda--submit-expression--btn-label'\n                  >\n                    Debug\n                  </span>\n                </button>\n                \n                <button\n                  title='Exercise this Expression Yourself (Shift + Enter)'\n                  type=\"button\"\n                  className='open-as-exercise btn'\n                  onClick={ props.onExercise }\n                >\n                  <span className='untyped-lambda--submit-expression--btn-label'>Exercise</span>\n                </button>\n                \n              </div>\n            </div>\n          )\n          :\n          (\n            <div>\n              <p className='inactiveMessage'>\n                Collapsing Empty Expression Box. Click to activate this box.\n              </p>\n            </div>\n          )\n      }\n\n\n      {/* <div\n        className='untyped-lambda--pick-strategy untyped-lambda-settings-strategies inlineblock'\n        style={ { height: '2.5em' } }\n      >\n        <p className='stratsLabel inlineblock'>Strategy:</p>\n        <span className='untyped-lambda-settings--strategy-radio-wrapper'>\n          <input\n            id={ `untyped-lambda-settings--normal-strategy-${uniq}` }\n            type='radio'\n            name={ `untyped-lambda-settings--strategy-${uniq}` }\n            // style=\"fill\"\n            checked={\n              strategy === EvaluationStrategy.NORMAL\n            }\n\n            onChange={\n              () => setBoxState({ ...state, strategy : EvaluationStrategy.NORMAL })\n            }\n          />\n          <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--normal-strategy-${uniq}` }>\n            Normal\n          </label>\n        </span>\n\n        <span className='untyped-lambda-settings--strategy-radio-wrapper'>\n          <input\n            id={ `untyped-lambda-settings--applicative-strategy-${uniq}` }\n            type='radio'\n            name={ `untyped-lambda-settings--strategy-${uniq}` }\n            // style=\"fill\"\n            checked={\n              strategy === EvaluationStrategy.APPLICATIVE\n            }\n            \n            onChange={\n              () => setBoxState({ ...state, strategy : EvaluationStrategy.APPLICATIVE })\n            }\n          />\n          <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--applicative-strategy-${uniq}` }>\n            Applicative\n          </label>\n        </span>\n      </div> */}\n\n      {/* Here add SDE switch/checkbox */}\n      {/* {\n        <span\n          className='untyped-lambda-settings-SDE-'\n          title='Simplified Evaluation'>\n          <input\n            id={ `untyped-lambda-settings--SDE-${uniq}` }\n            type='checkbox'\n            checked={ SDE }\n            disabled={ false }\n            // shape=\"fill\"\n            \n            onChange={\n              (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n                setBoxState({ ...state, SDE : e.target.checked })\n            }\n          />\n          <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--SDE-${uniq}` }>\n            Simplified Evaluation\n          </label>\n        </span>\n      } */}\n\n      {/* <span\n        className='untyped-lambda-settings-SLI-'\n        title='Single Letters as Names without Spaces'>\n        <input\n          id={ `untyped-lambda-settings--SLI-${uniq}` }\n          type='checkbox'\n          checked={ SLI }\n          disabled={ false } // TODO: tohle bude rozhodne chtit prepsat\n          // shape=\"fill\"\n          \n          onChange={\n            (e : ChangeEvent<HTMLInputElement>) => // tady nejakej destructuring\n              setBoxState({ ...state, SLI : e.target.checked })\n          }\n        />\n        <label className='untyped-lambda-settings-label' htmlFor={ `untyped-lambda-settings--SLI-${uniq}` }>\n          Single Letter Names\n        </label>\n      </span> */}\n  </div>\n  )\n}","import React, { PureComponent } from 'react'\n\nimport { BoxType } from '../Types'\nimport { UntypedLambdaState, UntypedLambdaType, UntypedLambdaSettings, PromptPlaceholder, StepMessage, StepValidity } from './Types'\nimport ExpressionBox from './ExpressionBox'\n// import Macro from './Macro'\nimport MacroList from './MacroList'\nimport { UNTYPED_LAMBDA_INTEGRATION_STATE, GLOBAL_SETTINGS_ENABLER, strategyToEvaluator, findSimplifiedReduction, toMacroMap } from './AppTypes'\nimport ExerciseBox from './ExerciseBox'\nimport Settings from './Settings'\nimport EmptyExpression from './EmptyExpression'\nimport { reportEvent } from '../misc'\nimport { None, Evaluator, Token, tokenize, parse, AST, OptimizeEvaluator, MacroMap } from '@lambdulus/core'\n\n// import macroctx from './MacroContext'\n\n\ninterface Props {\n  state : UntypedLambdaState\n  isActive : boolean\n  isFocused : boolean\n\n  setBoxState (state : UntypedLambdaState) : void\n  addBox (box : UntypedLambdaState) : void\n}\n\nexport default class UntypedLambdaBox extends PureComponent<Props> {\n  render () {\n    const { state, isActive, isFocused, setBoxState, addBox } : Props = this.props\n    const { settingsOpen, subtype, macrolistOpen, SLI, expandStandalones, strategy, SDE, editor, minimized } : UntypedLambdaState = state\n\n\n    const renderBoxContent = () => {\n      switch (subtype) {\n        case UntypedLambdaType.EMPTY:\n          return (\n            <EmptyExpression\n              className='box boxEval'\n              isActive={ isActive }\n              isMinimized={ minimized }\n              editor={ editor }\n              state={ state }\n              onContent={(content : string) =>\n                setBoxState({\n                  ...state,\n                  editor : {\n                    ...state.editor,\n                    content,\n                    syntaxError : null,\n                  }\n                })\n              }\n              onDebug={ () => this.onSubmitExpression(UntypedLambdaType.ORDINARY) }\n              onExercise={ () => this.onSubmitExpression(UntypedLambdaType.EXERCISE) }\n              setBoxState={ setBoxState }\n            />\n          )\n  \n        case UntypedLambdaType.ORDINARY:\n          return (\n            <ExpressionBox\n              state={ state }\n              isActive={ isActive }\n              isFocused={ isFocused }\n              macroContext={ UNTYPED_LAMBDA_INTEGRATION_STATE }\n              setBoxState={ setBoxState }\n              addBox={ addBox }\n            />\n          )\n        \n        case UntypedLambdaType.EXERCISE:\n          return (\n            <ExerciseBox\n              state={ state }\n              isActive={ isActive }\n              isFocused={ isFocused }\n              macroContext={ UNTYPED_LAMBDA_INTEGRATION_STATE }\n              setBoxState={ setBoxState }\n              addBox={ addBox }\n            />\n          )\n      }\n    }\n\n    return (\n      <div\n        ref={ (elem : any) => {\n          // This is just temporary\n          // should be replaced with much finer logic\n          // like: store ref to the state and then scroll to the part of the Box which should be visible\n          // depending on the action user just did\n          // for now - it will do\n          if (elem !== null && isActive) {\n            const boundingRect = elem.getBoundingClientRect()\n            const viewportHeight : number = window.innerHeight\n            if (boundingRect.bottom > viewportHeight) {\n              elem.scrollIntoView(false)\n            }\n          }\n        } }\n      >\n        {\n          settingsOpen ?\n            <div className='box-settings'>\n              Settings:\n              <Settings\n                settings={ { type : BoxType.UNTYPED_LAMBDA, SLI, expandStandalones, strategy, SDE } }\n                settingsEnabled={ GLOBAL_SETTINGS_ENABLER }\n\n                change={ (settings : UntypedLambdaSettings) => {\n                  setBoxState({\n                    ...state,\n                    ...settings\n                  })\n                } }\n              />\n            </div>\n          :\n            null\n        }\n        {\n          macrolistOpen ?\n            <div className='untyped-lambda-box--macrolist'>\n              <MacroList macroTable={ state.macrotable }  />\n            </div>\n          :\n            null\n        }\n\n        <div>\n          { renderBoxContent() }\n        </div>\n\n      </div>\n    )\n  }\n\n  onSubmitExpression (subtype : UntypedLambdaType) : void {\n    const { state, setBoxState } = this.props\n    const {\n      editor : { content },\n      strategy,\n      SDE,\n      SLI,\n    } = state\n\n    try {\n      const definitions : Array<string> = content.split(';')\n      const expression : string = definitions.pop() || \"\"\n      const macromap : MacroMap = toMacroMap(definitions, SLI)\n\n      const ast : AST = this.parseExpression(expression, macromap)\n\n      let message : StepMessage = { validity : StepValidity.CORRECT, userInput : '', message : '' }\n      let isNormal = false\n\n      const astCopy : AST = ast.clone()\n\n      const nextReduction = (() => {\n        if (SDE) {\n          return findSimplifiedReduction(astCopy, strategy, macromap)[0]\n        }\n        else {\n          const evaluator : Evaluator = new (strategyToEvaluator(strategy) as any)(astCopy)\n          return evaluator.nextReduction\n        }\n      })()\n\n      \n      if (nextReduction instanceof None) {\n        const etaEvaluator : Evaluator = new OptimizeEvaluator(ast)\n\n        if (etaEvaluator.nextReduction instanceof None) {\n          isNormal = true\n          message.message = 'Expression is in normal form.'\n          reportEvent('Evaluation Step', 'Step Normal Form Reached', ast.toString())\n        }\n      }\n\n      setBoxState({\n        ...state,\n        settingsOpen : false,\n        ast,\n        subtype,\n        expression : content,\n        macrotable : macromap,\n        history : [ {\n          ast : ast.clone(),\n          lastReduction : new None(),\n          step : 0,\n          message,\n          isNormalForm : isNormal,\n          exerciseStep : false,\n        } ],\n        editor : {\n          content : content,\n          placeholder : PromptPlaceholder.EVAL_MODE,\n          syntaxError : null,\n        }\n      })\n\n      reportEvent('Submit Expression', 'submit valid', content)\n    } catch (exception) {\n      let errorMessage : string = \"Something is wrong with your expression. Please inspect it closely.\"\n      console.error((exception as Error).toString())\n\n      // if (errorMessage === \"Error\") {\n        if (content.match(/:=/g)?.length !== content.match(/;/g)?.length) {\n          errorMessage = \"Did you forget to write a semicolon after the Macro definition?\"\n        }\n        if (content.match(/\\s*;\\s*$/g)) {\n          errorMessage = \"There's a semicolon at the end.\"\n        }\n      // }\n\n      setBoxState({\n        ...state,\n        editor : {\n          ...state.editor,\n          syntaxError : new Error(errorMessage),\n        }\n      })\n\n      reportEvent('Submit Expression', 'submit invalid', content)\n    }\n  }\n\n  // THROWS Exceptions\n  parseExpression (expression : string, macrotable : MacroMap) : AST {\n    // const { macroTable } = this.props\n\n    const { SLI : singleLetterVars } = this.props.state\n\n    const tokens : Array<Token> = tokenize(expression, { lambdaLetters : ['λ'], singleLetterVars, macromap : macrotable })\n    const ast : AST = parse(tokens, macrotable) // macroTable\n\n    return ast\n  }\n\n}","import React from 'react'\n\nimport 'github-markdown-css/github-markdown-light.css'\nimport { NoteState } from './AppTypes'\nimport Editor from '../components/Editor'\n\nimport './styles/Note.css'\n\nimport ReactMarkdown from 'react-markdown'\n\nexport interface NoteProperties {\n  state : NoteState\n  isActive : boolean\n  isFocused : boolean\n\n  setBoxState (state : NoteState) : void\n}\n\nexport default function Note (props : NoteProperties) : JSX.Element {\n  const {\n    state : {\n      note,\n      editor : { placeholder, content, syntaxError },\n      isEditing,\n    },\n    isActive,\n    setBoxState,\n  } = props\n  \n  const onContent = (content : string) => {\n    setBoxState({\n      ...props.state,\n      note : content,\n      editor : {\n        ...props.state.editor,\n        content,\n        syntaxError : null,\n      }\n    })\n    // this.updateURL(expression) // tohle musim nejak vyresit - mozna ta metoda setBoxState v APP bude checkovat propisovat do URL\n  }\n\n    if (isEditing) { // TODO: isFocused removed just for now\n    return (\n      <div className='box boxNoteEditor'>\n        <Editor\n          placeholder={ placeholder } // data\n          content={ content } // data\n          syntaxError={ syntaxError } // data\n          submitOnEnter={ false } // data\n          shouldReplaceLambda={ false }\n          \n          onContent={ onContent } // fn\n          onEnter={ () => void 0 } // fn\n          onCtrlEnter={ () => void 0 }\n          onShiftEnter={ () => void 0 }\n          onExecute={ () => {} } // fn\n          // onReset={ this.onClear } // fn not yet\n        />\n      </div>\n    )\n  }\n\n\n  return (\n    <div\n      className='box boxNote'\n      onClick={ () => \n        isActive &&\n        setBoxState({\n        ...props.state,\n        isEditing : true,\n      }) }\n    >\n      <ReactMarkdown className='markdown-body'>\n        { note }\n      </ReactMarkdown>\n    </div>\n  )\n}","import React from 'react'\n\nexport default function Empty (props : {}) : JSX.Element {\n  return (\n    <div>\n      Empty Box\n    </div>\n  )\n}","import React from 'react'\n\n// import Evaluator from './ExpressionBox'\n// import MacroDefinition from './MacroDefinition'\n// import Note from './Note'\n// import { MacroTableContext } from './EvaluatorSpace'\n// import { SetBoxContext } from './BoxSpace'\nimport { BoxType, BoxState } from '../Types'\n\nimport { UntypedLambdaState } from '../untyped-lambda-integration/Types'\n\nimport UntypedLambdaBox from '../untyped-lambda-integration/UntypedLambdaBox'\n\nimport { NoteState } from '../markdown-integration/AppTypes'\nimport Note from '../markdown-integration/Note'\n\nimport Empty from '../empty-integration'\n\n// import { BoxState } from '../AppTypes'\n\ninterface BoxProperties {\n  state : BoxState\n  isActive : boolean\n  isFocused : boolean\n\n  updateBoxState (box : BoxState) : void\n  addBoxAfter (box : BoxState) : void\n}\n\nexport default function Box (props : BoxProperties) : JSX.Element {\n  const { state, isActive, isFocused, updateBoxState, addBoxAfter } : BoxProperties = props\n  const { type } = state\n\n  // const macroTable = useContext(MacroTableContext)\n  // const setBoxState = useContext(SetBoxContext)\n\n\n  if (type === BoxType.UNTYPED_LAMBDA) {\n    return (\n      <UntypedLambdaBox\n        state={ state as UntypedLambdaState }\n        isActive={ isActive }\n        isFocused={ isFocused }\n        // macroTable={ macroTable }\n        \n        setBoxState={ updateBoxState }\n        addBox={ addBoxAfter }\n      />\n    )\n  }\n  if (type === BoxType.MARKDOWN) {\n    return (\n      <Note\n        state={ state as NoteState }\n        isActive={ isActive }\n        isFocused={ isFocused }\n\n        setBoxState={ updateBoxState }\n      />\n    )\n  }\n  else {\n    return (\n      <Empty />\n    )\n  }\n\n  // if (type === BoxType.MACRO) {\n  //   return (\n  //     <div className=''>\n  //       <MacroDefinition\n  //         state={ state as MacroDefinitionState }\n  //         setBoxState={ setBoxState }\n\n  //         // addBox={ addBox }\n  //       />\n  //     </div>\n  //   )\n  // }\n\n}","import React, { MouseEvent } from 'react'\n\nimport { UntypedLambdaState } from './Types'\nimport { BoxState } from '../Types'\n\nimport './styles/BoxTopBar.css'\n\n\ninterface Props {\n  state : UntypedLambdaState\n  isActive : boolean\n  removeBox : (e : MouseEvent) => void\n  updateBoxState : (box : BoxState) => void\n}\n\n\nexport default function BoxTopBar (props : Props) : JSX.Element {\n  const { state, updateBoxState } = props\n  const { macrolistOpen } = state\n\n  return (\n    <div className=''>\n\n      <div\n        onClick={ (e) => {\n          e.stopPropagation()\n          updateBoxState({ ...state, macrolistOpen : ! macrolistOpen })\n        } }\n        className={ `untyped-lambda--top-bar-custom--button ${macrolistOpen ? 'menu-pressed-open' : ''}` }\n        title={ macrolistOpen ? 'Hide Macros' : 'Show All Macros for This Box' }\n      >\n        <i className=\"mini-icon fas fa-list-ul\" />\n      </div>\n\n      {/* {\n        expression === '' ?\n          null\n        :\n        <Controls\n          isExercise={ isExercise }\n          makeExercise={ () =>\n            updateBoxState({\n              ...state,\n              isExercise : true,\n              editor: {\n                ...state.editor,\n                placeholder : PromptPlaceholder.VALIDATE_MODE,\n              },\n            })\n          }\n          endExercise={ () =>\n            updateBoxState({\n              ...state,\n              isExercise : false,\n              editor: {\n                ...state.editor,\n                placeholder : PromptPlaceholder.EVAL_MODE,\n              },\n            })\n          }\n        />\n      } */}\n\n      {/* <i\n        className='removeBox far fa-trash-alt'\n        onClick={ removeBox }\n        title='Remove this Box'\n      /> */}\n\n      {/* {\n        state.minimized ?\n          <i\n            className=\"imizeBox fas fa-sort-down\"\n            onClick={ (e : MouseEvent) => {\n              e.stopPropagation()\n              updateBoxState({ ...state, minimized : false })\n            } }\n            title='Expand this Box'\n          />\n          :\n          <i\n            className=\"imizeBox fas fa-sort-up\"\n            onClick={ (e : MouseEvent) => {\n              e.stopPropagation()\n              updateBoxState({ ...state, minimized : true })\n            } }\n            title='Collapse this Box'\n          />\n      } */}\n    </div>\n  )\n}","import React, { MouseEvent } from 'react'\n\nimport { NoteState } from './AppTypes'\n\nimport 'pretty-checkbox'\nimport './styles/EditingSwitch.css'\nimport { BoxState } from '../Types'\n\ninterface Props {\n  state : NoteState\n  isActive : boolean\n  removeBox : (e : MouseEvent) => void\n  updateBoxState : (box : BoxState) => void\n}\n\n\nexport default function BoxTopBar (props : Props) : JSX.Element {\n  const { state, updateBoxState } = props\n  const { isEditing } = state\n\n  return (\n    <div className=''>\n      {\n      // TODO: Remove This\n      /* <div className='topBarTitle' contentEditable={ true } suppressContentEditableWarning={true} onBlur={ (e) => updateBoxState({ ...state, title : e.target.textContent || \"\" }) }>\n        { title === \"\" ? \"Click Here to Change the Title\" : title }\n      </div> */}\n      <div className='markdown-controls' title='Edit as Markdown'>\n        \n        {/* This will be separated into it's own component */}\n        <div className='markdown-editing'>\n          <span\n            className={ `markdown-write ${isEditing ? 'markdown-selected' : ''}` }\n            onClick={ (e) => {\n              e.stopPropagation()\n              if (isEditing === false) {\n                updateBoxState({ ...state, isEditing : true})\n              }\n            } }\n          >\n            Edit\n          </span>\n          <span\n            className={ `markdown-preview ${isEditing ? '' : 'markdown-selected'}` }\n            onClick={ (e) => {\n              e.stopPropagation()\n              if (isEditing === true) {\n                updateBoxState({ ...state, isEditing : false})\n              }\n            } }\n          >\n            Preview\n          </span>\n        </div>\n      </div>\n\n      {/* <i\n        className='removeBox far fa-trash-alt'\n        onClick={ removeBox }\n        title='Remove this Box'\n      /> */}\n    </div>\n  )\n}","import React from 'react'\n\nexport default function EmptyTopBar (props : {}) : JSX.Element {\n  return (\n    <div></div>\n  )\n}","import React, { Component, MouseEvent } from 'react'\nimport { BoxType, BoxState, GlobalSettings, BoxesWhitelist } from '../Types'\nimport UntypedLambdaBTB from '../untyped-lambda-integration/BoxTopBar'\nimport { UntypedLambdaState } from '../untyped-lambda-integration/Types'\n\nimport MarkdownBTB from '../markdown-integration/BoxTopBar'\nimport { NoteState } from '../markdown-integration/AppTypes'\n\nimport EmptyBTB from '../empty-integration/BoxTopBar'\n\nimport '../styles/BoxTopBar.css'\nimport { resetUntypedLambdaBox } from '../untyped-lambda-integration/AppTypes'\n\n\ntype BoxPlace = 'before' | 'after'\n\ninterface Props {\n  state : BoxState\n  isActive : boolean\n  isFocused : boolean\n  removeBox : (e : MouseEvent) => void\n  updateBoxState : (box : BoxState) => void\n  addBoxBefore : (box : BoxState) => void\n  addBoxAfter : (box : BoxState) => void\n  settings : GlobalSettings\n  whiteList : BoxesWhitelist\n}\n\ninterface State {\n  where : BoxPlace | null\n  menuOpen : boolean\n  shareLinkOpen : boolean\n}\n\n\nexport default class BoxTitleBar extends Component<Props, State> {\n\n  constructor (props : Props) {\n    super(props)\n\n    this.state = {\n      where : null,\n      menuOpen : false,\n      shareLinkOpen : false,\n    }\n  }\n\n  render () : JSX.Element {\n    const { state, isActive, updateBoxState, removeBox } : Props = this.props\n    const { type, title, minimized } = state\n\n    const { shareLinkOpen } : State = this.state\n\n    return (\n      <div className='boxTopBar'\n        onClick={ (e) => e.stopPropagation() }\n      >\n        <div\n          className='topBarTitle'\n        >\n          <span\n                className='box-top-bar--title-text'\n                contentEditable={ true }\n                suppressContentEditableWarning={true}\n                onClick={ (e) => {\n                  // NOTE: this is really ugly and dangerous quick fix\n                  // I am trying to fix a bug where for some reason markdown boxes, when clicked into title\n                  // it causes focus, then immidiately it loses focus\n                  // so now, when I click in the title, I won't make it active at all\n                  e.stopPropagation()\n                } }\n                onBlur={ (e) => updateBoxState({ ...state, title : e.target.textContent || \"\" })  }\n              >\n              { title }\n          </span>\n        </div>\n\n        <div className='box-top-bar-custom'>\n          {\n            (type === BoxType.UNTYPED_LAMBDA) ? \n              (\n                <UntypedLambdaBTB\n                  state={ state as UntypedLambdaState }\n                  isActive={ isActive }\n                  removeBox={ removeBox }\n                  updateBoxState={ updateBoxState }\n                />\n              )\n            :\n            (type === BoxType.MARKDOWN) ?\n              (\n                <MarkdownBTB\n                  state={ state as NoteState }\n                  isActive={ isActive }\n                  removeBox={ removeBox }\n                  updateBoxState={ updateBoxState }\n                />\n              )\n            :\n              (\n                <EmptyBTB />\n              )\n          }\n\n        </div>\n        <div className='box-top-bar-controls'>\n          <div\n              className='box-top-bar--controls-item'\n              onClick={ removeBox }\n              title='Delete this Box from the Notebook'\n            >\n              <i\n                className='mini-icon far fa-trash-alt'\n              />\n            </div>\n          \n          {\n            type !== BoxType.MARKDOWN ?\n            <div\n              onClick={ (e) => {\n                e.stopPropagation()\n                updateBoxState({ ...state, minimized : ! minimized })\n              } }\n              className='box-top-bar--controls-item'\n              title={ minimized ? 'Expand this Box' : 'Collapse this Box' }\n            >\n              {\n                minimized ?\n                  <i className=\"mini-icon fas fa-expand\" />\n                :\n                  <i className=\"mini-icon fas fa-compress\" />\n              }\n            </div>\n            :\n              null\n          }\n\n          {\n            type !== BoxType.MARKDOWN ?\n              <div\n                className='box-top-bar--controls-item'\n                title=\"Open this Boxs' settings\"\n                onClick={ (e) => {\n                  e.stopPropagation()\n                  updateBoxState({ ...state, settingsOpen : ! state.settingsOpen })\n                }}\n              >\n                <i className=\"mini-icon fas fa-cogs\"/>\n              </div>\n            :\n            null\n          }\n\n          <div\n            className='box-top-bar--controls-item'\n            onClick={ (e) => {\n              e.stopPropagation()\n              this.setState({ shareLinkOpen : true })\n              const searchParams : URLSearchParams = new URL(window.document.location.toString()).searchParams\n\n              searchParams.set('type', state.type)\n\n              if (state.type === BoxType.UNTYPED_LAMBDA) {\n                const macros = encodeURI(JSON.stringify((state as UntypedLambdaState).macrotable))\n                searchParams.set('source', encodeURI((state as UntypedLambdaState).ast?.toString() || (state as UntypedLambdaState).editor.content))\n                searchParams.set('macros', macros)\n              }\n              else {\n                searchParams.set('source', encodeURI((state as any).editor.content)) // todo: fix that `as any`\n              }\n\n              if (state.type === BoxType.UNTYPED_LAMBDA) {\n                searchParams.set('subtype', (state as UntypedLambdaState).subtype)\n                searchParams.set('strategy', (state as UntypedLambdaState).strategy)\n                searchParams.set('SDE', (state as UntypedLambdaState).SDE.toString())\n                searchParams.set('SLI', (state as UntypedLambdaState).SLI.toString())\n              }\n\n              const url : string = window.location.host + '?' + searchParams.toString()\n\n              navigator.clipboard.writeText(url)\n\n              setTimeout(() => this.setState({ shareLinkOpen : false, menuOpen : false }), 1500)\n\n            } }\n            title='Copy the link to this Expression.'\n          >\n            <i className=\"mini-icon fas fa-share-alt-square\"></i>\n          </div>\n\n          <div\n            className='box-top-bar--controls-item'\n            onMouseDownCapture={ e => {\n              e.preventDefault()\n              e.stopPropagation()\n            } }\n            // ^^^ this function is just a dirty quick bug fix\n            // when you are editing and click on the edit button again\n            // on the mouse down - the box loses focus and then on mouse up\n            // the onClick is finished and it is then again focused\n            // so the result looks awkward\n            // the previous line is a black hole for the mousedown event\n            // that way it can't cause losing focus for the box, because it is stoped\n            onClick={ (e) => {\n              console.log('clicked on the EDIT button')\n              e.stopPropagation()\n\n              switch (type) {\n                case BoxType.UNTYPED_LAMBDA: {\n                  const resetState : UntypedLambdaState = resetUntypedLambdaBox(state as UntypedLambdaState)\n                  const content : string = (state as UntypedLambdaState).expression || (state as UntypedLambdaState).editor.content\n\n                  updateBoxState({\n                    ...resetState,\n                    editor : {\n                      ...resetState.editor,\n                      content, \n                    }\n                  })\n                  break\n                }\n                case BoxType.MARKDOWN: {\n                  updateBoxState({ ...state, isEditing : true })\n                  break\n                }\n              }\n              this.setState({ menuOpen : false })\n            } }\n            title='Edit this Expression.'\n          >\n            <i className=\"mini-icon far fa-edit\"></i>\n          </div>\n        </div>\n\n        {\n          shareLinkOpen ?\n            <p className='box-top-bar--menu-item--notif'>\n              Link Copied!\n            </p>\n            :\n            null\n        }\n\n      </div>\n      )\n    }\n\n}","import React, { MouseEvent, Component } from 'react'\nimport { mapBoxTypeToStr } from '../Constants'\nimport Box from './Box'\nimport BoxTitleBar from './BoxTitleBar'\nimport { BoxState, GlobalSettings, BoxesWhitelist } from '../Types'\n\nimport \"../styles/BoxContainer.css\"\nimport PickBoxTypeModal from './PickBoxTypeModal'\n\n\ninterface Props {\n  isActiveBox : boolean\n  isFocusedBox : boolean\n  box : BoxState\n\n  makeActive : () => void\n  onBlur : () => void\n  updateBoxState : (state : BoxState) => void\n  removeBox : () => void\n  addBoxBefore : (state : BoxState) => void\n  addBoxAfter : (state : BoxState) => void\n  settings : GlobalSettings\n  whiteList : BoxesWhitelist\n}\n\ninterface State {\n  modalOpen : boolean\n}\n\nexport class BoxContainer extends Component<Props, State> {\n  constructor (props: Props) {\n    super(props)\n\n    this.state = {\n      modalOpen : false\n    }\n  }\n\n  render () : JSX.Element {\n    const {\n      isActiveBox,\n      isFocusedBox,\n      box,\n      makeActive,\n      onBlur,\n      updateBoxState,\n      addBoxBefore,\n      addBoxAfter,\n      removeBox\n    } : Props = this.props\n  \n    const { modalOpen } = this.state\n  \n    const boxTypeClassName : string = mapBoxTypeToStr(box.type)\n  \n    return (\n      <div>\n        <div\n          className={ `boxContainer ${ isActiveBox ? 'active' : 'inactive' } ${boxTypeClassName}` }\n          onClick={ makeActive }\n          onBlur={ onBlur }\n        >\n          <BoxTitleBar\n            state={ box }\n            isActive={ isActiveBox }\n            isFocused={ isFocusedBox }\n            removeBox={ (e : MouseEvent) => {\n              e.stopPropagation()\n              removeBox()\n            } }\n            updateBoxState={ updateBoxState }\n            addBoxBefore={ addBoxBefore }\n            addBoxAfter={ addBoxAfter }\n            settings={ this.props.settings }\n            whiteList={ this.props.whiteList }\n          />\n          \n          <Box\n            state={ box }\n            isActive={ isActiveBox }\n            isFocused={ isFocusedBox }\n            updateBoxState={ updateBoxState }\n            addBoxAfter={ addBoxAfter }\n          />\n        </div>\n\n        {\n          modalOpen ?\n            <PickBoxTypeModal\n              addNew={ (box : BoxState) => {\n                this.props.addBoxAfter(box)\n                this.setState({ modalOpen : false })\n              } }\n              whiteList={ this.props.whiteList }\n              settings={ this.props.settings }\n            />\n          :\n          <div className=\"add_box_after\" onMouseDown={ () => this.setState({ modalOpen : true }) } >\n            +\n          </div>\n        }\n      </div>\n    )\n  }\n}","// This component needs to be able to specify which Boxes are allowed inside\n// It will also have other settings - maybe something like lock - if it's locked, you can not modify it\n// Exam mode will feature the build of the Frontend which will not import any of the Evaluation Boxes\n\n\nimport React, { PureComponent } from 'react'\nimport CreateBox from '../components/CreateBox'\nimport { BoxType, NotebookState, GlobalSettings, BoxState } from '../Types'\n\nimport { onMarkDownBlur, NoteState, onMarkDownActive } from '../markdown-integration/AppTypes'\nimport { BoxContainer } from '../components/BoxContainer'\n\ninterface Props {\n  state : NotebookState\n  settings : GlobalSettings\n\n  updateNotebook (notebook : Partial<NotebookState>) : void\n}\n\nexport default class Notebook extends PureComponent<Props> {\n  constructor (props : Props) {\n    super(props)\n\n    this.insertBefore = this.insertBefore.bind(this)\n    this.insertAfter = this.insertAfter.bind(this)\n    this.removeBox = this.removeBox.bind(this)\n    this.updateBoxState = this.updateBoxState.bind(this)\n    this.makeActive = this.makeActive.bind(this)\n    this.onBlur = this.onBlur.bind(this)\n    this.createBoxFromURL = this.createBoxFromURL.bind(this)\n    this.setBoxState = this.setBoxState.bind(this)\n    this.updateURL = this.updateURL.bind(this)\n  }\n\n  // componentDidMount () : void {\n  //   this.createBoxFromURL()\n  // }\n\n  render () {\n    const { state, settings } = this.props\n    const { activeBoxIndex, focusedBoxIndex, boxList, allowedBoxes } = state\n\n    return (\n      <div className=\"mainSpace\">\n        {/* TODO: This will be refactore out to standalone component. */}\n        <ul className=\"boxList UL\">\n          { boxList.map(\n            (box : BoxState, i : number) =>\n            <li className=\"LI\" key={ box.__key }>\n\n              {/* <CreateBox\n                addNew={ (box : BoxState) => this.insertBefore(i, box) }\n                whiteList={ allowedBoxes }\n                settings={ settings }\n              /> */}\n\n              <BoxContainer\n                box={ box}\n                isActiveBox={ activeBoxIndex === i}\n                isFocusedBox={ focusedBoxIndex === i }\n                addBoxBefore={ (box : BoxState) => this.insertBefore(i, box) }\n                addBoxAfter={ (box : BoxState) => this.insertAfter(i, box) }\n                makeActive={ () => this.makeActive(i) }\n                removeBox={ () => this.removeBox(i) }\n                updateBoxState={ (box : BoxState) => this.updateBoxState(i, box) }\n                onBlur={ () => this.onBlur(i) }\n                whiteList={ allowedBoxes }\n                settings={ settings }\n              />\n            </li>\n          ) }\n\n          {\n            boxList.length === 0 ?\n              <div className='top-level--create-box'>\n                <CreateBox\n                  addNew={ (box : BoxState) => this.insertBefore(state.boxList.length, box) }\n                  whiteList={ allowedBoxes }\n                  settings={ settings }\n                />\n              </div>\n            :\n            null\n          }\n        </ul>\n      </div>\n    )\n  }\n\n  /**\n   * URL params:\n   *  type : untyped-lambda | markdown | lisp | ... \n   *  specific : {\n   *    SLI : nul\n   *    strategy : normal | applicative | simplyfied\n   *  }\n   *  source : string\n   */\n  createBoxFromURL () {\n    const urlSearchParams : URLSearchParams = new URL(window.location.toString()).searchParams\n    const type : string | null = urlSearchParams.get('type')\n\n    if (type === null) {\n      return\n    }\n\n    // switch (type) {\n    //   case BoxType.UNTYPED_LAMBDA: {\n\n    //   }\n        \n    //   default:\n    //     break;\n    // }\n    \n    // console.log(window.location.toString())\n    // console.log(urlSearchParams.get('type'))\n    // console.log(urlSearchParams.get('source'))\n\n\n\n\n    // const hash : string = decodeURI(window.location.hash.substring(1))\n    // const isExercise : boolean = hash.indexOf('exercise:') !== -1\n\n    // const expression : string = isExercise ? hash.substring(9) : hash\n\n    // if (expression === '') {\n    //   // return\n    // }\n\n    // const box : BoxState = {\n    //   type : BoxType.EXPRESSION,\n    //   __key : Date.now().toString(),\n    //   expression : '',\n    //   ast : null,\n    //   history : [],\n    //   isRunning : false,\n    //   breakpoints : [],\n    //   timeoutID : undefined,\n    //   timeout : 10,\n    //   isExercise : isExercise,\n    //   strategy : this.getActiveStrategy(),\n    //   singleLetterNames : this.getActiveSingleLetterNames(),\n    //   standalones : this.getActiveStandalones(),\n    //   editor : {\n    //     placeholder : PromptPlaceholder.INIT,\n    //     content : expression,\n    //     caretPosition : expression.length,\n    //     syntaxError : null,\n    //   }\n    // }\n\n    // this.setState({\n    //   ...this.state,\n    //   submittedBoxes : [ box ],\n    //   activeBoxIndex : 0,\n    // })\n  }\n\n  setBoxState (index : number, boxState : BoxState) : void {\n    // const { submittedBoxes } = this.state\n    \n    // const expression : string = boxState.type === BoxType.EXPRESSION ? boxState.editor.content || (boxState as EvaluationState).expression : '' // TODO: DIRTY DIRTY BIG TIME\n    // const expPrefix : string = boxState.type === BoxType.EXPRESSION && (boxState as EvaluationState).isExercise ? 'exercise:' : '' \n    \n    // history.pushState({}, \"page title?\", \"#\" + expPrefix + encodeURI(expression))\n\n    // // TODO: doresit update URL // ted uz to docela dobry je\n\n    // // TODO: consider immutability\n    // submittedBoxes[index] = boxState\n\n    // this.setState({\n    //   ...this.state,\n    //   submittedBoxes,\n    // })\n\n  }\n\n  insertBefore (index : number, box : BoxState) : void {\n    const { boxList } = this.props.state\n\n    const boxListCopy = [ ...boxList ]\n\n    boxListCopy.splice(index, 0, box)\n\n    this.props.updateNotebook({ boxList : boxListCopy, activeBoxIndex : index, focusedBoxIndex : index })\n  }\n\n  insertAfter (index : number, box : BoxState) : void {\n\n    const { boxList } = this.props.state\n\n    boxList.splice(index + 1, 0, box)\n    this.props.updateNotebook({ boxList : boxList, activeBoxIndex : index + 1, focusedBoxIndex : index + 1})\n  }\n\n  removeBox (index : number) : void {\n    const { boxList, activeBoxIndex } = this.props.state\n    \n    const nearestValidIndex = (i : number) => {\n      if (i < activeBoxIndex) return activeBoxIndex - 1\n      if (i > activeBoxIndex) return activeBoxIndex\n      if (boxList.length === 1) return NaN\n      if (i === 0) return i\n      return i - 1\n    }\n\n    const newIndex : number = nearestValidIndex(index)\n\n    boxList.splice(index, 1)\n    this.props.updateNotebook({ boxList : boxList, activeBoxIndex : newIndex })\n  }\n\n  updateBoxState (index : number, box : BoxState) : void {\n    // console.log('UPDATING BOX STATE')\n    const { boxList } = this.props.state\n    boxList[index] = { ...box }\n\n    this.updateURL(box)\n\n\n    this.props.updateNotebook({ boxList : [...boxList], activeBoxIndex : index })\n  }\n\n  makeActive (index : number) : void {\n    // console.log(\"CLICKED ON               MAKE ACTIVE \" + index)\n    const { activeBoxIndex, focusedBoxIndex, boxList } = this.props.state\n\n    const currentType : BoxType = boxList[activeBoxIndex].type\n\n    switch (currentType) {\n      case BoxType.UNTYPED_LAMBDA:\n        // boxList[activeBoxIndex] = onUntypedLambdaBlur(boxList[activeBoxIndex])\n        break\n      \n      case BoxType.MARKDOWN: {\n        boxList[activeBoxIndex] = onMarkDownBlur(boxList[activeBoxIndex] as NoteState)\n        break\n      }\n\n      default:\n        break\n    }\n\n    if (index !== activeBoxIndex || index !== focusedBoxIndex || boxList[index].minimized === true) {\n      const futureType : BoxType = boxList[index].type\n\n      const patch = {\n        minimized : false,\n      }\n\n      switch (futureType) {\n        case BoxType.MARKDOWN:\n          boxList[index] = {\n            ...onMarkDownActive(boxList[index] as NoteState),\n            ...patch,\n          }\n          break\n          \n        default:\n          boxList[index] = {\n            ...boxList[index],\n            ...patch\n          }\n          break\n      }\n\n      this.updateURL(boxList[index])\n\n      this.props.updateNotebook({ activeBoxIndex : index, focusedBoxIndex : index, boxList })\n    }\n  }\n\n  onBlur (index : number) : void {\n    // TODO: I may not need onBlur handling in the future\n    // I am thinking - right now all it does is this:\n    // it un-focuses currently focused Box\n    // if this is not really needed - then maybe I should not have this feature\n    // console.log('..................................')\n    // console.log(\"                  BLUR \" + index)\n\n    const { boxList, activeBoxIndex } = this.props.state\n\n    if (activeBoxIndex !== index) {\n      return\n    }\n\n    const currentType : BoxType = boxList[index].type\n\n    switch (currentType) {\n      case BoxType.UNTYPED_LAMBDA:\n        // boxList[activeBoxIndex] = onUntypedLambdaBlur(boxList[activeBoxIndex])\n        break\n      \n      case BoxType.MARKDOWN:\n        boxList[index] = onMarkDownBlur(boxList[index] as NoteState)\n        // return // TODO: just for now\n      break\n\n      default:\n        break\n    }\n\n    this.props.updateNotebook({ boxList, focusedBoxIndex : undefined })\n  }\n\n  updateURL (box : BoxState) : void {\n    return\n    // switch (box.type) {\n    //   case BoxType.MARKDOWN : {\n    //     const searchParams : URLSearchParams = new URL(window.document.location.toString()).searchParams\n\n    //     searchParams.set('type', BoxType.MARKDOWN)\n    //     searchParams.set('source', encodeURI((box as NoteState).editor.content))\n\n    //     window.history.pushState(null, '', '?' + searchParams.toString())\n    //     break;\n    //   }\n\n    //   case BoxType.UNTYPED_LAMBDA : {\n    //     const searchParams : URLSearchParams = new URL(window.document.location.toString()).searchParams\n\n    //     searchParams.set('type', BoxType.UNTYPED_LAMBDA)\n    //     searchParams.set('source', encodeURI((box as UntypedLambdaState).editor.content))\n\n    //     window.history.pushState(null, '', '?' + searchParams.toString())\n\n    //     break;\n    //   }\n    \n    //   default:\n    //     break;\n    // }\n  }\n}","const content : string = `# User guide\n\n## Typing expressions\n#### To write lambda expression you simply type in the prompt.\n\n## Typing λ symbol\n#### If you want to write \\`λ\\` symbol inside of the Interactive Box - you simply type \\`\\\\\\` and Lambdulus will take care of the rest.\n\n#### If you need to write \\`λ\\` symbol inside of the Markdown Box - you can use \\`&lambda;\\` sequence.\n\n## Multiple expressions\n#### You can also have many submitted expressions. To submit another expression you need to either click the big \\`+\\` sign in the empty notebook, or to click on the \\`three dots\\` menu and pick whether you want to open new box before or after your current Box.\n\n## Single Letter Names (SLI)\n#### You can write lambda functions and omit whitespaces such as \\`(λabc.cba) 2 1 +\\`. To do that you have to check switch \\`Single Letter Names\\` at the top of the page.\n#### You can always override the global SLI setting for the specific Box.\n\n## Evaluation Strategies\n#### We have option to select from 3 evaluation strategies. The \\`Simplified\\` strategy is specific evaluation order which evaluates built-in macros atomicaly. The \\`Normal\\` and the \\`Applicative\\` strategies are sort of self describing.\n\n## Macros\n#### In case you need to define your own macros, you can do that in the same prompt you use to input lambda expression. Each Macro Definition consists of the name of the macro followed by \\`:=\\` symbol and the lambda expression. Note that between each macro definition and the following term (either another macro or the lambda expression to evaluate) you must put \\`;\\` as a delimiter.\n#### Also note that each Box has it's own namespace, macros in one Box are not accessible in other Boxes.\n\n## Macro Definition\n#### Inside the macro definition you can reference any valid macro which is already defined or will be defined in the future. You can, in fact, reference the same macro you are currently defining inside it's own definition - whether you should do it or not is up to you.\n\n## List All Macros\n#### If you want to list all defined macros - built-ins and also your macros - you simply click on the *list resembling* icon at the right top of the Box.\n\n## Remove User Macro\n#### To remove user macros - \\`because you can not remove built-ins\\` - you can click on the *three dots* icon at the top right part of the Box and then click on \\`Edit Expression\\`. You might also want to rewrite your lambda expression in case it references the macro being removed.\n\n## Redefine User Macro\n#### To redefine user macro - \\`because you can not redefine built-ins\\` - you start by selecting the \\`three dots\\` menu icon, picking the \\`Edit Expression\\` option and editing your macro there.\n\n## Report a Bug or Request New Features\n#### If you want to report a bug or you need some feature - click on the \\`Issues\\` button on the left or at the top of the page. Then fill in the issue on the GitHub page of the project. Definitely don't forget to check if the corresponding issue already exist.\n`\n\nexport default content\n","import React from 'react'\nimport 'github-markdown-css/github-markdown-light.css'\n\nimport guide from '../misc/UserGuide'\nimport ReactMarkdown from'react-markdown'\n\nexport default function Help (props : {}) : JSX.Element {\n  (window as any).guide = guide\n  return (\n  <div className='helpSpace'>\n    <ReactMarkdown className='markdown-body'>\n      { guide }\n    </ReactMarkdown>\n    <br />\n    <br />\n    <br />\n    { `version: ${process.env.REACT_APP_VERSION_INFO}` }\n    <br />\n    { `commit hash: ${process.env.REACT_APP_COMMIT}` }\n  </div>)\n}","import React from 'react'\n\nimport UntypedLambdaCalculusSet from '../untyped-lambda-integration/Settings'\nimport {\n  CODE_NAME as UNTYPED_CODE_NAME,\n  GLOBAL_SETTINGS_ENABLER as UNTYPED_GLOBAL_SETTINGS_ENABLER\n} from '../untyped-lambda-integration/AppTypes'\nimport { GlobalSettings } from '../Types'\nimport { UntypedLambdaSettings } from '../untyped-lambda-integration/Types'\n\n\ninterface Props {\n  settings : GlobalSettings\n  updateSettings : (settings : GlobalSettings) => void\n}\n\nexport default function SettingsScreen (props : Props) : JSX.Element {\n  const { settings, updateSettings } = props\n\n  const untypedSettings : UntypedLambdaSettings = settings[UNTYPED_CODE_NAME] as UntypedLambdaSettings\n\n  return (\n    <div className='settingsSpace'>\n      <h2>\n        Settings for Untyped Lambda Calculus:\n      </h2>\n      <UntypedLambdaCalculusSet\n        settings={ untypedSettings }\n        settingsEnabled={ UNTYPED_GLOBAL_SETTINGS_ENABLER }\n        change={\n          (unTypLSet : UntypedLambdaSettings) =>\n            updateSettings({ ...settings, [UNTYPED_CODE_NAME] : unTypLSet })\n        }\n      />\n    </div>\n  )\n}","import React from 'react'\nimport { AppState, NotebookState } from '../Types'\n\nimport '../styles/NotebookList.css'\nimport Notebook from './Notebook'\n\ninterface Props {\n  state : AppState\n\n  onSelectNotebook (index : number) : void\n  onRemoveNotebook (index : number) : void\n  onUpdateNotebook (notebook : NotebookState, index : number) : void\n  onAddNotebook (string ? : string) : void\n}\n\nexport default function NotebookList (props : Props) : JSX.Element {\n  const { state, onSelectNotebook, onRemoveNotebook, onUpdateNotebook, onAddNotebook } : Props = props\n  const { notebookList } : AppState = state\n\n  return (\n    <div className='mainSpace'>\n      <ul className='notebook-list UL'>\n        <li\n          className='LI cursor-pointer notebook-list--add-notebook cursor-pointer notebook-list--notebook'\n          onClick={ (e) => {\n            e.stopPropagation()\n            \n            const name : string | null = prompt('Please Write the Name of New Notebook')\n\n            if (name !== null) {\n              onAddNotebook(name)\n              return\n            }\n\n            // onAddNotebook() // don't add new notebook when user cancels the prompt\n          }}\n        >\n          <div className='notebook-list--add-notebook--container'>\n            <i className=\"mini-icon fas fa-plus\" />\n          </div>\n        </li>\n        {\n          notebookList.map((notebook : NotebookState, index : number) =>\n            <li className='LI cursor-pointer notebook-list--notebook' key={notebook.__key} onClick={ () => onSelectNotebook(index) }>\n              <div className='notebook-list--notebook-thumbnal'>\n                <Notebook\n                  state={ notebook }\n                  settings={ notebook.settings }\n                  updateNotebook={ () => void 0 }\n                />\n              </div>\n              <div className='notebook-list--notebook-footer'>\n                <span className='notebook-list--notebook-footer--title'>\n                  { notebook.name }\n                </span>\n                <div className='notebook-list--notebook-footer--menu'>\n                  <div\n                    onClick={ (e) => {\n                      e.stopPropagation()\n                      onUpdateNotebook({ ...notebook, menuOpen : ! notebook.menuOpen }, index)\n                    } }\n                    className={ `notebook-list--notebook--menu--dots ${notebook.menuOpen ? 'menu-pressed-open' : ''}` }\n                  >\n                    <i className=\"mini-icon fas fa-ellipsis-v\"></i>\n                  </div>\n                </div>\n              </div>\n              {\n                notebook.menuOpen ?\n                  <div\n                    className='notebook-list--notebook--menu'\n                    ref={ (elem : any) => {\n                      // just to be able to always see the menu\n                      if (elem !== null) {\n                        const boundingRect = elem.getBoundingClientRect()\n                        const viewportHeight : number = window.innerHeight\n                        if (boundingRect.bottom > viewportHeight) {\n                          elem.scrollIntoView(false)\n                        }\n                      }\n                    } }  \n                  >\n                    {/* TODO: move into ... menu */}\n                    <div\n                      className='box-top-bar--menu-item'\n                      onClick={ (e) => {\n                        e.stopPropagation()\n                        onRemoveNotebook(index)\n                      } }\n                    >\n                      Remove\n                      {/* <i\n                        className='mini-icon far fa-trash-alt'\n                        onClick={ removeBox }\n                        title='Remove this Box'\n                      /> */}\n                    </div>\n\n                    <div\n                      className='box-top-bar--menu-item'\n                      onClick={ (e) => {\n                        e.stopPropagation()\n                        const name : string | null = prompt('Please Enter New Name for the Notebook')\n\n                        if (name !== null && name !== \"\") {\n                          onUpdateNotebook({ ...notebook, name, menuOpen : false }, index)\n                        }\n                        else {\n                          onUpdateNotebook({ ...notebook, menuOpen : false }, index)\n                        }\n                      } }\n                    >\n                      Rename\n                    </div>\n                  </div>\n                :\n                null\n\n              }\n            </li>\n          )\n\n        }\n      </ul>\n    </div>\n  )\n}","import React, { Component } from 'react'\n\nimport './App.css'\n\nimport { updateSettingsInStorage, loadAppStateFromStorage, updateAppStateToStorage, updateNotebookStateToStorage, CLEAR_WORKSPACE_CONFIRMATION, loadSettingsFromStorage, initIntegrationStates, InitNotebookState, DEFAULT_WHITELIST } from './Constants'\n\nimport TopBar from './components/TopBar'\nimport MenuBar from './components/MenuBar'\nimport Notebook from './screens/Notebook'\nimport Help from './screens/Help'\nimport SettingsScreen from './screens/Settings'\nimport { Screen, AppState, NotebookState, GlobalSettings, BoxType, BoxState } from './Types'\nimport { UNTYPED_LAMBDA_INTEGRATION_STATE, createNewUntypedLambdaBoxFromSource, defaultSettings } from './untyped-lambda-integration/AppTypes'\nimport NotebookList from './screens/NotebookList'\nimport { UntypedLambdaState, UntypedLambdaSettings, EvaluationStrategy, UntypedLambdaType } from './untyped-lambda-integration/Types'\nimport { MacroTable } from '@lambdulus/core'\n\n\n\n/**\n * This is the main Application\n * in the future - when building Exam Mode - I will need to replace some part of the application components\n * if it's only some component at the top, it can be done easily\n * if it's gonna replace some deeper stuff I will need to implement some Namespace FROM which app and integrations\n * will inport parts and this Namespace will take care of that\n */\n\n\ninterface Props {}\nexport default class App extends Component<Props, AppState> {\n  constructor (props : Props) {\n    super(props)\n\n    console.log(`VERSION: ${process.env.REACT_APP_VERSION_INFO}`)\n    console.log(`COMMIT: ${process.env.REACT_APP_COMMIT}`)\n\n\n    this.state = loadAppStateFromStorage()\n\n    initIntegrationStates(this.state) // TODO: go and refactor the implementation of this fn\n\n    this.setScreen = this.setScreen.bind(this)\n    this.updateNotebook = this.updateNotebook.bind(this)\n    this.changeNotebook = this.changeNotebook.bind(this)\n    this.addNotebook = this.addNotebook.bind(this)\n    this.removeNotebook = this.removeNotebook.bind(this)\n    this.editNotebookName = this.editNotebookName.bind(this)\n    this.changeNotebookName = this.changeNotebookName.bind(this)\n    this.stopEditingNotebook = this.stopEditingNotebook.bind(this)\n    this.updateSettings = this.updateSettings.bind(this)\n    this.importNotebook = this.importNotebook.bind(this)\n    // this.importWorkspace = this.importWorkspace.bind(this)\n    this.clearWorkspace = this.clearWorkspace.bind(this)\n    this.selectNotebook = this.selectNotebook.bind(this)\n    this.updateNthNotebook = this.updateNthNotebook.bind(this)\n\n    this.createNotebookFromURL = this.createNotebookFromURL.bind(this)\n  }\n\n  componentDidMount () : void {\n    this.createNotebookFromURL()\n  }\n\n  // TODO: all of this needs to be moved to more apropriate component\n  // maybe something like Notebook or similar -- this just isn't right\n\n  // I don't think it should get moved to the component, standalone helper function would be OK\n  // OR -> split it --> there will be very simple top level abstraction implementation\n  // and according the type of the BOX - specific Integration Module will handle the actual deserialization\n  createNotebookFromURL () {\n    const urlSearchParams : URLSearchParams = new URL(window.location.toString()).searchParams\n    const type : string | null = urlSearchParams.get('type')\n\n    if (type === null) {\n      return\n    }\n\n    switch (type) {\n      case BoxType.UNTYPED_LAMBDA: {\n        const source : string | null = urlSearchParams.get('source')\n        const macros : string | null = urlSearchParams.get('macros')\n        const subtype : string | null = urlSearchParams.get('subtype')\n        const strategy : string | null = urlSearchParams.get('strategy')\n        const SDE : string | null = urlSearchParams.get('SDE')\n        const SLI : string | null = urlSearchParams.get('SLI')\n        \n        if (source === null || macros == null || subtype === null || strategy === null || SDE === null || SLI === null) {\n          return\n        }\n\n        const strat : EvaluationStrategy = EvaluationStrategy.NORMAL === strategy ? EvaluationStrategy.NORMAL : EvaluationStrategy.APPLICATIVE\n\n        const sli : boolean = SLI === 'true' ? true : false\n\n        const settings : UntypedLambdaSettings = { ...defaultSettings, strategy : strat, SDE : SDE === 'true' ? true : false, SLI : sli }\n\n        const sub : UntypedLambdaType = subtype === UntypedLambdaType.EMPTY ?\n            UntypedLambdaType.EMPTY\n          :\n            subtype === UntypedLambdaType.ORDINARY ?\n              UntypedLambdaType.ORDINARY\n            :\n              subtype === UntypedLambdaType.EXERCISE ?\n                UntypedLambdaType.EXERCISE\n              :\n                UntypedLambdaType.EMPTY\n\n        try {\n          const macrotable : MacroTable = JSON.parse(decodeURI(macros))\n\n          const box : UntypedLambdaState = createNewUntypedLambdaBoxFromSource(decodeURI(source), settings, sub, macrotable)\n          const notebook : NotebookState = createNewNotebookWithBox('Notebook from Link' , box)\n\n          this.setState({\n            currentScreen : Screen.MAIN,\n            notebookList : [ notebook, ...this.state.notebookList ],\n            currentNotebook : 0\n          })\n\n          window.history.pushState(null, '', '/') // TODO: decide if remove or leave\n\n          updateAppStateToStorage({\n            ...this.state,\n            currentScreen : Screen.MAIN,\n            notebookList : [ ...this.state.notebookList, notebook ],\n            currentNotebook : this.state.notebookList.length - 1\n          })\n        }\n        catch (ex) {\n          window.history.replaceState(null, '', '/') // TODO: decide if remove or leave\n        }\n      }\n      break\n        \n      default:\n        break;\n    }\n  }\n\n  // NOTE: render is OK\n  render () {\n    const { notebookList, currentNotebook, currentScreen } = this.state\n    const state = notebookList[currentNotebook]\n    const { settings } = state\n\n    return (\n      <div id='app'>\n        <div id=\"bad-screen-message\">\n          Lambdulus only runs on screens at least 900 pixels wide.\n        </div>\n        <TopBar\n          state={ this.state }\n          onScreenChange={ this.setScreen }\n          onImport={ this.importNotebook }\n          onClearWorkspace={ this.clearWorkspace }\n        />\n\n\n        <MenuBar\n          state={ this.state }\n          onScreenChange={ this.setScreen }\n        />\n\n        { (() => {\n          switch (currentScreen) {\n            case Screen.MAIN:\n              return <Notebook state={ state } updateNotebook={ this.updateNotebook } settings={ settings } />\n\n            case Screen.NOTEBOOKS:\n              return  <NotebookList\n                      state={ this.state }\n                      onSelectNotebook={ this.selectNotebook }\n                      onRemoveNotebook={ this.removeNotebook }\n                      onUpdateNotebook={ this.updateNthNotebook }\n                      onAddNotebook={ this.addNotebook }\n                    />\n\n            case Screen.HELP:\n              return <Help/>\n\n            case Screen.SETTINGS:\n              return <SettingsScreen settings={ settings } updateSettings={ this.updateSettings } />\n          }\n        })()}\n      </div>\n    )\n  }\n\n  // NOTE: selectNotebook is ALMOST OK\n  selectNotebook (index : number) : void {\n    this.setState({\n      currentScreen : Screen.MAIN, // TODO: why am I setting the Screen too?\n      currentNotebook : index,\n    })\n\n    updateAppStateToStorage({\n      ...this.state,\n      currentScreen : Screen.MAIN, // TODO: why am I setting the Screen too?\n      currentNotebook : index,\n    })\n\n    // CHANGED:\n    // window.history.pushState(null, '', '/')\n    // NOTE: I think this is from the time, when prompt content was also propagated to the URL bar\n    // so it shouldn't be needed anymore\n  }\n\n  // NOTE: setScereen is OK\n  setScreen (screen : Screen) : void {\n    this.setState({ currentScreen : screen })\n  }\n\n  updateNotebook (notebook : Partial<NotebookState>) : void {\n    const { notebookList, currentNotebook } = this.state\n\n    notebookList[currentNotebook] = {\n      ...notebookList[currentNotebook],\n      ...notebook,\n    }\n\n    this.setState({ notebookList })\n\n    updateNotebookStateToStorage(notebookList[currentNotebook], currentNotebook)\n    // NOTE: Carefuly around here - I kinda rely on the mutation of this.state.notebookList\n  }\n\n  updateNthNotebook (notebook : NotebookState, index : number) : void {\n    const { notebookList } = this.state\n    notebookList[index] = notebook\n\n    this.setState({ notebookList })\n\n    updateNotebookStateToStorage(notebook, index)\n  }\n\n  changeNotebook (index : number) : void {\n    this.setState({ currentNotebook : index })\n    updateAppStateToStorage({ ...this.state, currentNotebook : index })\n  }\n\n  addNotebook (name : string = '') : void {\n    this.setState({\n      notebookList : [ ...this.state.notebookList, createNewNotebook(name) ],\n      currentNotebook : this.state.currentNotebook + 1\n    })\n\n    updateAppStateToStorage({\n      ...this.state,\n      currentScreen : Screen.MAIN,\n      notebookList : [ ...this.state.notebookList, createNewNotebook(name) ],\n      currentNotebook : this.state.currentNotebook + 1\n    })\n  }\n\n  importNotebook (notebook : NotebookState) : void {\n    this.setState({\n      notebookList : [ ...this.state.notebookList, notebook ],\n      currentNotebook : this.state.currentNotebook + 1\n    })\n\n    updateAppStateToStorage({\n      ...this.state,\n      notebookList : [ ...this.state.notebookList, notebook ],\n      currentNotebook : this.state.currentNotebook + 1\n    })\n  }\n\n  removeNotebook (index : number) : void {\n    // if (index === 0) return\n\n    const { notebookList, currentNotebook } = this.state\n    \n    const nearestValidIndex = (i : number) => {\n      if (i < currentNotebook) return currentNotebook - 1\n      if (i > currentNotebook) return currentNotebook\n      if (notebookList.length === 1) return NaN\n      if (i === 0) return i\n      return i - 1\n    }\n    \n    const newIndex : number = nearestValidIndex(index)\n    \n    if (Number.isNaN(newIndex)) return\n\n    notebookList.splice(index, 1)\n\n    this.setState({ notebookList, currentNotebook : newIndex })\n    updateAppStateToStorage({\n      ...this.state,\n      notebookList,\n      currentNotebook : newIndex,\n    })\n  }\n\n  editNotebookName (index : number) : void {\n    const { notebookList } = this.state\n\n    const notebook : NotebookState = notebookList[index]\n\n    notebookList[index] = { ...notebook, editingName : true, persistent : true }\n\n    this.setState({ notebookList })\n    updateNotebookStateToStorage(notebook, index)\n    // updateAppStateToStorage({ ...this.state })\n  }\n\n  changeNotebookName (index : number, name : string) : void {\n    const { notebookList } = this.state\n\n    const notebook : NotebookState = notebookList[index]\n\n    notebookList[index] = { ...notebook, name }\n\n    this.setState({ notebookList })\n    updateNotebookStateToStorage(notebook, index)\n\n    // updateAppStateToStorage({ ...this.state })\n  }\n\n  stopEditingNotebook (index : number) : void {\n    const { notebookList } = this.state\n\n    const notebook : NotebookState = notebookList[index]\n\n    notebookList[index] = { ...notebook, editingName : false }\n\n    this.setState({ notebookList })\n    updateNotebookStateToStorage(notebook, index)\n    // updateAppStateToStorage({ ...this.state })\n  }\n\n  updateSettings (newSettings : GlobalSettings) : void {\n    const { currentNotebook, notebookList } = this.state\n    notebookList[currentNotebook].settings = newSettings\n\n    this.setState({ notebookList : [...notebookList] })\n    updateSettingsInStorage(newSettings)\n  }\n\n  // importWorkspace (state : AppState) : void {\n  //   this.setState(state)\n  //   updateAppStateToStorage(state)\n  // }\n\n  clearWorkspace () : void {\n    if (window.confirm(CLEAR_WORKSPACE_CONFIRMATION)) {\n\n      // localStorage.removeItem('AppState')\n      const { currentNotebook, notebookList } = this.state\n      notebookList[currentNotebook] = InitNotebookState\n\n      this.setState({ notebookList })\n      updateNotebookStateToStorage(InitNotebookState, currentNotebook)\n\n      // updateAppStateToStorage(this.state)\n\n      // this.setState(loadAppStateFromStorage())\n    }\n  }\n}\n\nfunction createNewNotebook (name : string = 'Anonymous Notebook') : NotebookState {\n  return {\n    boxList : [],\n    activeBoxIndex : NaN,\n    focusedBoxIndex : undefined,\n    allowedBoxes : DEFAULT_WHITELIST,\n    settings : loadSettingsFromStorage(),\n    integrationStates : {\n      'UNTYPED_LAMBDA' : UNTYPED_LAMBDA_INTEGRATION_STATE,\n    },\n\n    locked : false,\n    menuOpen : false,\n    \n    __key : Date.now().toString(),\n    name,\n    editingName : false,\n    persistent : true, // TODO: you can change this if explicit save/rename is required for persistency\n  }\n}\n\nfunction createNewNotebookWithBox (name : string = 'Notebook from Link', box : BoxState) : NotebookState {\n  return {\n    boxList : [ box ],\n    activeBoxIndex : 0,\n    focusedBoxIndex : 0,\n    allowedBoxes : DEFAULT_WHITELIST,\n    settings : loadSettingsFromStorage(),\n    integrationStates : {\n      'UNTYPED_LAMBDA' : UNTYPED_LAMBDA_INTEGRATION_STATE,\n    },\n\n    locked : false,\n    menuOpen : false,\n    \n    __key : Date.now().toString(),\n    name,\n    editingName : false,\n    persistent : true, // TODO: you can change this if explicit save/rename is required for persistency\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}